package com.sample;

import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QMessage.MessageData;
import io.vertx.rxjava.core.eventbus.EventBus;
import life.genny.qwandautils.QwandaUtils;
import com.google.gson.Gson;
//import org.json.JSONObject;
import com.sample.*;
import java.util.Map;
import java.util.HashSet;
import java.util.Set;
import life.genny.qwanda.entity.User;

import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;


global java.lang.String REACT_APP_QWANDA_API_URL;

//Rule handling Next or Button click in the Create Job
rule "Post Job Next/Cancel button click"
    when
      $m : QEventMessage( event_type == "FORM_SUBMIT" && data.code == "QUE_POST_JOB_GRP" )
      bus: EventBus()
      $user: User(realm != null)
      $map : Map($value: this["token"] != null)    
    then
        System.out.println(LOG_YELLOW + "================================================================================================================================================" + LOG_RESET);
        System.out.println(LOG_GREEN + "RULE EXECUTED      ::    POST Job - Next  " + LOG_RESET);
        
        // Prepare GSON Deserialization
        GsonBuilder gsonBuilder = new GsonBuilder();
        gsonBuilder.registerTypeAdapter(LocalDateTime.class, new DateTimeDeserializer());
        Gson gson = gsonBuilder.create();
        
        //Prepare Token & qwandaServiceUrl
        String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
        String tokenString = (String)$map.get("token"); 
        //Get data.value and decode
        String dataString = $m.data.getValue();
        JsonObject dataJson = new JsonObject(dataString);
        String jobCode = dataJson.getString("targetCode");
        String actionCode = dataJson.getString("action"); 
        
        if(actionCode.equalsIgnoreCase("next")){
         System.out.println("Next Button pressed");
          //Getting Post Job Question GRP
         JsonObject qPostJobAddress = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/"+$user.getuCode()+"/asks3/QUE_JOB_ADDRESS_DETAILS_GRP/"+jobCode, tokenString));
         qPostJobAddress.put("aliasCode", "QUE_JOB_ADDRESS_DETAILS_GRP");
         qPostJobAddress.put("token", tokenString);
         qPostJobAddress.put("msg_type", "DATA_MSG");
         System.out.println("Asks postJob Address Json: "+qPostJobAddress.toString());
         bus.publish("cmds",qPostJobAddress);

        //sending cmd FORM_VIEW
        QCmdMessage cmdAddressFormView = new QCmdMessage("CMD_VIEW","FORM_VIEW");
        //Convert cmd to JSON Obj
        JsonObject formViewAddressJson = new JsonObject().mapFrom(cmdAddressFormView);
        formViewAddressJson.put("root", "QUE_JOB_ADDRESS_DETAILS_GRP");
        formViewAddressJson.put("token", tokenString);
        System.out.println(" ##################### ");
        System.out.println("CMD VIEW Msg ="+formViewAddressJson.toString());
        System.out.println(" #################### ");
         //Publish it to the EventBus
        bus.publish("cmds", formViewAddressJson);  
          
      }
     else if(actionCode.equalsIgnoreCase("cancel")){
         System.out.println("Cancel Button pressed");
      
      }
      
        
        
        System.out.println( "\n" + LOG_RED + "RULE TERMINATED    ::  POST Job - Submit  " + LOG_RESET);
        System.out.println(LOG_YELLOW + "------------------------------------------------------------------------------------------------------------------------------------------------" + LOG_RESET);
        
end

//Rule handling Job Submit
rule "Post Job"
    when
      $m : QEventMessage( event_type == "FORM_SUBMIT" && data.code == "QUE_JOB_ADDRESS_DETAILS_GRP" )
      bus: EventBus()
      $user: User(realm != null)
      $map : Map($value: this["token"] != null)    
    then
        System.out.println(LOG_YELLOW + "================================================================================================================================================" + LOG_RESET);
        System.out.println(LOG_GREEN + "RULE EXECUTED      ::    POST Job - Submit  " + LOG_RESET);
        
        // Prepare GSON Deserialization
        GsonBuilder gsonBuilder = new GsonBuilder();
        gsonBuilder.registerTypeAdapter(LocalDateTime.class, new DateTimeDeserializer());
        Gson gson = gsonBuilder.create();
        
        //Prepare Token & qwandaServiceUrl
        String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
        String tokenString = (String)$map.get("token"); 
        String dataString = $m.data.getValue();
        JsonObject dataJson = new JsonObject(dataString);
        String jobCode = dataJson.getString("targetCode");
        String actionCode = dataJson.getString("action"); 
        boolean allFieldsEntered =  QwandaUtils.isMandatoryFieldsEntered($user.getuCode(), jobCode, $m.data.getCode(), tokenString);      
        System.out.println("The Job/BEG code submitted is    :: "+jobCode);
        System.out.println("Action Code is    :: "+actionCode);
        System.out.println("If mandatory Fields entered value    ::    "+allFieldsEntered );
     	
     	//if(allFieldsEntered == true && actionCode.equalsIgnoreCase("submit") ){       
        //link current user as load-owner to the Job/BEG
        QwandaUtils.apiPostEntity(qwandaServiceUrl + "/qwanda/entityentitys", gson.toJson(new Link(jobCode,$user.getuCode(),"LNK_BEG","OWNER")),tokenString);
         System.out.println("After adding owner to BEG");
         //Moving the BEG
         JsonObject begEntity = new JsonObject();
         begEntity.put("sourceCode","GRP_DRAFTS");
         begEntity.put("targetCode",jobCode);
         begEntity.put("attributeCode","LNK_CORE");
 	     String output = QwandaUtils.apiPostEntity(qwandaServiceUrl+"/qwanda/baseentitys/move/GRP_NEW_ITEMS", begEntity.toString(), tokenString);
 	     System.out.println("The Output after POST: "+output);
   
        String fullPickupAddress = QwandaUtils.getCompleteAddress(jobCode, "PRI_FULL_PICKUP_ADDRESS", tokenString);
        String fullDropOffAddress = QwandaUtils.getCompleteAddress(jobCode, "PRI_FULL_DROPOFF_ADDRESS", tokenString);
        
        System.out.println("Full pickup address is     ::    "+fullPickupAddress);
        System.out.println("Full dropoff address is     ::    "+fullDropOffAddress);
        //create answer to update full pickup address to the job
        Answer pickupAddress = new Answer($user.getuCode(), jobCode, "PRI_FULL_PICKUP_ADDRESS", fullPickupAddress);
        String jsonPickUpAnswerStr = gson.toJson(pickupAddress);
        JsonObject jsonPickupAddressAnswer = new JsonObject(jsonPickUpAnswerStr);
         //creating Json array
         JsonArray items = new JsonArray();
         items.add(jsonPickupAddressAnswer);
         //Creating Answer DATA_MSG
         JsonObject obj = new JsonObject();
         obj.put("msg_type", "DATA_MSG");
         obj.put("data_type", "Answer");
         obj.put("items", items); 
         //Print Answer
         System.out.println("\nSaving PRI_FULL_PICKUP_ADDRESS as an Answer   ::    "+obj.toString()); 
         obj.put("token",tokenString);
         bus.publish("data", obj);
        
        //create answer to update full dropoff address to the job
        Answer dropOffAddress = new Answer($user.getuCode(), jobCode, "PRI_FULL_DROPOFF_ADDRESS", fullDropOffAddress);
        String jsonDropOffAnswerStr = gson.toJson(dropOffAddress);
        JsonObject jsonDropOffAddressAnswer = new JsonObject(jsonDropOffAnswerStr);
         //creating Json array
         JsonArray items1 = new JsonArray();
         items1.add(jsonDropOffAddressAnswer);
         //Creating Answer DATA_MSG
         JsonObject obj1 = new JsonObject();
         obj1.put("msg_type", "DATA_MSG");
         obj1.put("data_type", "Answer");
         obj1.put("items", items1); 
         //Print Answer
         System.out.println("\nSaving PRI_FULL_DROPOFF_ADDRESS as an Answer   ::    "+obj1.toString()); 
         obj1.put("token",tokenString);
         bus.publish("data",obj1);
         
        //Calling the rule group : layout to redirect user to home/bucketView page
        drools.setFocus("layout"); 
        
        JsonObject newJobDetails = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/"+jobCode+"/linkcodes/LNK_BEG/attributes", tokenString));
        newJobDetails.put("token", $value);
        System.out.println("The newly submitted Job details     ::     "+newJobDetails.toString());
        //Publish new Job/BEG data
        bus.publish("cmds", newJobDetails);
   //  }   
        System.out.println( "\n" + LOG_RED + "RULE TERMINATED    ::  POST Job - Submit  " + LOG_RESET);
        System.out.println(LOG_YELLOW + "------------------------------------------------------------------------------------------------------------------------------------------------" + LOG_RESET);
end

//Rule handling "Create New Load" button click
rule "Create new Load"
    when
      $m : QEventMessage( event_type == "BTN_CLICK" && data.code == "QUE_CREATE_NEW_LOAD" )
      bus: EventBus()
      $user: User(realm != null)
      $map : Map($value: this["token"] != null)    
    then
      System.out.println(LOG_YELLOW + "================================================================================================================================================" + LOG_RESET);
      System.out.println(LOG_GREEN + "RULE EXECUTED      ::    Create new Load  " + LOG_RESET);
      // Prepare GSON Deserialization
     GsonBuilder gsonBuilder = new GsonBuilder();
     gsonBuilder.registerTypeAdapter(LocalDateTime.class, new DateTimeDeserializer());
     Gson gson = gsonBuilder.create();
      //Prepare Token & qwandaServiceUrl
      String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
      String tokenString = (String)$map.get("token"); 
      
      //Getting list of load category
     JsonObject loadCategoryList = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_LOAD_CATEGORY/linkcodes/LNK_CORE?pageStart=0&pageSize=20", tokenString));
     loadCategoryList.put("token", tokenString);
     //System.out.println("List of Load Catrgory: "+loadCategoryList.toString());
     bus.publish("cmds",loadCategoryList);
     
     //Creating new base-entity LOAD
     BaseEntity load = QwandaUtils.createBaseEntityByCode(QwandaUtils.getUniqueId($user.getuCode(), null, "LOD", tokenString), "LOAD", qwandaServiceUrl, tokenString);
     String loadCode = load.getCode();
     System.out.println("BaseEntity LOAD created is   ::  "+load.toString());
     System.out.println("The Load code is   ::  "+loadCode);
     System.out.println("The BEG/Job code is     ::    "+$m.data.getValue());
     JSONParser parser = new JSONParser(); 
     JSONObject jsonValue = (JSONObject) parser.parse($m.data.getValue());
     String jobCode = (String)jsonValue.get("targetCode");
     System.out.println("The BEG code from value is    ::    "+jobCode);

     //Link this load to the job
     QwandaUtils.apiPostEntity(qwandaServiceUrl + "/qwanda/entityentitys", gson.toJson(new Link(jobCode,loadCode,"LNK_BEG", "LOAD")),tokenString);
     //Link this load to the user's company's GRP_LOADS using comapnys LNK code 
    // QwandaUtils.apiPostEntity(qwandaServiceUrl + "/qwanda/entityentitys", gson.toJson(new Link("GRP_LOADS",loadCode,"LNK_{comapny_id}", $user.getuCode())),tokenString);
      //Getting Post Load Question GRP
      JsonObject qCreateLoad = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/"+$user.getuCode()+"/asks3/QUE_CREATE_LOAD_GRP/"+loadCode, tokenString));
      qCreateLoad.put("aliasCode", $m.data.getCode());
      qCreateLoad.put("token", tokenString);
      qCreateLoad.put("msg_type", "DATA_MSG");
      System.out.println("Create Load Json: "+qCreateLoad.toString());
      bus.publish("cmds",qCreateLoad);

      //sending cmd FORM_VIEW
      QCmdMessage cmdFormView = new QCmdMessage("CMD_VIEW","FORM_VIEW");
      //Convert cmd to JSON Obj
      JsonObject formViewJson = new JsonObject().mapFrom(cmdFormView);
        formViewJson.put("root", "QUE_CREATE_LOAD_GRP");
        formViewJson.put("token", tokenString);
      System.out.println(" ##################### ");
     System.out.println("CMD VIEW Msg ="+formViewJson.toString());
      System.out.println(" #################### ");
      //Publish it to the EventBus
      bus.publish("cmds", formViewJson);
      
      //Get the layout for Load Items List view
      String loadItemsList = QwandaUtils.apiGet("https://raw.githubusercontent.com/genny-project/layouts/master/create_load.json", null);
      QCmdMessage cmdSublayout = new QCmdMessage("CMD_SUBLAYOUT","LoadItemList");
      //Convert cmd to JSON Obj
      JsonObject cmdSubLayout = new JsonObject().mapFrom(cmdSublayout);
      cmdSubLayout.put("items", new JsonObject(loadItemsList));
      cmdSubLayout.put("root", "QUE_CREATE_LOAD_GRP");
      System.out.println(" ##################### ");
      System.out.println("Sub-layout  = "+cmdSubLayout.toString()); 
      System.out.println(" #################### ");
      cmdSubLayout.put("token", tokenString);
      //Publish it to the EventBus
      bus.publish("cmds", cmdSubLayout);
      
     //Getting list of loadsItems
     JsonObject loadItemLists = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_LOAD_ITEMS/linkcodes/LNK_CPY_COMPANY1/attributes", tokenString));
     loadItemLists.put("token", tokenString);
     System.out.println("List of Load Json: "+loadItemLists.toString());
     bus.publish("cmds",loadItemLists);
      
      
      System.out.println( "\n" + LOG_RED + "RULE TERMINATED    :: Create new Load  " + LOG_RESET);
      System.out.println(LOG_YELLOW + "------------------------------------------------------------------------------------------------------------------------------------------------" + LOG_RESET);
end

//Rule handling Next and Previous button click in the create load page/form
rule "Create New Load - NEXT/PREVIOUS (POST JOB)"
    when
      $m : QEventMessage( event_type == "FORM_SUBMIT" && data.code == "QUE_CREATE_LOAD_GRP" )
      bus: EventBus()
      $user: User(realm != null)
      $map : Map($value: this["token"] != null)    
    then
      System.out.println(LOG_YELLOW + "================================================================================================================================================" + LOG_RESET);
      System.out.println(LOG_GREEN + "RULE EXECUTED      ::    Create new Load - NEXT  " + LOG_RESET);
      // Prepare GSON Deserialization
     GsonBuilder gsonBuilder = new GsonBuilder();
     gsonBuilder.registerTypeAdapter(LocalDateTime.class, new DateTimeDeserializer());
     Gson gson = gsonBuilder.create();
      //Prepare Token & qwandaServiceUrl
      String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
      String tokenString = (String)$map.get("token"); 
      //get the dataValue
      String dataString = $m.data.getValue();
      JsonObject dataJson = new JsonObject(dataString);
      System.out.println(dataJson.toString());
      String loadCode = dataJson.getString("targetCode");
      String actionCode = dataJson.getString("action");
      System.out.println("The load code is   ::    "+loadCode);
      System.out.println("The action code is   ::    "+actionCode);
      String jobCode = QwandaUtils.getSourceOrTargetForGroupLink("GRP_DRAFTS", "LNK_BEG", loadCode, "LOAD", true, tokenString);
      System.out.println("The Job Code is   :: "+jobCode);
     
      if(actionCode.equalsIgnoreCase("next")){
         System.out.println("Next Button pressed");
          //Getting Post Job Question GRP
         JsonObject qPostJobAddress = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/"+$user.getuCode()+"/asks3/QUE_JOB_ADDRESS_DETAILS_GRP/"+jobCode, tokenString));
         qPostJobAddress.put("aliasCode", "QUE_JOB_ADDRESS_DETAILS_GRP");
         qPostJobAddress.put("token", tokenString);
         qPostJobAddress.put("msg_type", "DATA_MSG");
         System.out.println("Asks postJob Address Json: "+qPostJobAddress.toString());
         bus.publish("cmds",qPostJobAddress);

        //sending cmd FORM_VIEW
        QCmdMessage cmdAddressFormView = new QCmdMessage("CMD_VIEW","FORM_VIEW");
        //Convert cmd to JSON Obj
        JsonObject formViewAddressJson = new JsonObject().mapFrom(cmdAddressFormView);
        formViewAddressJson.put("root", "QUE_JOB_ADDRESS_DETAILS_GRP");
        formViewAddressJson.put("token", $value);
        System.out.println(" ##################### ");
        System.out.println("CMD VIEW Msg ="+formViewAddressJson.toString());
        System.out.println(" #################### ");
         //Publish it to the EventBus
        bus.publish("cmds", formViewAddressJson);  
          
      }
      if(actionCode.equalsIgnoreCase("previous")){
         //Getting Post Job Question GRP
         JsonObject qPostJob = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/"+$user.getuCode()+"/asks3/QUE_UPDATE_JOB_GRP/"+jobCode, tokenString));
         qPostJob.put("aliasCode", "QUE_UPDATE_JOB_GRP");
         qPostJob.put("token", tokenString);
         qPostJob.put("msg_type", "DATA_MSG");
         System.out.println("Asks postJob Json: "+qPostJob.toString());
         bus.publish("cmds",qPostJob);

        //sending cmd FORM_VIEW
        QCmdMessage cmdFormView = new QCmdMessage("CMD_VIEW","FORM_VIEW");
        //Convert cmd to JSON Obj
        JsonObject formViewJson = new JsonObject().mapFrom(cmdFormView);
        formViewJson.put("root", "QUE_UPDATE_JOB_GRP");
        formViewJson.put("token", $value);
        System.out.println(" ##################### ");
        System.out.println("CMD VIEW Msg ="+formViewJson.toString());
        System.out.println(" #################### ");
         //Publish it to the EventBus
        bus.publish("cmds", formViewJson);
     }
     System.out.println( "\n" + LOG_RED + "RULE TERMINATED    :: Create new Load - NEXT  " + LOG_RESET);
     System.out.println(LOG_YELLOW + "------------------------------------------------------------------------------------------------------------------------------------------------" + LOG_RESET);
end

//Rule handling Next and Cancel button in Update Job form
rule "Update Job - NEXT/CANCEL"
    when
      $m : QEventMessage( event_type == "FORM_SUBMIT" && data.code == "QUE_UPDATE_JOB_GRP" )
      bus: EventBus()
      $user: User(realm != null)
      $map : Map($value: this["token"] != null)    
    then
      System.out.println(LOG_YELLOW + "================================================================================================================================================" + LOG_RESET);
      System.out.println(LOG_GREEN + "RULE EXECUTED      ::    Update Job - NEXT/CANCEL  " + LOG_RESET);
      // Prepare GSON Deserialization
     GsonBuilder gsonBuilder = new GsonBuilder();
     gsonBuilder.registerTypeAdapter(LocalDateTime.class, new DateTimeDeserializer());
     Gson gson = gsonBuilder.create();
      //Prepare Token & qwandaServiceUrl
      String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
      String tokenString = (String)$map.get("token");
      //get the dataValue
      String dataString = $m.data.getValue();
      JsonObject dataJson = new JsonObject(dataString);
      System.out.println(dataJson.toString());
      String jobCode = dataJson.getString("targetCode");
      String actionCode = dataJson.getString("action");
      System.out.println("The job code is   ::    "+jobCode);
      System.out.println("The action code is   ::    "+actionCode); 
      String loadCode = QwandaUtils.getSourceOrTargetForGroupLink("GRP_DRAFTS", "LNK_BEG", jobCode, "LOAD", false, tokenString);
      System.out.println("The load Code is   :: "+loadCode);
      
      if(actionCode.equalsIgnoreCase("next")){
         System.out.println("Next Button pressed");
          //Getting Post Job Question GRP
         JsonObject qPostJobAddress = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/"+$user.getuCode()+"/asks3/QUE_CREATE_LOAD_GRP/"+jobCode, tokenString));
         qPostJobAddress.put("aliasCode", "QUE_CREATE_LOAD_GRP");
         qPostJobAddress.put("token", tokenString);
         qPostJobAddress.put("msg_type", "DATA_MSG");
         System.out.println("Asks postJob Address Json: "+qPostJobAddress.toString());
         bus.publish("cmds",qPostJobAddress);

        //sending cmd FORM_VIEW
        QCmdMessage cmdAddressFormView = new QCmdMessage("CMD_VIEW","FORM_VIEW");
        //Convert cmd to JSON Obj
        JsonObject formViewAddressJson = new JsonObject().mapFrom(cmdAddressFormView);
        formViewAddressJson.put("root", "QUE_CREATE_LOAD_GRP");
        formViewAddressJson.put("token", $value);
        System.out.println(" ##################### ");
        System.out.println("CMD VIEW Msg ="+formViewAddressJson.toString());
        System.out.println(" #################### ");
         //Publish it to the EventBus
        bus.publish("cmds", formViewAddressJson);  
          
      }
      else if(actionCode.equalsIgnoreCase("cancel")){
         System.out.println("Cancel Button pressed");
      
      }
      
      
      System.out.println( "\n" + LOG_RED + "RULE TERMINATED    :: Update Job - NEXT/CANCEL " + LOG_RESET);
      System.out.println(LOG_YELLOW + "------------------------------------------------------------------------------------------------------------------------------------------------" + LOG_RESET);
            
end
