package life.genny.rules;
 
import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QCmdMessage;
import io.vertx.rxjava.core.eventbus.EventBus;
import io.vertx.core.buffer.Buffer;
import com.google.gson.Gson;
import life.genny.qwanda.Answer;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwandautils.KeycloakUtils;
import life.genny.qwandautils.QwandaUtils;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.qwanda.Ask;

import java.lang.reflect.Type;
import java.util.Map;
import org.apache.commons.lang3.StringUtils;
import java.time.LocalDateTime;
import java.time.ZonedDateTime;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonParser;
import com.google.gson.JsonSerializationContext;
import com.google.gson.FieldNamingPolicy;
import io.vertx.core.json.JsonObject;
import java.time.format.DateTimeFormatter;
import life.genny.qwanda.DateTimeDeserializer;

global java.lang.String REACT_APP_QWANDA_API_URL;
global java.lang.String REACT_APP_VERTX_URL;
global java.lang.String KEYCLOAKIP;
 
  

/* Treeview item selection Rules */
rule "Select TreeView Item: DASHBOARD"
     when
        $m : QEventMessage( event_type == "TV_SELECT" && data.code == "TV1" && (data.value == "GRP_DASHBOARD" || data.value == "GRP_DRIVER_VIEW" || data.value == "GRP_OWNER_VIEW") )
        bus: EventBus()
        $map : Map($value: this["token"] != null)
    then
 	    System.out.println("-------- Rule:- SELECT TreeView DASHBOARD Items: BUCKET_VIEW --------");	
		/*Getting QwandaService URL */
		String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL")==null?System.getenv("REACT_APP_QWANDA_API_URL"):REACT_APP_QWANDA_API_URL;
 		/*Getting token String */
  	    String tokenString = (String)$map.get("token");
		System.out.println("tokenstr="+StringUtils.abbreviateMiddle(tokenString, "...", 40));
		
		/*Base Entity to be displayed in the table as header */
		JsonObject headerGrps = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_DRIVER_VIEW/linkcodes/LNK_CORE", tokenString));		
        /*Getting B.E. to display in Bucket View with linkcode LNK_BEG */
        JsonObject noQuotesBEG = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_NEW_ITEMS/linkcodes/LNK_CORE/attributes", tokenString));
        /*JsonObject quotesBEG = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_QUOTES/linkcodes/LNK_CORE/attributes", tokenString)); */
        JsonObject approvedBEG = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_APPROVED/linkcodes/LNK_CORE/attributes", tokenString));
        JsonObject inTransitBEG = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_IN_TRANSIT/linkcodes/LNK_CORE/attributes", tokenString));
        JsonObject completedBEG = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_COMPLETED/linkcodes/LNK_CORE/attributes", tokenString));
        JsonObject paidBEG = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_PAID/linkcodes/LNK_CORE/attributes", tokenString));
        
        JsonObject noQuotes = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/BEG_0000001/linkcodes/LNK_BEG/attributes", tokenString));
        JsonObject quotes1 = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/BEG_0000002/linkcodes/LNK_BEG/attributes", tokenString));
   		JsonObject quotes2 = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/BEG_0000003/linkcodes/LNK_BEG/attributes", tokenString)); 
   		JsonObject approved = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/BEG_0000004/linkcodes/LNK_BEG/attributes", tokenString));
   		JsonObject inTransit = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/BEG_0000005/linkcodes/LNK_BEG/attributes", tokenString)); 
		
		
		headerGrps.put("token", $value);
		noQuotesBEG.put("token", $value);
		/*quotesBEG.put("token", $value); */
		approvedBEG.put("token", $value);
		inTransitBEG.put("token", $value);
		completedBEG.put("token", $value);
		paidBEG.put("token", $value);
		noQuotes.put("token", $value);
		quotes1.put("token", $value);
		quotes2.put("token", $value);
		approved.put("token", $value);
		inTransit.put("token", $value);
		
		/*Publish Header Grp */
		 bus.publish("cmds", headerGrps);		
		/*Publish noQuotes BEG */
		 bus.publish("cmds", noQuotesBEG);
		/*Publish Quotes BEG */
	/*	 bus.publish("cmds", quotesBEG); */
		 /*Publish Approved BEG */
		 bus.publish("cmds", approvedBEG);
		 /*Publish In Transit BEG */
		 bus.publish("cmds", inTransitBEG);
		 /*Publish Completed BEG */
		 bus.publish("cmds", completedBEG);
		 /*Publish Paiod BEG */
		 bus.publish("cmds", paidBEG);
		
		/*Publish noQuotes load    */         
        bus.publish("cmds", noQuotes);
        /*Publish Quotes load */
        bus.publish("cmds", quotes1);
        /*Publish Quotes load */
        bus.publish("cmds", quotes2);
		/*Publish approved loads   */
        bus.publish("cmds", approved);
        /*Publish In-Transit loads  */
        bus.publish("cmds", inTransit);
        
         /*sending cmd SUB_LAYOUT   */
        /*Get Sub-Layout from the Github */
        String subLayout = QwandaUtils.apiGet(RulesUtils.getLayoutCacheURL("card.json"), null);  
       /*Creating subLayout DATA_MSG */
       JsonObject sublayoutJson = new JsonObject();
        sublayoutJson.put("msg_type", "DATA_MSG");
        sublayoutJson.put("data_type", "SUB_LAYOUT");
        sublayoutJson.put("code", "cardLayout");
        
        sublayoutJson.put("token", $value);
        
        sublayoutJson.put("items", new JsonObject(subLayout));        
        System.out.println(" ----------------------------------- ");
        System.out.println("SubLayout Data ="+sublayoutJson.toString()); 
        System.out.println(" ----------------------------------- ");
        /*Publish DATA_MSG to the EventBus */
        bus.publish("cmds", sublayoutJson); 
        
       /*Calling the rule group to send cmd CMD_VIEW  */
       drools.setFocus("CMD_VIEW"); 
       

				  
end
