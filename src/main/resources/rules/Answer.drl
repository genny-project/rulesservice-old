package com.sample;

import org.apache.commons.lang3.StringUtils;

import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QMessage.MessageData;
import life.genny.qwanda.message.QCmdMessage;
import io.vertx.rxjava.core.eventbus.EventBus;
import io.vertx.core.buffer.Buffer;
import com.google.gson.Gson;
import life.genny.qwanda.Answer;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwanda.message.QEventAttributeValueChangeMessage;
import life.genny.qwandautils.KeycloakUtils;
import life.genny.qwandautils.MergeUtil;
import life.genny.qwandautils.QwandaUtils;
import life.genny.qwandautils.MergeUtil;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwanda.Ask;
import life.genny.qwanda.Link;


import java.lang.reflect.Type;
import java.util.Map;
import java.util.Set;
import java.util.Iterator;
//import java.util.ArrayList;
//import java.util.List;
import java.util.HashMap; 
import java.time.LocalDateTime;
import java.time.ZonedDateTime;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializationContext;
import com.google.gson.FieldNamingPolicy;
import io.vertx.core.json.JsonObject;
import io.vertx.core.json.JsonArray;
import java.time.format.DateTimeFormatter;
import life.genny.qwanda.DateTimeDeserializer;

global java.lang.String LOG_RESET;
global java.lang.String LOG_RED;
global java.lang.String LOG_GREEN;
global java.lang.String LOG_YELLOW;
global java.lang.String LOG_BLUE;
global java.lang.String LOG_PURPLE;
global java.lang.String LOG_CYAN;
global java.lang.String LOG_WHITE;
global java.lang.String LOG_BOLD;

rule "Answer"
    when
        m : QDataAnswerMessage( QDataAnswerMessage.getData_type().equals(Answer.class.getSimpleName()) )
        bus: EventBus()
        $map : Map($value: this["token"] != null)
    then    

        System.out.println("================================================================================================================================================");
        System.out.println("RULE EXECUTED      ::   Answer");
        
        /* Prepare Token & qwandaServiceUrl */
        String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
        String tokenString = (String)$map.get("token");   

        System.out.println("\nToken          ::   " + StringUtils.abbreviateMiddle(tokenString,"...",40));
        System.out.println("------------------------------------------------------------------------");

        GsonBuilder gsonBuilder = new GsonBuilder();
        gsonBuilder.registerTypeAdapter(LocalDateTime.class, new DateTimeDeserializer());
        Gson gson = gsonBuilder.create();

        /* extract answers */
        Answer[] answers = m.getItems();
        for (Answer answer : answers) {
        
            Long askId = answer.getAskId();
            String sourceCode = answer.getSourceCode();
            String targetCode = answer.getTargetCode();
            answer.setSourceCode(answer.getTargetCode());
            String attributeCode = answer.getAttributeCode();
            String value = answer.getValue();
            Boolean inferred = answer.getInferred();
            Double weight = answer.getWeight();
            Boolean expired = answer.getExpired();
            Boolean refused = answer.getRefused();
            System.out.println("Printing Answer data recieved   ::");
            System.out.println("\nAskId: " +askId + "\nSource Code: " +sourceCode + "\nTarget Code: " +targetCode + "\nAttribute Code: " +attributeCode + "\nAttribute Value: " +value+" \nInferred: "+(inferred?"TRUE":"FALSE")+ " \nWeight: "+weight);
            System.out.println("------------------------------------------------------------------------");
            
            /* if this answer is actually an address another rule will be triggered */
            if(!attributeCode.contains("ADDRESS_FULL")) {
            
             	/* convert answer to json */
	            String jsonAnswer = gson.toJson(answer);
	            System.out.println("incoming JSON Answer   ::   "+jsonAnswer);
	
	            /* convert Answer Json to Answer obj */
	            Answer answerObj = gson.fromJson(jsonAnswer, Answer.class);
	            System.out.println("Answer Object   ::   "+answerObj);
	            System.out.println("------------------------------------------------------------------------");
	            /* JsonObject jsonObject = Buffer.buffer(json).toJsonObject(); */         
	
	            /* post answers to qwanda-utils */
	            QwandaUtils.apiPostEntity(qwandaServiceUrl+"/qwanda/answers",jsonAnswer, tokenString);
            }
         }      
        
        System.out.println("\n \u001B[31m RULE TERMINATED    ::   Answer \u001B[0m ");
        System.out.println( "\u001B[33m ------------------------------------------------------------------------------------------------------------------------------------------------  \u001B[0m");
           
end

/* Update address */ 
rule "Update Address"
	when
		m : QDataAnswerMessage( QDataAnswerMessage.getData_type().equals(Answer.class.getSimpleName()) )
	    bus: EventBus()
	    $map : Map($value: this["token"] != null)
	then
	
		try {
			
			Answer[] newAnswers = new Answer[100];
			Answer[] answers = m.getItems();
			GsonBuilder gsonBuilder = new GsonBuilder();
	        gsonBuilder.registerTypeAdapter(LocalDateTime.class, new DateTimeDeserializer());
	        Gson gson = gsonBuilder.create();
	        String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
	        String tokenString = (String)$map.get("token"); 
	        
	        for (Answer answer : answers) {
	        
	            String targetCode = answer.getTargetCode();
	            answer.setSourceCode(answer.getTargetCode());
	            String attributeCode = answer.getAttributeCode();
	            String value = answer.getValue();
	            
	            System.out.println("value ::"+value + "attribute code ::"+attributeCode);
	            
	            JsonObject addressDataJson = new JsonObject(value);
	           
	            /* if this answer is actually an address another rule will be triggered */
	            if(attributeCode.contains("ADDRESS_FULL")) {
	            	
		            	Map<String, String> availableKeys = new HashMap<String, String>();
		    			availableKeys.put("full_address", "FULL");
		    			availableKeys.put("street_address", "ADDRESS1");
		    			availableKeys.put("suburb", "SUBURB");
		    			availableKeys.put("state", "STATE");
		    			availableKeys.put("postal_code", "POSTCODE");
		    			availableKeys.put("country", "COUNTRY");
		    					    					    			
		    			int i = 0;
		    			for (Map.Entry<String, String> entry : availableKeys.entrySet())
		    			{	
		    				
		    				String key = entry.getKey();
		    				String valueEntry = entry.getValue();
		    						    				
		    				if(addressDataJson.containsKey(key)) {
		    					
		    					String newAttributeCode = attributeCode.replace("FULL", valueEntry);
		    					answer.setAttributeCode(newAttributeCode);
		    					answer.setValue(addressDataJson.getString(key));
		    					String jsonAnswer = gson.toJson(answer);
		    					Answer answerObj = gson.fromJson(jsonAnswer, Answer.class);
		    					newAnswers[i] = answerObj;
		    					i++;
		    				}
		    				
		    			}
		    			
		    			/* set new answers */
		    			m.setItems(newAnswers);
		    			String json = gson.toJson(m);
		    			System.out.println("updated answer json string ::"+json);
		    			
		    			/* send new answers to api */ 
		    			QwandaUtils.apiPostEntity(qwandaServiceUrl+"/qwanda/answers/bulk", json, tokenString);
	            }
	         }
		}
		catch (Exception e) {
		}
end

/* Rule listening to Attribute change */


/* Rule listening to Facebook Code change */
rule "Listen Facebook Code"
    when
        $m: QEventAttributeValueChangeMessage( event_type == "EVT_ATTRIBUTE_VALUE_CHANGE" && QEventAttributeValueChangeMessage.getData().getCode().equals("PRI_FB_BASIC") )
        bus:EventBus() 
       $map : Map($value: this["token"] != null)
 
     then

      GsonBuilder gsonBuilder = new GsonBuilder();
        gsonBuilder.registerTypeAdapter(LocalDateTime.class, new DateTimeDeserializer());
        Gson gson = gsonBuilder.create();

        System.out.println("\n\n");
        System.out.println(LOG_YELLOW + "================================================================================================================================================" + LOG_RESET);
        System.out.println(LOG_GREEN + "RULE EXECUTED      ::   Listen Facebook Code" + LOG_RESET);

        String tokenString = (String)$map.get("token");   
        System.out.println("\nToken                               ::   " + StringUtils.abbreviateMiddle(tokenString,"...",40));
        System.out.println("QEventAttributeValueChangeMessage   ::    " +$m); 
        System.out.println("Attribute Code changed              ::    "+$m.data.getCode()); 

        /* Collect DATA  */
        Answer newAnswer = $m.getAnswer();
  
        String jsonAnswerStr = gson.toJson(newAnswer);
        JsonObject jsonAnswer = new JsonObject(jsonAnswerStr);
        jsonAnswer.put("token",$m.getToken());
        
   
       

        /* Print DATA msg */
        System.out.println("------------------------------------------------------------------------\n");    
        System.out.println("SOCIAL DATA   ::   "+jsonAnswer); 
        System.out.println("------------------------------------------------------------------------");     
        bus.publish("social", jsonAnswer);

        System.out.println( "\n" + LOG_RED + "RULE TERMINATED    ::   Listen Facebook Code" + LOG_RESET);
        System.out.println(LOG_YELLOW + "------------------------------------------------------------------------------------------------------------------------------------------------" + LOG_RESET);
        
end

/* Rule listening to Gender Inference */
rule "Inference Gender Change"
    when
        $m: QEventAttributeValueChangeMessage( event_type == "EVT_ATTRIBUTE_VALUE_CHANGE" && QEventAttributeValueChangeMessage.getData().getCode().equals("PRI_FIRSTNAME") )
        bus:EventBus() 
        $map : Map($value: this["token"] != null)
 
     then    
        GsonBuilder gsonBuilder = new GsonBuilder();
        gsonBuilder.registerTypeAdapter(LocalDateTime.class, new DateTimeDeserializer());
        Gson gson = gsonBuilder.create();
         
        System.out.println("\n\n");
        System.out.println(LOG_YELLOW + "================================================================================================================================================" + LOG_RESET);
        System.out.println(LOG_GREEN + "RULE EXECUTED      ::   Inference Gender Change" + LOG_RESET);
        /* Prepare Token & qwandaServiceUrl */
        String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
        String tokenString = (String)$map.get("token");   

        System.out.println("\nToken                               ::   " + StringUtils.abbreviateMiddle(tokenString,"...",40));
        System.out.println("QEventAttributeValueChangeMessage   ::    " +$m); 
        System.out.println("Attribute Code changed              ::    "+$m.data.getCode()); 
        System.out.println("------------------------------------------------------------------------");
		
		String PRI_FIRSTNAME=  $m.getAnswer().getValue();
        JsonObject genderObj = new JsonObject( QwandaUtils.apiGet("https://api.genderize.io/?name=" +PRI_FIRSTNAME , null));
        /* PRINT genderObj */
        System.out.println("------------------------------------------------------------------------\n");
        System.out.println("GENDER OBJECT   ::   "+genderObj.toString());
        
        String gender= genderObj.getString("gender");    
        Float weight= genderObj.getFloat("probability");    
       
        if(gender !=null ) {
            System.out.println("GENDER   ::   "+gender.toString());
            System.out.println("\n------------------------------------------------------------------------");
            
            /* Collect DATA to save gender as an answer */
            Answer newAnswer = $m.getAnswer();

            String jsonAnswerStr = gson.toJson(newAnswer);
            JsonObject jsonAnswer = new JsonObject(jsonAnswerStr);
            jsonAnswer.put("value",gender);
            jsonAnswer.put("attributeCode","PRI_GENDER");
            jsonAnswer.put("inferred",true);
            jsonAnswer.put("weight",weight);
            JsonArray items = new JsonArray();
            items.add(jsonAnswer);

                /* Creating Answer DATA_MSG */
            JsonObject obj = new JsonObject();
            obj.put("msg_type", "DATA_MSG");
            obj.put("data_type", "Answer");
            obj.put("items", items); 
            /* Print Answer */
            System.out.println("\nSaving PRI_GENDER as an Answer   ::    "+obj.toString()); 
            obj.put("token",tokenString);
            bus.publish("data", obj);
        }else{
            System.out.println("------------------------------------------------------------------------\n");
            System.out.println("GENDER   ::  Not available ");
            System.out.println("Sorry, No Inferred Rule was executed ");
        }
        System.out.println( "\n" + LOG_RED + "RULE TERMINATED    ::   Inference Gender Change" + LOG_RESET);
        System.out.println(LOG_YELLOW + "------------------------------------------------------------------------------------------------------------------------------------------------" + LOG_RESET);
        
end

/* Rule listening to Gender Inference */
rule "Inference DOB Change"
    when
        $m: QEventAttributeValueChangeMessage( event_type == "EVT_ATTRIBUTE_VALUE_CHANGE" && QEventAttributeValueChangeMessage.getData().getCode().equals("FBK_BIRTHDAY") )
        bus:EventBus() 
        $map : Map($value: this["token"] != null)
        /*  $user: User(realm != null) */
 
     then            
        System.out.println("\n\n");
        System.out.println(LOG_YELLOW + "================================================================================================================================================" + LOG_RESET);
        System.out.println(LOG_GREEN + "RULE EXECUTED      ::   Inference DOB Change" + LOG_RESET);
        
        /* //Prepare Token & qwandaServiceUrl
        // String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
        // String tokenString = (String)$map.get("token");   

        // // Prepare gson Object
        // GsonBuilder gsonBuilder = new GsonBuilder();
        // gsonBuilder.registerTypeAdapter(LocalDateTime.class, new DateTimeDeserializer());
        // Gson gson = gsonBuilder.create();

        // System.out.println("\nToken                               ::   " + StringUtils.abbreviateMiddle(tokenString,"...",40));
        // System.out.println("QEventAttributeValueChangeMessage   ::    " +$m); 
        // System.out.println("Attribute Code changed              ::    "+$m.data.getCode()); 
        // System.out.println("------------------------------------------------------------------------");
		
		//  // Collect DATA to save facebook dob as primary dob
        // Answer newAnswer = $m.getAnswer();
        // String jsonAnswerStr = gson.toJson(newAnswer);
        // JsonObject jsonAnswer = new JsonObject(jsonAnswerStr);
            
        // // get source and target code for logged in user
        // String sourceCode= $user.getuCode();
        // String targetCode= $user.getuCode();
        // // get FBK_DOB
        // String FBK_BIRTHDAY=  $m.getAnswer().getValue();  
        // // Check if PRI_DOB exists ?
        // String PRI_DOB= MergeUtil.getAttrValue(sourceCode, "PRI_DOB", tokenString );
        
        // if(PRI_DOB == null){
        //     jsonAnswer.put("value", FBK_BIRTHDAY);
        //     jsonAnswer.put("attributeCode", "PRI_DOB");
        //     jsonAnswer.put("sourceCode", sourceCode);
        //     jsonAnswer.put("targetCode", targetCode);
        //     jsonAnswer.put("inferred",true);
        //     jsonAnswer.put("weight", "1");
        
        //     JsonArray items = new JsonArray();
        //     items.add(jsonAnswer);
            
        //     //Creating Answer DATA_MSG
        //     JsonObject obj = new JsonObject();
        //     obj.put("msg_type", "DATA_MSG");
        //     obj.put("data_type", "Answer");
        //     obj.put("items", items); 
            
        //     //Print Answer
        //     System.out.println("\nSaving FBK_BIRTHDAY as PRI_DOB   ::    "+obj.toString()); 
        //     obj.put("token",tokenString);
        //     bus.publish("data", obj);
        // }else {
        //     System.out.println(" PRI_DOB already exists ! ");
        // }
        
        // System.out.println( "\n" + LOG_RED + "RULE TERMINATED    ::   Inference DOB Change" + LOG_RESET);
        // System.out.println(LOG_YELLOW + "------------------------------------------------------------------------------------------------------------------------------------------------" + LOG_RESET);
       */
        
end

/* //Rule listening to Image Inference
// rule "Inference Image Change"
//     when
//         $m: QEventAttributeValueChangeMessage( event_type == "EVT_ATTRIBUTE_VALUE_CHANGE" && QEventAttributeValueChangeMessage.getData().getCode().equals("FBK_IMGURL") )
//         bus:EventBus() 
//         $map : Map($value: this["token"] != null)
//         $user: User(realm != null)
 
//      then    
//         System.out.println("rule executed");
//      	if($user.getUname() ==  $map.get("preferred_username") ){
//      		GsonBuilder gsonBuilder = new GsonBuilder();
// 	        gsonBuilder.registerTypeAdapter(LocalDateTime.class, new DateTimeDeserializer());
// 	        Gson gson = gsonBuilder.create();
	     
	     
// 	        System.out.println("\n\n");
// 	        System.out.println(LOG_YELLOW + "================================================================================================================================================" + LOG_RESET);
// 	        System.out.println(LOG_GREEN + "RULE EXECUTED      ::   Inference Image Change" + LOG_RESET);
// 	        //Prepare Token & qwandaServiceUrl
// 	        String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
// 	        String tokenString = (String)$map.get("token");   
	
// 	        System.out.println("\nToken                               ::   " + StringUtils.abbreviateMiddle(tokenString,"...",40));
// 	        System.out.println("QEventAttributeValueChangeMessage   ::    " +$m); 
// 	        System.out.println("Attribute Code changed              ::    "+$m.data.getCode()); 
// 	        System.out.println("------------------------------------------------------------------------");       
	       
// 	        // Collect DATA to save facebook image as primary image
// 	        Answer newAnswer = $m.getAnswer();
// 	        String jsonAnswerStr = gson.toJson(newAnswer);
// 	        JsonObject jsonAnswer = new JsonObject(jsonAnswerStr);
	        
// 	        // get FBK_IMGURL
// 	        String FBK_IMGURL=  $m.getAnswer().getValue();
	        
// 	        // get source and target code for logged in user
// 	        String sourceCode= $user.getuCode();
// 	        String targetCode= $user.getuCode();
	        
// 	        jsonAnswer.put("value", FBK_IMGURL);
// 	        jsonAnswer.put("attributeCode","PRI_IMAGE_URL");
// 	        jsonAnswer.put("sourceCode", sourceCode);
// 	        jsonAnswer.put("targetCode", targetCode);
// 	        jsonAnswer.put("inferred",true);
// 	        jsonAnswer.put("weight", "1");
	        
// 	        JsonArray items = new JsonArray();
// 	        items.add(jsonAnswer);
			
// 	        //Creating Answer DATA_MSG
// 	        JsonObject obj = new JsonObject();
// 	        obj.put("msg_type", "DATA_MSG");
// 	        obj.put("data_type", "Answer");
// 	        obj.put("items", items); 
	        
// 	        //Print Answer
// 	        System.out.println("\nSaving FBK_IMGURL as PRI_IMAGE_URL   ::    "+obj.toString()); 
// 	        obj.put("token",tokenString);
// 	        bus.publish("data", obj);
	        
// 	        System.out.println( "\n" + LOG_RED + "RULE TERMINATED    ::   Inference Image Change" + LOG_RESET);
// 	        System.out.println(LOG_YELLOW + "------------------------------------------------------------------------------------------------------------------------------------------------" + LOG_RESET);
//      	}else{
//      		 System.out.println("rule executed but outside if");
//      	}
       
        
// end
*/
/* Rule listening to load selection value change in Post Load
rule "Handle load selection"
    when
        $m: QEventAttributeValueChangeMessage( event_type == "EVT_ATTRIBUTE_VALUE_CHANGE" && data.getCode().equals("LNK_LOAD_LISTS") )
        bus:EventBus() 
        $user: User(realm != null)
        $map : Map($value: this["token"] != null)
     then
        // Prepare GSON Deserialization
        GsonBuilder gsonBuilder = new GsonBuilder();
        gsonBuilder.registerTypeAdapter(LocalDateTime.class, new DateTimeDeserializer());
        Gson gson = gsonBuilder.create();
            
        System.out.println("\n\n");
        System.out.println(LOG_YELLOW + "================================================================================================================================================" + LOG_RESET);
        System.out.println(LOG_GREEN + "RULE EXECUTED      ::  POST LOAD - Handle load selection  " + LOG_RESET);
        //Prepare Token & qwandaServiceUrl
        String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
        String tokenString = (String)$map.get("token"); 
        System.out.println("Print QEventAttributeValueChangeMessage ::  "+$m.toString());

         //Collect load code from answer
         Answer newAnswer = $m.getAnswer();
         System.out.println("The created value  ::  "+newAnswer.getCreatedDate());
         System.out.println("Answer from QEventAttributeValueChangeMessage  ::  "+newAnswer.toString());
         String targetCode = newAnswer.getTargetCode();
         String sourceCode = newAnswer.getSourceCode();
         String loadCode = newAnswer.getValue();
         System.out.println("The target BE code is   ::  " +targetCode);
         System.out.println("The source BE code is   ::  " +sourceCode);
         System.out.println("The load code is   ::  " +loadCode);
         //link LOAD to Job
         QwandaUtils.apiPostEntity(qwandaServiceUrl + "/qwanda/entityentitys", gson.toJson(new Link(targetCode,loadCode,"LNK_BEG","LOAD")),tokenString);
         String loadName = MergeUtil.getAttrValue(loadCode, "PRI_DESCRIPTION", tokenString);
         String loadType = MergeUtil.getAttrValue(loadCode, "PRI_LOAD_TYPE", tokenString);
         System.out.println(" The load Name is :: "+loadName);
         System.out.println(" The load type is :: "+loadType);
         
         //Answer loadTypeAnswer = new Answer($user.getuCode(), targetCode, "PRI_LOAD_TYPE",loadType);
          String jsonAnswerStr = gson.toJson(newAnswer);
          System.out.println("The answer in string format :: "+jsonAnswerStr);
         JsonObject jsonAnswer = new JsonObject(jsonAnswerStr);
         jsonAnswer.put("value",loadType);
         jsonAnswer.put("attributeCode","PRI_LOAD_TYPE");
         jsonAnswer.put("inferred",true);
         //jsonAnswer.put("weight",weight);
         System.out.println("The updated answer in Json format is :: "+jsonAnswer.toString());
         //creating Json array
         JsonArray items = new JsonArray();
         items.add(jsonAnswer);
        // newAnswer.setTargetCode(targetCode);
         //newAnswer.setSourceCode($user.getuCode());
         //newAnswer.setAttributeCode("PRI_LOAD_TYPE");
         //newAnswer.setValue(loadType);
         //newAnswer.setInferred(true);
       
       //  String targetCode1 = jsonAnswer.getTargetCode();
       //  String sourceCode1 = jsonAnswer.getSourceCode();
       //  String loadCode1 = jsonAnswer.getValue();
       //  System.out.println("The target BE code is   ::  " +targetCode1);
       //  System.out.println("The source BE code is   ::  " +sourceCode1);
       //  System.out.println("The load type is   ::  " +loadCode1);
         
         //Creating Answer DATA_MSG
         JsonObject obj = new JsonObject();
         obj.put("msg_type", "DATA_MSG");
         obj.put("data_type", "Answer");
         obj.put("items", items); 
         //Print Answer
         System.out.println("\nSaving PRI_LOAD_TYPE as an Answer   ::    "+obj.toString()); 
         obj.put("token",tokenString);
         bus.publish("data", obj);
         
     //    List<Answer> answerList = new ArrayList<Answer>();
      //   answerList.add(loadTypeAnswer);         
     //    Answer[] answerArray = new Answer[answerList.size()];
      //    answerArray = answerList.toArray(answerArray);
      //   System.out.println(" Printing the Answer array  :: "+answerArray);
         
     //    QDataAnswerMessage msg = new QDataAnswerMessage(answerArray);
     //    System.out.println(" Printing the QDataAnswerMessage Obj  :: "+msg.toString());
     //    JsonObject answerObj = new JsonObject().mapFrom(msg);
     //    answerObj.put("token",tokenString);
     //    System.out.println(" Printing the updated Answer Obj  :: "+answerObj.toString());
     //    bus.publish("cmds", answerObj);    
        System.out.println( "\n" + LOG_RED + "RULE TERMINATED    :: POST LOAD -  Handle load selection  " + LOG_RESET);
        System.out.println(LOG_YELLOW + "------------------------------------------------------------------------------------------------------------------------------------------------" + LOG_RESET);
end
*/

/*Rule listening to load type selection value change in Create Load */
rule "Handle load type selection"
    when
        $m: QEventAttributeValueChangeMessage( event_type == "EVT_ATTRIBUTE_VALUE_CHANGE" && data.getCode().equals("LNK_LOAD_CATEGORY_LISTS") )
        bus:EventBus() 
        $user: User(realm != null)
        $map : Map($value: this["token"] != null)
     then
        /* Prepare GSON Deserialization */
        GsonBuilder gsonBuilder = new GsonBuilder();
        gsonBuilder.registerTypeAdapter(LocalDateTime.class, new DateTimeDeserializer());
        Gson gson = gsonBuilder.create();
            
        System.out.println("\n\n");
        System.out.println(LOG_YELLOW + "================================================================================================================================================" + LOG_RESET);
        System.out.println(LOG_GREEN + "RULE EXECUTED      ::  Create LOAD - Handle load type selection  " + LOG_RESET);
        /* Prepare Token & qwandaServiceUrl */
        String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
        String tokenString = (String)$map.get("token"); 
        System.out.println("Print QEventAttributeValueChangeMessage ::  "+$m.toString());
        
        /* Collect load code from answer */
         Answer newAnswer = $m.getAnswer();
         System.out.println("The created value  ::  "+newAnswer.getCreatedDate());
         System.out.println("Answer from QEventAttributeValueChangeMessage  ::  "+newAnswer.toString());
         String targetCode = newAnswer.getTargetCode();
         String sourceCode = newAnswer.getSourceCode();
         String loadTypeCode = newAnswer.getValue();
         String attributeCode = $m.data.getCode();
         System.out.println("The target BE code is   ::  " +targetCode);
         System.out.println("The source BE code is   ::  " +sourceCode);
         System.out.println("The attribute code is   ::  " +attributeCode);
         System.out.println("The load type code is   ::  " +loadTypeCode);
           BaseEntity loadType = MergeUtil.getBaseEntityForAttr(loadTypeCode, tokenString);
          String loadTypeValue = loadType.getName();
         System.out.println("The load type value is   ::  " +loadTypeValue);
         /* creating new Answer */
         String jsonAnswerStr = gson.toJson(newAnswer);
         System.out.println("The answer in string format :: "+jsonAnswerStr);
         JsonObject jsonAnswer = new JsonObject(jsonAnswerStr);
         jsonAnswer.put("value",loadTypeValue);
         jsonAnswer.put("attributeCode","PRI_LOAD_TYPE");
         jsonAnswer.put("inferred",true);
         /* jsonAnswer.put("weight",weight); */
         System.out.println("The updated answer in Json format is :: "+jsonAnswer.toString());
         /* creating Json array */
         JsonArray items = new JsonArray();
         items.add(jsonAnswer);
         /* Creating Answer DATA_MSG */
         JsonObject obj = new JsonObject();
         obj.put("msg_type", "DATA_MSG");
         obj.put("data_type", "Answer");
         obj.put("items", items); 
         /* Print Answer */
         System.out.println("\nSaving PRI_LOAD_TYPE as an Answer for LOAD   ::    "+obj.toString()); 
         obj.put("token",tokenString);
         bus.publish("data", obj);
         
      
        System.out.println( "\n" + LOG_RED + "RULE TERMINATED    :: Create LOAD - Handle load type selection  " + LOG_RESET);
        System.out.println(LOG_YELLOW + "------------------------------------------------------------------------------------------------------------------------------------------------" + LOG_RESET);
 end