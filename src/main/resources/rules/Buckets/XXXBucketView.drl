package life.genny.rules;

import life.genny.rules.QRules;
import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QEventLinkChangeMessage;
import life.genny.qwanda.message.QCmdGeofenceMessage;
import life.genny.qwanda.message.QMSGMessage;
import life.genny.qwanda.message.QBaseMSGMessageType;
import life.genny.qwanda.entity.EntityEntity;
import org.apache.commons.lang3.StringUtils;
import io.vertx.rxjava.core.eventbus.EventBus;
import io.vertx.core.buffer.Buffer;
import com.google.gson.Gson;
import life.genny.qwanda.Answer;
import life.genny.qwanda.GPS;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwandautils.KeycloakUtils;
import life.genny.qwandautils.QwandaUtils;
import life.genny.qwandautils.GPSUtils;

import java.lang.reflect.Type;
import java.util.Map;
import java.time.LocalDateTime;
import java.time.ZonedDateTime;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializationContext;
import com.google.gson.FieldNamingPolicy;
import io.vertx.core.json.JsonObject;
import io.vertx.core.json.JsonArray;
import java.time.format.DateTimeFormatter;
import life.genny.qwanda.DateTimeDeserializer;

import life.genny.channels.EBCHandlers;




/* BucketView element Transaction */
rule "BucketView Group Change - Valid"
  when
        $m : QEventLinkChangeMessage( event_type == "EVT_LINK_CHANGE" && ((link.sourceCode == "GRP_NEW_ITEMS" && link.targetCode == "GRP_APPROVED") || (link.sourceCode == "GRP_APPROVED" && link.targetCode == "GRP_IN_TRANSIT") || (link.souceCode == "GRP_IN_TRANSIT" && link.targetCode == "GRP_COMPLETED") || (link.sourceCode == "GRP_COMPLETED" && link.targetCode == "GRP_PAID") || (link.sourceCode == "GRP_APPROVED" && link.targetCode == "GRP_NEW_ITEMS")) )
        bus: EventBus()
        $map : Map($value: this["token"] != null)
        rules : QRules()
    then

	rules.header();

         String output = QwandaUtils.apiPostEntity(rules.getQwandaServiceUrl()+"/qwanda/baseentitys/move/"+$m.getTargetBaseEntityCode(), begEntity.toString(), rules.getToken());

         /* Fectching updated link of BEG */
 	     JsonArray updatedLink = new JsonArray(QwandaUtils.apiGet(rules.getQwandaServiceUrl()+"/qwanda/entityentitys/"+$m.data.getCode()+"/linkcodes/"+$m.getLinkCode(), rules.getToken()));

 	     /* Creating a data msg */
 	      JsonObject newLink = new JsonObject();
 	      newLink.put("msg_type", "DATA_MSG");
          newLink.put("data_type", "LINK_CHANGE");
          newLink.put("items", updatedLink);
          newLink.put("token", $value );
           bus.publish("cmds", newLink);

       /* Sending message to Message Service */
 	   String begCode = "code:"+$m.data.getCode();
 	   String[] msgMessageData = {begCode, "recipient:OWNER"};
 	   String[] attachments = {};
 	   System.out.println("msgMessageData String Arrray: "+msgMessageData.toString());
 	   String msgTemplateCode = "MSG_CH40_MOVE_" + $m.getTargetBaseEntityCode();

 	   /* Creating messageData MSG_MESSAGE */
 	   QMSGMessage msgMessage = new QMSGMessage("MSG_MESSAGE", msgTemplateCode, msgMessageData, QBaseMSGMessageType.EMAIL, attachments);
 	   JsonObject jsonMessage = new JsonObject().mapFrom(msgMessage);
 	   jsonMessage.put("token",tokenString);

  	   bus.publish("messages", jsonMessage);
 	
 	rules.footer();
 end



rule "BucketView movement"
	when
		 $m : QEventLinkChangeMessage( event_type == "EVT_LINK_CHANGE" )
	     bus: EventBus()
	     $map : Map($value: this["token"] != null)
	     rules: QRules()
	then
		
		String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL") == null ? System.getenv("REACT_APP_QWANDA_API_URL") : System.getenv("REACT_APP_QWANDA_API_URL");
		String tokenString = rules.getToken();
		
		/* we update the link */
		String destinationGroup = $m.getTargetBaseEntityCode();
	    String begCode = $m.getData().getValue();
		QwandaUtils.apiPostEntity(rules.getQwandaServiceUrl() + "/qwanda/baseentitys/move/" + destinationGroup, begCode, rules.getToken());
end

rule "BucketView item movement - GRP_NEW_ITEMS to GRP_APPROVED"
  when
        $m : QEventLinkChangeMessage( event_type == "EVT_LINK_CHANGE" && ( (sourceBaseEntityCode == "GRP_NEW_ITEMS" && targetBaseEntityCode == "GRP_APPROVED")) )
        rules: QRules()
    then
    
    		rules.header();
        rules.geofenceJob($m.data.getCode(), rules.getUser().getCode(), 10.0);
        rules.footer();
end



/* BucketView Card double click */
rule "BucketView Card click"
  when
     $m : QEventMessage( event_type == "BTN_CLICK" && data.code == "LOAD_CLICK" )
     bus: EventBus()
     $map : Map($value: this["token"] != null)
  then
  	rules.header();
       QCmdMessage cmdLoadSublayout = new QCmdMessage("CMD_SUBLAYOUT","LoadLayout");
     JsonObject cmdLoadSublayoutJson = new JsonObject().mapFrom(cmdLoadSublayout);
     cmdLoadSublayoutJson.put("items", "LOD_LOAD1");
      /* getting Layout from GitHub */
      JsonObject sublayout = new JsonObject(QwandaUtils.apiGet(RulesUtils.getLayoutCacheURL("loadLayout.json"), null));

     cmdLoadSublayoutJson.put("items",sublayout);
     cmdLoadSublayoutJson.put("token",$value);

        /* Publish it to the EventBus */
      bus.publish("cmds", cmdLoadSublayoutJson);
      rules.footer();
end

/* Rule for Editing LOAD */
rule "Edit button click for a load"
  when
     $m : QEventMessage( event_type == "BTN_CLICK" && data.code == "LOAD_EDIT" )
     bus: EventBus()
     $map : Map($value: this["token"] != null)
  then
 	rules.header();
      QCmdMessage cmdFormView = new QCmdMessage("CMD_VIEW","FORM_VIEW");
     JsonObject cmdFormViewJson = new JsonObject().mapFrom(cmdFormView);
     cmdFormViewJson.put("root", "LOD_LOAD1");
     cmdFormViewJson.put("token", $value);
     bus.publish("cmds", cmdFormViewJson);
     JsonObject load = new JsonObject( QwandaUtils.apiGet(rules.getQwandaServiceUrl()+"/qwanda/baseentitys/"+$m.data.getValue()+"/linkcodes/LNK_BEG/attributes", rules.getToken()));
     load.put("token", $value);
     bus.publish("cmds", load);
     rules.footer();
end
