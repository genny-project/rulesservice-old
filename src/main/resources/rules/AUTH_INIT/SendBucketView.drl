package com.sample;

import org.apache.commons.lang3.StringUtils;

import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QMessage.MessageData;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import io.vertx.rxjava.core.eventbus.EventBus;
import io.vertx.core.buffer.Buffer;
import com.google.gson.Gson;
import life.genny.qwanda.Answer;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwandautils.KeycloakUtils;
import life.genny.qwandautils.QwandaUtils;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.Ask;
import life.genny.qwanda.entity.BaseEntity;

import java.lang.reflect.Type;
import java.util.Map;
import java.util.Set;
import java.time.LocalDateTime;
import java.time.ZonedDateTime;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializationContext;
import com.google.gson.FieldNamingPolicy;
import io.vertx.core.json.JsonObject;
import io.vertx.core.json.JsonArray;
import java.time.format.DateTimeFormatter;
import life.genny.qwanda.DateTimeDeserializer;
import life.genny.qwanda.entity.User;
import life.genny.qwanda.Link;

// global variables for color logs
global java.lang.String LOG_RESET;
global java.lang.String LOG_RED;
global java.lang.String LOG_GREEN;
global java.lang.String LOG_YELLOW;
global java.lang.String LOG_BLUE;
global java.lang.String LOG_PURPLE;
global java.lang.String LOG_CYAN;
global java.lang.String LOG_WHITE;
global java.lang.String LOG_BOLD;

rule "Send BucketView"
    salience -1
    agenda-group "layout"
    when
       bus:EventBus()
        $user: User(realm != "memberhub" && (isAvailable == true) )
       $map : Map($value: this["token"] != null)
    then
        System.out.println(LOG_YELLOW + "================================================================================================================================================" + LOG_RESET);
        System.out.println(LOG_GREEN + "RULE EXECUTED      ::   Send BucketView" + LOG_RESET);
       
       /* Prepare Token & qwandaServiceUrl */
        String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
        String tokenString = (String)$map.get("token");   

        System.out.println("\nToken   ::   " + StringUtils.abbreviateMiddle(tokenString,"...",40));
        System.out.println("Project Name   ::   " + $user.getRealm() );
         System.out.println("------------------------------------------------------------------------");

        /* System.out.println("Sending Bucket View for project: "+$user.getRealm());  */

        /* For the links and their weight */
        JsonObject grpLinks = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_DASHBOARD/linkcodes/LNK_CORE/attributes", tokenString));
        /* Getting B.E. to display in Bucket View */
        JsonObject headerGrps = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_DRIVER_VIEW/linkcodes/LNK_CORE/attributes", tokenString));	
        JsonObject noQuotesBEG = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_NEW_ITEMS/linkcodes/LNK_CORE/attributes", tokenString));
        JsonObject approvedBEG = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_APPROVED/linkcodes/LNK_CORE/attributes", tokenString));
        JsonObject inTransitBEG = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_IN_TRANSIT/linkcodes/LNK_CORE/attributes", tokenString));
        JsonObject completedBEG = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_COMPLETED/linkcodes/LNK_CORE/attributes", tokenString));
        JsonObject paidBEG = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_PAID/linkcodes/LNK_CORE/attributes", tokenString));  
        /* Getting Load data for each BEG's */
        JsonObject noQuotes = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/BEG_0000001/linkcodes/LNK_BEG/attributes", tokenString));
        JsonObject quotes1 = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/BEG_0000002/linkcodes/LNK_BEG/attributes", tokenString));
        JsonObject quotes2 = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/BEG_0000003/linkcodes/LNK_BEG/attributes", tokenString)); 
        JsonObject approved = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/BEG_0000004/linkcodes/LNK_BEG/attributes", tokenString));
        JsonObject inTransit = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/BEG_0000005/linkcodes/LNK_BEG/attributes", tokenString)); 
		
	/* 	JsonArray beg4items = approved.getJsonArray("items"); */
	/* 	JsonArray beg4 = beg4items.getJsonArray(0); */
	/*	JsonArray ees = beg4.getJsonArray(0); */
	/*	JsonObject link = ees.getJsonObject(0).getJsonObject("link"); */
	/* 	link.put("parentColor","#FDE1EA"); */
	/* 	link.put("childColor","#FDE1EA"); // keys and indexes to be checked ADAM */
		
		grpLinks.put("token", $value);
		headerGrps.put("token", $value);
		noQuotesBEG.put("token", $value);
		approvedBEG.put("token", $value);
		inTransitBEG.put("token", $value);
		completedBEG.put("token", $value);
		paidBEG.put("token", $value);
		noQuotes.put("token", $value);
		quotes1.put("token", $value);
		quotes2.put("token", $value);
		inTransit.put("token", $value);
		approved.put("token",$value);
		
        /* Publish GRP_DASHBOARD */
        bus.publish("cmds", grpLinks);	
        /* Publish Header Grp */
        bus.publish("cmds", headerGrps);	
        /* Publish noQuotes BEG */
        bus.publish("cmds", noQuotesBEG);
        /* Publish Approved BEG */
        bus.publish("cmds", approvedBEG);
        /* Publish In Transit BEG */
        bus.publish("cmds", inTransitBEG);
        /* Publish Completed BEG */
        bus.publish("cmds", completedBEG);
        /* Publish Paiod BEG */
        bus.publish("cmds", paidBEG);

        /* Publish noQuotes load  */           
        bus.publish("cmds", noQuotes);
        /* Publish Quotes load */
        bus.publish("cmds", quotes1);
        /* Publish Quotes load */
        bus.publish("cmds", quotes2);
        /* Publish approved loads   */
        bus.publish("cmds", approved);
        /* Publish In-Transit loads  */
        bus.publish("cmds", inTransit);
        
        /* Get Sub-Layout  */
        String subLayout = QwandaUtils.apiGet(RulesUtils.getLayoutCacheURL("card.json"), null);    
       /* Creating subLayout DATA_MSG */
        JsonObject subLayoutObj = new JsonObject();
        subLayoutObj.put("msg_type", "DATA_MSG");
        subLayoutObj.put("data_type", "SUB_LAYOUT");
        subLayoutObj.put("code", "cardLayout");
        subLayoutObj.put("items", new JsonObject(subLayout));      
		subLayoutObj.put("token", $value);
		
        System.out.println("------------------------------------------------------------------------\n");
        System.out.println("SUBLAYOUT DATA   ::   " + subLayoutObj.toString()); 
        System.out.println("------------------------------------------------------------------------");
        bus.publish("cmds", subLayoutObj); 
        
        /* Get Sub-Layout */
        String subLayoutList = QwandaUtils.apiGet(RulesUtils.getLayoutCacheURL("list-item.json"), null);    
        
        /* Creating subLayout DATA_MSG */
        JsonObject subLayoutListObj = new JsonObject();
        subLayoutListObj.put("msg_type", "DATA_MSG");
        subLayoutListObj.put("data_type", "SUB_LAYOUT");
        subLayoutListObj.put("code", "listLayout");
        subLayoutListObj.put("items", new JsonObject(subLayoutList));      
		subLayoutListObj.put("token", $value);
		
        System.out.println("------------------------------------------------------------------------\n");
        System.out.println("LIST SUBLAYOUT DATA   ::   " + subLayoutListObj.toString()); 
        System.out.println("------------------------------------------------------------------------");
        bus.publish("cmds", subLayoutListObj);
        

        /* sending cmd BUCKET_VIEW */
        QCmdMessage cmdBucketView = new QCmdMessage("CMD_VIEW","BUCKET_VIEW");
        JsonObject bucketViewJson = new JsonObject().mapFrom(cmdBucketView);
        bucketViewJson.put("root", "GRP_DRIVER_VIEW");
        
		bucketViewJson.put("token", $value);
        System.out.println("BUCKETVIEW DATA   ::    "+bucketViewJson.toString()); 
        bus.publish("cmds", bucketViewJson); 

        System.out.println( "\n" + LOG_RED + "RULE TERMINATED    ::   Send BucketView" + LOG_RESET);
        System.out.println(LOG_YELLOW + "------------------------------------------------------------------------------------------------------------------------------------------------" + LOG_RESET);
end
