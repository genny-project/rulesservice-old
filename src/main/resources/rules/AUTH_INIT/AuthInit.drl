package com.sample;

import org.apache.commons.lang3.StringUtils;

import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QMessage.MessageData;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import io.vertx.rxjava.core.eventbus.EventBus;
import io.vertx.core.buffer.Buffer;
import com.google.gson.Gson;
import life.genny.qwanda.Answer;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwandautils.KeycloakUtils;
import life.genny.qwandautils.QwandaUtils;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.Ask;
import life.genny.qwanda.entity.BaseEntity;

import java.lang.reflect.Type;
import java.util.Map;
import java.util.Set;
import java.time.LocalDateTime;
import java.time.ZonedDateTime;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializationContext;
import com.google.gson.FieldNamingPolicy;
import io.vertx.core.json.JsonObject;
import io.vertx.core.json.JsonArray;
import java.time.format.DateTimeFormatter;
import life.genny.qwanda.DateTimeDeserializer;
import life.genny.qwanda.entity.User;
import life.genny.qwanda.Link;

// global java.lang.String REACT_APP_QWANDA_API_URL;
// global java.lang.String REACT_APP_VERTX_URL;
// global java.lang.String KEYCLOAKIP;

// global variables for color logs
global java.lang.String LOG_RESET;
global java.lang.String LOG_RED;
global java.lang.String LOG_GREEN;
global java.lang.String LOG_YELLOW;
global java.lang.String LOG_BLUE;
global java.lang.String LOG_PURPLE;
global java.lang.String LOG_CYAN;
global java.lang.String LOG_WHITE;
global java.lang.String LOG_BOLD;

    

rule "Init"

    when
        m : QEventMessage( QEventMessage.getData().getCode().equals("AUTH_INIT") )
        bus: EventBus()
        $map : Map($value: this["token"] != null)
        $map1 : Map($value1: this["realm"] != null)
        $roles : Set(!isEmpty())
        $user : User(uname!= null)
    then
        System.out.println("\n\n");
        System.out.println(LOG_YELLOW + "================================================================================================================================================" + LOG_RESET);
        System.out.println(LOG_GREEN + "RULE EXECUTED      ::   Init" + LOG_RESET);
        
        //Prepare Token & qwandaServiceUrl
        String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
        String tokenString = (String)$map.get("token");   
        //Get userCode for the given username
      
        System.out.println("\nToken          ::   " + StringUtils.abbreviateMiddle(tokenString,"...",40));
        System.out.println("Project Name   ::   " + $map1.get("realm") );       
        System.out.println("keycloak ID    ::   " +$map1.get("sub"));
		
		System.out.println("User facts value -  uname   ::   " +$user.getUname());
		System.out.println("User facts value -  Full Name   ::   " +$user.getFullName());
        System.out.println("User facts value -  Realm   ::   " +$user.getRealm());
        System.out.println("User facts value -  Roles   ::   " +$user.getRoles());
        
        System.out.println("value from qwandautils  ::   "+QwandaUtils.checkUserTokenExists(qwandaServiceUrl,tokenString).toString());
        System.out.println("------------------------------------------------------------------------");
        modify($user){
          setIsAvailable(QwandaUtils.checkUserTokenExists(qwandaServiceUrl,tokenString));
        }
        System.out.println("User facts value -  isAvailable   ::   " +$user.getIsAvailable());
        //Calling the rule group : UserRegistration
        drools.setFocus("UserRegistration"); 
        //Calling the rule group : layout
        //drools.setFocus("layout"); 
        
        //Get BaseEntity with attributes
        JsonObject objWithAttr = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_ROOT/linkcodes/LNK_CORE/attributes?pageStart=0&pageSize=10", tokenString));
        //Print the json Object  
        objWithAttr.put("token", $value);     
        System.out.println("------------------------------------------------------------------------");
        System.out.println("BE with ATTRIBUTE   ::   "+objWithAttr.toString()); 
        System.out.println("------------------------------------------------------------------------");            
        bus.publish("cmds", objWithAttr);   
        	
        	// Send all sublayouts for entities 
        System.out.println(LOG_YELLOW + "================================================================================================================================================" + LOG_RESET);
      	System.out.println(LOG_GREEN + "RULE EXECUTED      ::   Send initial sublayouts" + LOG_RESET);
		
		String subLayoutMap = QwandaUtils.apiGet("https://api.github.com/repos/genny-project/layouts/contents/sublayouts", null);
		if(subLayoutMap != null) {
		
			JsonArray subLayouts = new JsonArray(subLayoutMap);
			if(subLayouts != null) {
				
				for(int i = 0; i < subLayouts.size(); i++) {
					
					JsonObject sublayoutData = subLayouts.getJsonObject(i);
					String url = sublayoutData.getString("download_url");
					String name = sublayoutData.getString("name");
					name = name.replace(".json", "");
					name = name.replaceAll("\"", "");
					
					if(url != null) {
						
						// grab sublayout from github
						String subLayoutString = QwandaUtils.apiGet(url, null);
						if(subLayoutString != null) {
							
							try {
								
								// send sublayout to FE 
								JsonObject sublayout = new JsonObject(subLayoutString);
								JsonObject subLayoutObj = new JsonObject();
						        subLayoutObj.put("msg_type", "DATA_MSG");
						        subLayoutObj.put("data_type", "SUB_LAYOUT");
						        subLayoutObj.put("code", name);
						        subLayoutObj.put("items", sublayout);      
								subLayoutObj.put("token", $value);
								
						        System.out.println("------------------------------------------------------------------------\n");
						        System.out.println("SUBLAYOUT DATA   ::   " + subLayoutObj.toString()); 
						        System.out.println("------------------------------------------------------------------------");
						        bus.publish("cmds", subLayoutObj);
						        
							}
							catch(Exception e) {
							} 
						}
					}
				}
			}
		}
		
		System.out.println( "\n" + LOG_RED + "RULE TERMINATED    ::   Send initial sublayouts" + LOG_RESET);
       	System.out.println(LOG_YELLOW + "------------------------------------------------------------------------------------------------------------------------------------------------" + LOG_RESET);
       		      
end
