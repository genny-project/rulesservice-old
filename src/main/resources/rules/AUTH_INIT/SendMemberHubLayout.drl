package com.sample;

import org.apache.commons.lang3.StringUtils;

import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QMessage.MessageData;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import io.vertx.rxjava.core.eventbus.EventBus;
import io.vertx.core.buffer.Buffer;
import com.google.gson.Gson;
import life.genny.qwanda.Answer;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwandautils.KeycloakUtils;
import life.genny.qwandautils.QwandaUtils;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.Ask;
import life.genny.qwanda.entity.BaseEntity;

import java.lang.reflect.Type;
import java.util.Map;
import java.util.Set;
import java.time.LocalDateTime;
import java.time.ZonedDateTime;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializationContext;
import com.google.gson.FieldNamingPolicy;
import io.vertx.core.json.JsonObject;
import io.vertx.core.json.JsonArray;
import java.time.format.DateTimeFormatter;
import life.genny.qwanda.DateTimeDeserializer;
import life.genny.qwanda.entity.User;
import life.genny.qwanda.Link;


/* global variables for color logs */
global java.lang.String LOG_RESET;
global java.lang.String LOG_RED;
global java.lang.String LOG_GREEN;
global java.lang.String LOG_YELLOW;
global java.lang.String LOG_BLUE;
global java.lang.String LOG_PURPLE;
global java.lang.String LOG_CYAN;
global java.lang.String LOG_WHITE;
global java.lang.String LOG_BOLD;

/* Rules to Send layout based on the realm name */
rule "Send Memberhub Layout"
   salience 9
   agenda-group "layout"
   when
        bus: EventBus()
        $user: User(realm == "memberhub" && isAvailable == true )
        $map : Map($value: this["token"] != null)
        $map1 : Map($value1: this["realm"] != null)
   then
        System.out.println(LOG_YELLOW + "================================================================================================================================================" + LOG_RESET);
        System.out.println(LOG_GREEN + "RULE EXECUTED      ::   Memberhub Layout" + LOG_RESET);
        System.out.println(LOG_GREEN+ "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@" + LOG_RESET);
        System.out.println(LOG_GREEN+ "@@@                                                               @@@" + LOG_RESET);
        System.out.println(LOG_GREEN+ "@@@                    MEMBERHUB LAYOUT                           @@@" + LOG_RESET);
        System.out.println(LOG_GREEN+ "@@@                                                               @@@" + LOG_RESET);
        System.out.println(LOG_GREEN+ "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@" + LOG_RESET);

        /* Prepare GSON Deserialization */
		Gson gson = new Gson();
		GsonBuilder gsonBuilder = new GsonBuilder();
		gsonBuilder.registerTypeAdapter(LocalDateTime.class, new DateTimeDeserializer());
		gson = gsonBuilder.create();
            
         /* Prepare Token & qwandaServiceUrl */
        String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
        String tokenString = (String)$map.get("token");   
        System.out.println("\nToken   ::   " + StringUtils.abbreviateMiddle(tokenString,"...",40));
        /* Get Memberhub Layout */
        String layout = QwandaUtils.apiGet("https://raw.githubusercontent.com/genny-project/layouts/master/layouts/memberhub.json", null);

        QCmdMessage cmd = new QCmdMessage("CMD_LAYOUT","layout1");
        JsonObject layoutObj = new JsonObject().mapFrom(cmd);
        layoutObj.put("data", new JsonObject(layout));
		layoutObj.put("token", $value);
        System.out.println("------------------------------------------------------------------------\n");
        System.out.println("MEMBERHUB LAYOUT   ::   "+layoutObj.toString());
        System.out.println("------------------------------------------------------------------------");
        bus.publish("cmds", layoutObj);

		JsonObject  quesGrp = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/"+$user.getuCode()+"/asks2/QUE_MEMBERHUB_GRP/"+$user.getuCode(), tokenString));
		System.out.println("------------------------------------------------------------------------\n");
        System.out.println("MEMBERHUB QUESTIONS   ::   "+quesGrp.toString());  
        System.out.println("------------------------------------------------------------------------");
		quesGrp.put("token", $value);					
		bus.publish("cmds",  quesGrp);

        String userCode= $user.getuCode();
        String homeLoanCode = "PRD_HOME_LOAN";
        String holidayCode = "PRD_HOLIDAY";
        String linkScore= "LNK_SCORE";

        /* Check if a link exists between USER & PRD_HOME_LOAN */
        Boolean linkHomeLoan = QwandaUtils.checkIfLinkExistsForTarget(userCode, linkScore , homeLoanCode, tokenString );
        System.out.println("LINK EXISTS ?  ::    "+ linkHomeLoan);

        /* Creating a link between USER & PRD_HOME_LOAN */
        if(!linkHomeLoan){
            System.out.println("\nCREATING LINK BETWEEN          ::   " + userCode + "  &  " + homeLoanCode);
            String output = QwandaUtils.apiPostEntity(qwandaServiceUrl + "/qwanda/entityentitys", gson.toJson(new Link(userCode,homeLoanCode,linkScore)),tokenString);
        }

         /* Check if a link exists between USER & PRD_HOME_LOAN */
        Boolean linkHoliday = QwandaUtils.checkIfLinkExistsForTarget(userCode, linkScore , holidayCode, tokenString );
        System.out.println("LINK EXISTS ?  ::    "+ linkHoliday);

        /* Creating a link between USER & PRD_HOME_LOAN */
        if(!linkHoliday){
            System.out.println("\nCREATING LINK BETWEEN          ::   " + userCode + "  &  " + holidayCode);
            String output = QwandaUtils.apiPostEntity(qwandaServiceUrl + "/qwanda/entityentitys", gson.toJson(new Link(userCode,holidayCode,linkScore)),tokenString);
        }
   
        /* Getting all BaseEntity and their attributes */
        JsonObject homeLoan = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl +"/qwanda/baseentitys/"+$user.getuCode()+"/linkcodes/LNK_SCORE/attributes", tokenString));
        System.out.println("------------------------------------------------------------------------\n");
        System.out.println("HOMELOAN & HOLIDAY BE   ::   "+homeLoan.toString());  
        System.out.println("------------------------------------------------------------------------");
        homeLoan.put("token", $value);
        bus.publish("cmds", homeLoan);
        
         /* Getting all Facebook Friends and their attributes */
        JsonObject friendList = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl +"/qwanda/baseentitys/"+$user.getuCode()+"/linkcodes/LNK_FRIEND/attributes", tokenString));
        System.out.println("------------------------------------------------------------------------\n");
        System.out.println("FACEBOOK FRIEND LIST   ::   "+friendList.toString());  
        System.out.println("------------------------------------------------------------------------");
        friendList.put("token", $value);
        bus.publish("cmds", friendList);
  
        System.out.println( "\n" + LOG_RED + "RULE TERMINATED    ::   Memberhub Layout" + LOG_RESET);
        System.out.println(LOG_YELLOW + "------------------------------------------------------------------------------------------------------------------------------------------------" + LOG_RESET);
        
end
