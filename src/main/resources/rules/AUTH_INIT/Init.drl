package com.sample;

import org.apache.commons.lang3.StringUtils;

import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QMessage.MessageData;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import io.vertx.rxjava.core.eventbus.EventBus;
import io.vertx.core.buffer.Buffer;
import com.google.gson.Gson;
import life.genny.qwanda.Answer;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwandautils.KeycloakUtils;
import life.genny.qwandautils.QwandaUtils;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.Ask;
import life.genny.qwanda.entity.BaseEntity;

import java.lang.reflect.Type;
import java.util.Map;
import java.util.Set;
import java.time.LocalDateTime;
import java.time.ZonedDateTime;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializationContext;
import com.google.gson.FieldNamingPolicy;
import io.vertx.core.json.JsonObject;
import io.vertx.core.json.JsonArray;
import java.time.format.DateTimeFormatter;
import life.genny.qwanda.DateTimeDeserializer;
import life.genny.qwanda.entity.User;
import life.genny.qwanda.Link;

// global java.lang.String REACT_APP_QWANDA_API_URL;
// global java.lang.String REACT_APP_VERTX_URL;
// global java.lang.String KEYCLOAKIP;

// global variables for color logs
global java.lang.String LOG_RESET;
global java.lang.String LOG_RED;
global java.lang.String LOG_GREEN;
global java.lang.String LOG_YELLOW;
global java.lang.String LOG_BLUE;
global java.lang.String LOG_PURPLE;
global java.lang.String LOG_CYAN;
global java.lang.String LOG_WHITE;
global java.lang.String LOG_BOLD;

    

rule "Init"

    when
        m : QEventMessage( QEventMessage.getData().getCode().equals("AUTH_INIT") )
        bus: EventBus()
        $map : Map($value: this["token"] != null)
        $map1 : Map($value1: this["realm"] != null)
        $roles : Set(!isEmpty())
        $user : User(uname!= null)
    then
        System.out.println("\n\n");
        System.out.println(LOG_YELLOW + "================================================================================================================================================" + LOG_RESET);
        System.out.println(LOG_GREEN + "RULE EXECUTED      ::   Init" + LOG_RESET);
        
        //Prepare Token & qwandaServiceUrl
        String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
        String tokenString = (String)$map.get("token");   
        //Get userCode for the given username
      
        System.out.println("\nToken          ::   " + StringUtils.abbreviateMiddle(tokenString,"...",40));
        System.out.println("Project Name   ::   " + $map1.get("realm") );       
        System.out.println("keycloak ID    ::   " +$map1.get("sub"));
		
		System.out.println("User facts value -  uname   ::   " +$user.getUname());
		System.out.println("User facts value -  Full Name   ::   " +$user.getFullName());
        System.out.println("User facts value -  Realm   ::   " +$user.getRealm());
        System.out.println("User facts value -  Roles   ::   " +$user.getRoles());
        
        System.out.println("value from qwandautils  ::   "+QwandaUtils.checkUserTokenExists(qwandaServiceUrl,tokenString).toString());
        System.out.println("------------------------------------------------------------------------");
        modify($user){
          setIsAvailable(QwandaUtils.checkUserTokenExists(qwandaServiceUrl,tokenString));
        }
        System.out.println("User facts value -  isAvailable   ::   " +$user.getIsAvailable());
        //Calling the rule group : UserRegistration
        drools.setFocus("UserRegistration"); 
        //Calling the rule group : layout
        //drools.setFocus("layout"); 
        
        //Get BaseEntity with attributes
        JsonObject objWithAttr = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_ROOT/linkcodes/LNK_CORE/attributes?pageStart=0&pageSize=10", tokenString));
        //Print the json Object  
        objWithAttr.put("token", $value);     
        System.out.println("------------------------------------------------------------------------");
        System.out.println("BE with ATTRIBUTE   ::   "+objWithAttr.toString()); 
        System.out.println("------------------------------------------------------------------------");            
        bus.publish("cmds", objWithAttr);   
        	
        	// Send all sublayouts for entities 
        System.out.println(LOG_YELLOW + "================================================================================================================================================" + LOG_RESET);
      	System.out.println(LOG_GREEN + "RULE EXECUTED      ::   Send initial sublayouts" + LOG_RESET);
		
		String subLayoutMap = QwandaUtils.apiGet("https://api.github.com/repos/genny-project/layouts/contents/sublayouts", null);
		if(subLayoutMap != null) {
		
			JsonArray subLayouts = new JsonArray(subLayoutMap);
			if(subLayouts != null) {
				
				for(int i = 0; i < subLayouts.size(); i++) {
					
					JsonObject sublayoutData = subLayouts.getJsonObject(i);
					String url = sublayoutData.getString("download_url");
					String name = sublayoutData.getString("name");
					name = name.replace(".json", "");
					name = name.replaceAll("\"", "");
					
					if(url != null) {
						
						// grab sublayout from github
						String subLayoutString = QwandaUtils.apiGet(url, null);
						if(subLayoutString != null) {
							
							try {
								
								// send sublayout to FE 
								JsonObject sublayout = new JsonObject(subLayoutString);
								JsonObject subLayoutObj = new JsonObject();
						        subLayoutObj.put("msg_type", "DATA_MSG");
						        subLayoutObj.put("data_type", "SUB_LAYOUT");
						        subLayoutObj.put("code", name);
						        subLayoutObj.put("items", sublayout);      
								subLayoutObj.put("token", $value);
								
						        System.out.println("------------------------------------------------------------------------\n");
						        System.out.println("SUBLAYOUT DATA   ::   " + subLayoutObj.toString()); 
						        System.out.println("------------------------------------------------------------------------");
						        bus.publish("cmds", subLayoutObj);
						        
							}
							catch(Exception e) {
							} 
						}
					}
				}
			}
		}
		
		System.out.println( "\n" + LOG_RED + "RULE TERMINATED    ::   Send initial sublayouts" + LOG_RESET);
       	System.out.println(LOG_YELLOW + "------------------------------------------------------------------------------------------------------------------------------------------------" + LOG_RESET);
       		      
end


rule "Create new User"
   salience 21
   agenda-group "UserRegistration"
   when
      bus: EventBus()
      $user: User(isAvailable == false)
      $map : Map($value: this["token"] != null)
      $map1 : Map($value1: this["realm"] != null)
   then
      System.out.println(LOG_YELLOW + "================================================================================================================================================" + LOG_RESET);
      System.out.println(LOG_GREEN + "RULE EXECUTED      ::   Create New User" + LOG_RESET);
      System.out.println("User Already Exists? true/false   ::   "+$user.getIsAvailable());
      //Prepare Token & qwandaServiceUrl
      String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
      String tokenString = (String)$map.get("token");      
      //Creating new user based ion keycloak info
      BaseEntity person = QwandaUtils.createUser(qwandaServiceUrl, tokenString, $map1.get("preferred_username").toString(), $map1.get("given_name").toString(), $map1.get("family_name").toString(), $map1.get("email").toString() );      
      System.out.println("Person Base Entity   ::     "+person.toString());
      //Get userCode for the given username
      String userCode = QwandaUtils.getBaseEntityCodeForUserName($user.getUname(),tokenString);
      System.out.println("User Code from DB     ::    "+userCode);
      //Update the available fact value
       modify($user){
           setuCode(QwandaUtils.getBaseEntityCodeForUserName($user.getUname(), tokenString)),
           setIsAvailable(QwandaUtils.checkUserTokenExists(qwandaServiceUrl,tokenString)),
           //setIsProfileCompleted(QwandaUtils.isProfileCompleted(userCode, "QUE_NEW_USER_PROFILE_GRP", tokenString));
           setIsProfileCompleted( QwandaUtils.isMandatoryFieldsEntered(userCode, userCode, "QUE_NEW_USER_PROFILE_GRP", tokenString));
        }
       System.out.println("User facts value after creating user -  isAvailable   ::   " +$user.getIsAvailable());
      //Calling the rule group : UserRegistration
      drools.setFocus("UserRegistration");
      System.out.println("The UserCode     ::    " +$user.getuCode());
      System.out.println("Available value after creating user     ::    " +$user.getIsAvailable());
      System.out.println("isProfileCompleted value after creating user     ::    " +$user.getIsProfileCompleted());     
      System.out.println( "\n" + LOG_RED + "RULE TERMINATED    ::  Create New User" + LOG_RESET);
      System.out.println(LOG_YELLOW + "------------------------------------------------------------------------------------------------------------------------------------------------" + LOG_RESET);
end

rule "Set Ucode"
  salience 20
   agenda-group "UserRegistration"
   when
     $user: User( uCode == null )
     $map : Map($value: this["token"] != null) 
   then
     System.out.println(LOG_YELLOW + "================================================================================================================================================" + LOG_RESET);
     System.out.println(LOG_GREEN + "RULE EXECUTED      ::   Set User Code  " + LOG_RESET);
     //Prepare Token & qwandaServiceUrl
     String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
     String tokenString = (String)$map.get("token"); 
     System.out.println("The User Code before setting value  :: " +$user.getuCode());
      modify($user){
           setuCode(QwandaUtils.getBaseEntityCodeForUserName($user.getUname(), tokenString));
        }
     System.out.println("The User Code after setting value  :: " +$user.getuCode()); 
end     

rule "Check if Profile Completed"
   salience 19
   agenda-group "UserRegistration"
   when
     $user: User( isAvailable == true )
     $map : Map($value: this["token"] != null) 
   then
     System.out.println(LOG_YELLOW + "================================================================================================================================================" + LOG_RESET);
     System.out.println(LOG_GREEN + "RULE EXECUTED      ::   Check if Profile Completed  " + LOG_RESET);
     //Prepare Token & qwandaServiceUrl
     String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
     String tokenString = (String)$map.get("token"); 
     //Get userCode for the given username
    // String userCode = QwandaUtils.getBaseEntityCodeForUserName($user.getUname(),tokenString);
     System.out.println("User code from Qwanda --> "+$user.getuCode());
     //Update the available fact value
       modify($user){
           //setIsProfileCompleted(QwandaUtils.isProfileCompleted($user.getuCode(), "QUE_NEW_USER_PROFILE_GRP", tokenString));
           setIsProfileCompleted( QwandaUtils.isMandatoryFieldsEntered($user.getuCode(), $user.getuCode(), "QUE_NEW_USER_PROFILE_GRP", tokenString));
        }
       System.out.println("isProfileCompleted value    ::    " +$user.getIsProfileCompleted()); 
       
        drools.setFocus("layout");  
      System.out.println( "\n" + LOG_RED + "RULE TERMINATED    ::   Check if Profile Completed   " + LOG_RESET);
      System.out.println(LOG_YELLOW + "------------------------------------------------------------------------------------------------------------------------------------------------" + LOG_RESET); 
end

rule "Send ALIAS when first login"
   salience 18
   agenda-group "UserRegistration"
    when
       bus: EventBus()
       $user: User(realm != null )
       $map : Map($value: this["token"] != null)
     then
        System.out.println(LOG_YELLOW + "================================================================================================================================================" + LOG_RESET);
        System.out.println(LOG_GREEN + "RULE EXECUTED      ::   Send ALIAS" + LOG_RESET);
        //Prepare Token & qwandaServiceUrl
        String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
        String tokenString = (String)$map.get("token");  
        //Getting the User BE and sending it as ALIAS
        //Get User BE for USER ALIAS based on the user's username
        JsonObject userObj = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_PEOPLE/linkcodes/LNK_CORE/attributes?PRI_USERNAME="+ $user.getUname(), tokenString));
        userObj.put("aliasCode", "USER"); 
        userObj.put("token", $value);      
        bus.publish("cmds", userObj);
        
        //Getting the Project BE and sending it as ALIAS
        //Get Project BaseEntity for PROJECT ALIAS based on the user's keycloak realm name
        JsonObject prjObj = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_PROJECTS/linkcodes/LNK_CORE/attributes?PRI_REALM="+$user.getRealm(), tokenString));
        prjObj.put("aliasCode", "PROJECT");   
        prjObj.put("token", $value);    
        bus.publish("cmds", prjObj);
        System.out.println("Sent Project Alias: ["+prjObj+"]");
        
        System.out.println( "\n" + LOG_RED + "RULE TERMINATED    ::   Send ALIAS" + LOG_RESET);
        System.out.println(LOG_YELLOW + "------------------------------------------------------------------------------------------------------------------------------------------------" + LOG_RESET);
end


rule "Send initial-profile-update layout for first login"
    salience 17
    agenda-group "UserRegistration"
    when
      bus: EventBus()
      $user: User(isProfileCompleted == false && realm != "memberhub")
      $map : Map($value: this["token"] != null)
      //$map1 : Map($value1: this["realm"] != null)
     then
       System.out.println(LOG_YELLOW + "================================================================================================================================================" + LOG_RESET);
       System.out.println(LOG_GREEN + "RULE EXECUTED      ::   Send Initial Profile Update Layout" + LOG_RESET);
        //Prepare Token & qwandaServiceUrl
        String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
        String tokenString = (String)$map.get("token"); 
       //Sending USER Profile Asks
       System.out.println("User uCode = "+$user.getuCode());
      JsonObject obj = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/"+$user.getuCode()+"/asks3/QUE_NEW_USER_PROFILE_GRP/"+$user.getuCode(), tokenString));
      System.out.println("*******************");
      System.out.println("Json="+obj.toString());	
      System.out.println("*******************");	
	  obj.put("token", $value);					
	  bus.publish("cmds", obj);
           
      //Get initial-profile-update sub layout
      String layout = QwandaUtils.apiGet("https://raw.githubusercontent.com/genny-project/layouts/master/layouts/initial-profile-update", null);
      QCmdMessage cmdLayout = new QCmdMessage("CMD_LAYOUT","profile-update");
      JsonObject layoutObj = new JsonObject().mapFrom(cmdLayout);
      layoutObj.put("data", new JsonObject(layout));
      layoutObj.put("token", $value);
      System.out.println("------------------------------------------------------------------------\n");
      System.out.println("PROFILE UPDATE LAYOUT   ::   "+layoutObj.toString());
      System.out.println("------------------------------------------------------------------------");
      bus.publish("cmds", layoutObj);
      
      //sending cmd form view 
      String subLayout = QwandaUtils.apiGet("https://raw.githubusercontent.com/genny-project/layouts/master/welcome-new-user", null);
      QCmdMessage cmdSublayout = new QCmdMessage("CMD_SUBLAYOUT","welcomeNewUser");
      //Convert cmd to JSON Obj
      JsonObject cmdSubLayout = new JsonObject().mapFrom(cmdSublayout);
      cmdSubLayout.put("items", new JsonObject(subLayout));
      //cmdObj.put("root", "QUE_USER_PROFILE_GRP");
      //cmdObj.put("data", "itemsPerPage:8");        
      System.out.println(" ##################### ");
      System.out.println("Sub-layout  = "+cmdSubLayout.toString()); 
      System.out.println(" #################### ");
      cmdSubLayout.put("token", $value);
      //Publish it to the EventBus
      bus.publish("cmds", cmdSubLayout);
       
       
      System.out.println("Available value after creating user     ::    " +$user.getIsAvailable());
      System.out.println("isProfileCompleted value after creating user     ::    " +$user.getIsProfileCompleted()); 
       
       System.out.println( "\n" + LOG_RED + "RULE TERMINATED    ::   Send Initial Profile Update Layout" + LOG_RESET);
       System.out.println(LOG_YELLOW + "------------------------------------------------------------------------------------------------------------------------------------------------" + LOG_RESET);
       
end


rule "Send ALIAS"
   salience 10
   agenda-group "layout"
    when
       bus: EventBus()
       //$user: User1(realm != null )
       $user: User(realm != null )
       $map : Map($value: this["token"] != null)
     then
        System.out.println(LOG_YELLOW + "================================================================================================================================================" + LOG_RESET);
        System.out.println(LOG_GREEN + "RULE EXECUTED      ::   Send ALIAS in layout group" + LOG_RESET);
        //Prepare Token & qwandaServiceUrl
        String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
        String tokenString = (String)$map.get("token");  
        //Getting the User BE and sending it as ALIAS
        //Get User BE for USER ALIAS based on the user's username
        JsonObject userObj = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_PEOPLE/linkcodes/LNK_CORE/attributes?PRI_USERNAME="+ $user.getUname(), tokenString));
        userObj.put("aliasCode", "USER"); 
        userObj.put("token", $value);      
        bus.publish("cmds", userObj);
        
        System.out.println("User realm   ::  "+$user.getRealm());
        System.out.println("User isAvailable   ::  "+$user.getIsAvailable());
        System.out.println("User isProfileCompleted   ::  "+$user.getIsProfileCompleted());
        
        //Getting the Project BE and sending it as ALIAS
        //Get Project BaseEntity for PROJECT ALIAS based on the user's keycloak realm name
        JsonObject prjObj = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_PROJECTS/linkcodes/LNK_CORE/attributes?PRI_REALM="+$user.getRealm(), tokenString));
        prjObj.put("aliasCode", "PROJECT");   
        prjObj.put("token", $value);    
        bus.publish("cmds", prjObj);
        
        System.out.println( "\n" + LOG_RED + "RULE TERMINATED    ::   Send ALIAS" + LOG_RESET);
        System.out.println(LOG_YELLOW + "------------------------------------------------------------------------------------------------------------------------------------------------" + LOG_RESET);
end

//Rules to Send layout based on the realm name
rule "Send Memberhub Layout"
   salience 9
   agenda-group "layout"
   when
        bus: EventBus()
        //$user: User(realm == "memberhub")
        $user: User(realm == "memberhub" && isAvailable == true )
        $map : Map($value: this["token"] != null)
        $map1 : Map($value1: this["realm"] != null)
   then
        System.out.println(LOG_YELLOW + "================================================================================================================================================" + LOG_RESET);
        System.out.println(LOG_GREEN + "RULE EXECUTED      ::   Memberhub Layout" + LOG_RESET);
        System.out.println(LOG_GREEN+ "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@" + LOG_RESET);
        System.out.println(LOG_GREEN+ "@@@                                                               @@@" + LOG_RESET);
        System.out.println(LOG_GREEN+ "@@@                    MEMBERHUB LAYOUT                           @@@" + LOG_RESET);
        System.out.println(LOG_GREEN+ "@@@                                                               @@@" + LOG_RESET);
        System.out.println(LOG_GREEN+ "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@" + LOG_RESET);

        // Prepare GSON Deserialization
		Gson gson = new Gson();
		GsonBuilder gsonBuilder = new GsonBuilder();
		gsonBuilder.registerTypeAdapter(LocalDateTime.class, new DateTimeDeserializer());
		gson = gsonBuilder.create();
            
         //Prepare Token & qwandaServiceUrl
        String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
        String tokenString = (String)$map.get("token");   
        System.out.println("\nToken   ::   " + StringUtils.abbreviateMiddle(tokenString,"...",40));
        //Get Memberhub Layout
        String layout = QwandaUtils.apiGet("https://raw.githubusercontent.com/genny-project/layouts/master/layouts/memberhub.json", null);

        QCmdMessage cmd = new QCmdMessage("CMD_LAYOUT","layout1");
        JsonObject layoutObj = new JsonObject().mapFrom(cmd);
        layoutObj.put("data", new JsonObject(layout));
		layoutObj.put("token", $value);
        System.out.println("------------------------------------------------------------------------\n");
        System.out.println("MEMBERHUB LAYOUT   ::   "+layoutObj.toString());
        System.out.println("------------------------------------------------------------------------");
        bus.publish("cmds", layoutObj);

		JsonObject  quesGrp = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/"+$user.getuCode()+"/asks2/QUE_MEMBERHUB_GRP/"+$user.getuCode(), tokenString));
		System.out.println("------------------------------------------------------------------------\n");
        System.out.println("MEMBERHUB QUESTIONS   ::   "+quesGrp.toString());  
        System.out.println("------------------------------------------------------------------------");
		quesGrp.put("token", $value);					
		bus.publish("cmds",  quesGrp);

        String userCode= $user.getuCode();
        String homeLoanCode = "PRD_HOME_LOAN";
        String holidayCode = "PRD_HOLIDAY";
        String linkScore= "LNK_SCORE";

        // Check if a link exists between USER & PRD_HOME_LOAN
        Boolean linkHomeLoan = QwandaUtils.checkIfLinkExistsForTarget(userCode, linkScore , homeLoanCode, tokenString );
        System.out.println("LINK EXISTS ?  ::    "+ linkHomeLoan);

        // Creating a link between USER & PRD_HOME_LOAN
        if(!linkHomeLoan){
            System.out.println("\nCREATING LINK BETWEEN          ::   " + userCode + "  &  " + homeLoanCode);
            String output = QwandaUtils.apiPostEntity(qwandaServiceUrl + "/qwanda/entityentitys", gson.toJson(new Link(userCode,homeLoanCode,linkScore)),tokenString);
        }

         // Check if a link exists between USER & PRD_HOME_LOAN
        Boolean linkHoliday = QwandaUtils.checkIfLinkExistsForTarget(userCode, linkScore , holidayCode, tokenString );
        System.out.println("LINK EXISTS ?  ::    "+ linkHoliday);

        // Creating a link between USER & PRD_HOME_LOAN
        if(!linkHoliday){
            System.out.println("\nCREATING LINK BETWEEN          ::   " + userCode + "  &  " + holidayCode);
            String output = QwandaUtils.apiPostEntity(qwandaServiceUrl + "/qwanda/entityentitys", gson.toJson(new Link(userCode,holidayCode,linkScore)),tokenString);
        }
   
        //Getting all BaseEntity and their attributes
        JsonObject homeLoan = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl +"/qwanda/baseentitys/"+$user.getuCode()+"/linkcodes/LNK_SCORE/attributes", tokenString));
        System.out.println("------------------------------------------------------------------------\n");
        System.out.println("HOMELOAN & HOLIDAY BE   ::   "+homeLoan.toString());  
        System.out.println("------------------------------------------------------------------------");
        homeLoan.put("token", $value);
        bus.publish("cmds", homeLoan);
        
         //Getting all Facebook Friends and their attributes
        JsonObject friendList = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl +"/qwanda/baseentitys/"+$user.getuCode()+"/linkcodes/LNK_FRIEND/attributes", tokenString));
        System.out.println("------------------------------------------------------------------------\n");
        System.out.println("FACEBOOK FRIEND LIST   ::   "+friendList.toString());  
        System.out.println("------------------------------------------------------------------------");
        friendList.put("token", $value);
        bus.publish("cmds", friendList);
  
        System.out.println( "\n" + LOG_RED + "RULE TERMINATED    ::   Memberhub Layout" + LOG_RESET);
        System.out.println(LOG_YELLOW + "------------------------------------------------------------------------------------------------------------------------------------------------" + LOG_RESET);
        
end


rule "Send layout1"
     salience 8
     agenda-group "layout"
     when
       bus: EventBus()
       //$user: User(realm != "memberhub" )
       $user: User(realm != "memberhub" && (isAvailable == true && isProfileCompleted == true) )
       $map : Map($value: this["token"] != null)
     then
        System.out.println(LOG_YELLOW + "================================================================================================================================================" + LOG_RESET);
        System.out.println(LOG_GREEN + "RULE EXECUTED      ::   Genny Layout" + LOG_RESET);
        System.out.println(LOG_GREEN+ "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@" + LOG_RESET);
        System.out.println(LOG_GREEN+ "@@@                                                               @@@" + LOG_RESET);
        System.out.println(LOG_GREEN+ "@@@                    GENNY LAYOUT                               @@@" + LOG_RESET);
        System.out.println(LOG_GREEN+ "@@@                                                               @@@" + LOG_RESET);
        System.out.println(LOG_GREEN+ "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@" + LOG_RESET);

         //Prepare Token & qwandaServiceUrl
        String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
        String tokenString = (String)$map.get("token");   
        System.out.println("\nToken   ::   " + StringUtils.abbreviateMiddle(tokenString,"...",40));
        //Get Genny Layout
        String layout = QwandaUtils.apiGet("https://raw.githubusercontent.com/genny-project/layouts/master/layouts/layout1.json", null);
        
        QCmdMessage cmd = new QCmdMessage("CMD_LAYOUT","layout1");
        JsonObject layoutObj = new JsonObject().mapFrom(cmd);
        layoutObj.put("msg_type", "CMD_MSG");
        layoutObj.put("cmd_type", "CMD_LAYOUT");
        layoutObj.put("code", "layout1");
        layoutObj.put("data", new JsonObject(layout));
		layoutObj.put("token", $value);
        System.out.println("------------------------------------------------------------------------\n");
        System.out.println("GENNY LAYOUT   ::   "+layoutObj.toString());
        System.out.println("------------------------------------------------------------------------");
        bus.publish("cmds", layoutObj);

        System.out.println( "\n" + LOG_RED + "RULE TERMINATED    ::   Genny Layout" + LOG_RESET);
        System.out.println(LOG_YELLOW + "------------------------------------------------------------------------------------------------------------------------------------------------" + LOG_RESET);
end

rule "Send BucketView"
    salience -1
    agenda-group "layout"
    when
       bus:EventBus()
       //$user: User(realm != "memberhub" )
       $user: User(realm != "memberhub" && (isAvailable == true && isProfileCompleted == true) )
       $map : Map($value: this["token"] != null)
    then
        System.out.println(LOG_YELLOW + "================================================================================================================================================" + LOG_RESET);
        System.out.println(LOG_GREEN + "RULE EXECUTED      ::   Send BucketView" + LOG_RESET);
       
       //Prepare Token & qwandaServiceUrl
        String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
        String tokenString = (String)$map.get("token");   

        System.out.println("\nToken   ::   " + StringUtils.abbreviateMiddle(tokenString,"...",40));
        System.out.println("Project Name   ::   " + $user.getRealm() );
         System.out.println("------------------------------------------------------------------------");

        // System.out.println("Sending Bucket View for project: "+$user.getRealm()); 

        //For the links and their weight
        JsonObject grpLinks = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_DASHBOARD/linkcodes/LNK_CORE/attributes", tokenString));
        //Getting B.E. to display in Bucket View
        JsonObject headerGrps = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_DRIVER_VIEW/linkcodes/LNK_CORE/attributes", tokenString));	
        JsonObject noQuotesBEG = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_NEW_ITEMS/linkcodes/LNK_CORE/attributes", tokenString));
        JsonObject approvedBEG = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_APPROVED/linkcodes/LNK_CORE/attributes", tokenString));
        JsonObject inTransitBEG = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_IN_TRANSIT/linkcodes/LNK_CORE/attributes", tokenString));
        JsonObject completedBEG = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_COMPLETED/linkcodes/LNK_CORE/attributes", tokenString));
        JsonObject paidBEG = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_PAID/linkcodes/LNK_CORE/attributes", tokenString));  
        //Getting Load data for each BEG's
        JsonObject noQuotes = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/BEG_0000001/linkcodes/LNK_BEG/attributes", tokenString));
        JsonObject quotes1 = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/BEG_0000002/linkcodes/LNK_BEG/attributes", tokenString));
        JsonObject quotes2 = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/BEG_0000003/linkcodes/LNK_BEG/attributes", tokenString)); 
        JsonObject approved = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/BEG_0000004/linkcodes/LNK_BEG/attributes", tokenString));
        JsonObject inTransit = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/BEG_0000005/linkcodes/LNK_BEG/attributes", tokenString)); 
		
	//	JsonArray beg4items = approved.getJsonArray("items");
	//	JsonArray beg4 = beg4items.getJsonArray(0);
	//	JsonArray ees = beg4.getJsonArray(0);
	//	JsonObject link = ees.getJsonObject(0).getJsonObject("link");
	//	link.put("parentColor","#FDE1EA");
	//	link.put("childColor","#FDE1EA"); // keys and indexes to be checked ADAM
		
		grpLinks.put("token", $value);
		headerGrps.put("token", $value);
		noQuotesBEG.put("token", $value);
		approvedBEG.put("token", $value);
		inTransitBEG.put("token", $value);
		completedBEG.put("token", $value);
		paidBEG.put("token", $value);
		noQuotes.put("token", $value);
		quotes1.put("token", $value);
		quotes2.put("token", $value);
		inTransit.put("token", $value);
		approved.put("token",$value);
		
        //Publish GRP_DASHBOARD
        bus.publish("cmds", grpLinks);	
        //Publish Header Grp
        bus.publish("cmds", headerGrps);	
        //Publish noQuotes BEG
        bus.publish("cmds", noQuotesBEG);
        //Publish Approved BEG
        bus.publish("cmds", approvedBEG);
        //Publish In Transit BEG
        bus.publish("cmds", inTransitBEG);
        //Publish Completed BEG
        bus.publish("cmds", completedBEG);
        //Publish Paiod BEG
        bus.publish("cmds", paidBEG);

        //Publish noQuotes load            
        bus.publish("cmds", noQuotes);
        //Publish Quotes load
        bus.publish("cmds", quotes1);
        //Publish Quotes load
        bus.publish("cmds", quotes2);
        //Publish approved loads  
        bus.publish("cmds", approved);
        //Publish In-Transit loads 
        bus.publish("cmds", inTransit);
        
        //Get Sub-Layout 
        String subLayout = QwandaUtils.apiGet("https://raw.githubusercontent.com/genny-project/layouts/master/card.json", null);    
       //Creating subLayout DATA_MSG
        JsonObject subLayoutObj = new JsonObject();
        subLayoutObj.put("msg_type", "DATA_MSG");
        subLayoutObj.put("data_type", "SUB_LAYOUT");
        subLayoutObj.put("code", "cardLayout");
        subLayoutObj.put("items", new JsonObject(subLayout));      
		subLayoutObj.put("token", $value);
		
        System.out.println("------------------------------------------------------------------------\n");
        System.out.println("SUBLAYOUT DATA   ::   " + subLayoutObj.toString()); 
        System.out.println("------------------------------------------------------------------------");
        bus.publish("cmds", subLayoutObj); 
        
        //Get Sub-Layout 
        String subLayoutList = QwandaUtils.apiGet("https://raw.githubusercontent.com/genny-project/layouts/master/list_item.json", null);    
        
        //Creating subLayout DATA_MSG
        JsonObject subLayoutListObj = new JsonObject();
        subLayoutListObj.put("msg_type", "DATA_MSG");
        subLayoutListObj.put("data_type", "SUB_LAYOUT");
        subLayoutListObj.put("code", "listLayout");
        subLayoutListObj.put("items", new JsonObject(subLayoutList));      
		subLayoutListObj.put("token", $value);
		
        System.out.println("------------------------------------------------------------------------\n");
        System.out.println("LIST SUBLAYOUT DATA   ::   " + subLayoutListObj.toString()); 
        System.out.println("------------------------------------------------------------------------");
        bus.publish("cmds", subLayoutListObj);
        

        //sending cmd BUCKET_VIEW
        QCmdMessage cmdBucketView = new QCmdMessage("CMD_VIEW","BUCKET_VIEW");
        JsonObject bucketViewJson = new JsonObject().mapFrom(cmdBucketView);
        bucketViewJson.put("root", "GRP_DRIVER_VIEW");
        
		bucketViewJson.put("token", $value);
        System.out.println("BUCKETVIEW DATA   ::    "+bucketViewJson.toString()); 
        bus.publish("cmds", bucketViewJson); 

        System.out.println( "\n" + LOG_RED + "RULE TERMINATED    ::   Send BucketView" + LOG_RESET);
        System.out.println(LOG_YELLOW + "------------------------------------------------------------------------------------------------------------------------------------------------" + LOG_RESET);
end

rule "NewUser Profile Submit"
    when
      $m : QEventMessage( event_type == "FORM_SUBMIT" && data.code == "QUE_NEW_USER_PROFILE_GRP" )
      bus: EventBus()
      //$user: User1(realm != null)
      $user: User(realm != null)
      $map : Map($value: this["token"] != null)    
     then
      System.out.println(LOG_YELLOW + "================================================================================================================================================" + LOG_RESET);
      System.out.println(LOG_GREEN + "RULE EXECUTED      ::   NewUser Profile Submit " + LOG_RESET);
      //Prepare Token & qwandaServiceUrl
      String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
      String tokenString = (String)$map.get("token"); 
      //String userCode = QwandaUtils.getBaseEntityCodeForUserName($user.getUname(),tokenString) ;
      //Update the profileCompleted user fact value
       modify($user){
           //setIsProfileCompleted(QwandaUtils.isProfileCompleted($user.getuCode(), "QUE_NEW_USER_PROFILE_GRP", tokenString));
           setIsProfileCompleted(QwandaUtils.isMandatoryFieldsEntered($user.getuCode(), $user.getuCode(), "QUE_NEW_USER_PROFILE_GRP", tokenString));
        }
      System.out.println("The user available value now is   ::    " + $user.getIsAvailable());    
      System.out.println("The profile completed value now is   ::    " + $user.getIsProfileCompleted());
      //Calling the rule group : layout
      drools.setFocus("layout"); 
      System.out.println( "\n" + LOG_RED + "RULE TERMINATED    ::   NewUser Profile Submit " + LOG_RESET);
      System.out.println(LOG_YELLOW + "------------------------------------------------------------------------------------------------------------------------------------------------" + LOG_RESET); 
end

