package com.sample;

import org.apache.commons.lang3.StringUtils;

import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QMessage.MessageData;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import io.vertx.rxjava.core.eventbus.EventBus;
import io.vertx.core.buffer.Buffer;
import com.google.gson.Gson;
import life.genny.qwanda.Answer;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwandautils.KeycloakUtils;
import life.genny.qwandautils.QwandaUtils;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.Ask;
import life.genny.qwanda.entity.BaseEntity;

import java.lang.reflect.Type;
import java.util.Map;
import java.util.Set;
import java.time.LocalDateTime;
import java.time.ZonedDateTime;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializationContext;
import com.google.gson.FieldNamingPolicy;
import io.vertx.core.json.JsonObject;
import io.vertx.core.json.JsonArray;
import java.time.format.DateTimeFormatter;
import life.genny.qwanda.DateTimeDeserializer;
import life.genny.qwanda.entity.User;
import life.genny.qwanda.Link;


//Rules to Send layout based on the realm name
rule "Send Memberhub Layout"
   salience 9
   agenda-group "layout"
   when
        bus: EventBus()
        //$user: User(realm == "memberhub")
        $user: User(realm == "memberhub" && isAvailable == true )
        $map : Map($value: this["token"] != null)
        $map1 : Map($value1: this["realm"] != null)
   then
        System.out.println(LOG_YELLOW + "================================================================================================================================================" + LOG_RESET);
        System.out.println(LOG_GREEN + "RULE EXECUTED      ::   Memberhub Layout" + LOG_RESET);
        System.out.println(LOG_GREEN+ "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@" + LOG_RESET);
        System.out.println(LOG_GREEN+ "@@@                                                               @@@" + LOG_RESET);
        System.out.println(LOG_GREEN+ "@@@                    MEMBERHUB LAYOUT                           @@@" + LOG_RESET);
        System.out.println(LOG_GREEN+ "@@@                                                               @@@" + LOG_RESET);
        System.out.println(LOG_GREEN+ "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@" + LOG_RESET);

        // Prepare GSON Deserialization
		Gson gson = new Gson();
		GsonBuilder gsonBuilder = new GsonBuilder();
		gsonBuilder.registerTypeAdapter(LocalDateTime.class, new DateTimeDeserializer());
		gson = gsonBuilder.create();
            
         //Prepare Token & qwandaServiceUrl
        String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
        String tokenString = (String)$map.get("token");   
        System.out.println("\nToken   ::   " + StringUtils.abbreviateMiddle(tokenString,"...",40));
        //Get Memberhub Layout
        String layout = QwandaUtils.apiGet("https://raw.githubusercontent.com/genny-project/layouts/master/layouts/memberhub.json", null);

        QCmdMessage cmd = new QCmdMessage("CMD_LAYOUT","layout1");
        JsonObject layoutObj = new JsonObject().mapFrom(cmd);
        layoutObj.put("data", new JsonObject(layout));
		layoutObj.put("token", $value);
        System.out.println("------------------------------------------------------------------------\n");
        System.out.println("MEMBERHUB LAYOUT   ::   "+layoutObj.toString());
        System.out.println("------------------------------------------------------------------------");
        bus.publish("cmds", layoutObj);

		JsonObject  quesGrp = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/"+$user.getuCode()+"/asks2/QUE_MEMBERHUB_GRP/"+$user.getuCode(), tokenString));
		System.out.println("------------------------------------------------------------------------\n");
        System.out.println("MEMBERHUB QUESTIONS   ::   "+quesGrp.toString());  
        System.out.println("------------------------------------------------------------------------");
		quesGrp.put("token", $value);					
		bus.publish("cmds",  quesGrp);

        String userCode= $user.getuCode();
        String homeLoanCode = "PRD_HOME_LOAN";
        String holidayCode = "PRD_HOLIDAY";
        String linkScore= "LNK_SCORE";

        // Check if a link exists between USER & PRD_HOME_LOAN
        Boolean linkHomeLoan = QwandaUtils.checkIfLinkExistsForTarget(userCode, linkScore , homeLoanCode, tokenString );
        System.out.println("LINK EXISTS ?  ::    "+ linkHomeLoan);

        // Creating a link between USER & PRD_HOME_LOAN
        if(!linkHomeLoan){
            System.out.println("\nCREATING LINK BETWEEN          ::   " + userCode + "  &  " + homeLoanCode);
            String output = QwandaUtils.apiPostEntity(qwandaServiceUrl + "/qwanda/entityentitys", gson.toJson(new Link(userCode,homeLoanCode,linkScore)),tokenString);
        }

         // Check if a link exists between USER & PRD_HOME_LOAN
        Boolean linkHoliday = QwandaUtils.checkIfLinkExistsForTarget(userCode, linkScore , holidayCode, tokenString );
        System.out.println("LINK EXISTS ?  ::    "+ linkHoliday);

        // Creating a link between USER & PRD_HOME_LOAN
        if(!linkHoliday){
            System.out.println("\nCREATING LINK BETWEEN          ::   " + userCode + "  &  " + holidayCode);
            String output = QwandaUtils.apiPostEntity(qwandaServiceUrl + "/qwanda/entityentitys", gson.toJson(new Link(userCode,holidayCode,linkScore)),tokenString);
        }
   
        //Getting all BaseEntity and their attributes
        JsonObject homeLoan = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl +"/qwanda/baseentitys/"+$user.getuCode()+"/linkcodes/LNK_SCORE/attributes", tokenString));
        System.out.println("------------------------------------------------------------------------\n");
        System.out.println("HOMELOAN & HOLIDAY BE   ::   "+homeLoan.toString());  
        System.out.println("------------------------------------------------------------------------");
        homeLoan.put("token", $value);
        bus.publish("cmds", homeLoan);
        
         //Getting all Facebook Friends and their attributes
        JsonObject friendList = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl +"/qwanda/baseentitys/"+$user.getuCode()+"/linkcodes/LNK_FRIEND/attributes", tokenString));
        System.out.println("------------------------------------------------------------------------\n");
        System.out.println("FACEBOOK FRIEND LIST   ::   "+friendList.toString());  
        System.out.println("------------------------------------------------------------------------");
        friendList.put("token", $value);
        bus.publish("cmds", friendList);
  
        System.out.println( "\n" + LOG_RED + "RULE TERMINATED    ::   Memberhub Layout" + LOG_RESET);
        System.out.println(LOG_YELLOW + "------------------------------------------------------------------------------------------------------------------------------------------------" + LOG_RESET);
        
end


rule "Send layout1"
     salience 8
     agenda-group "layout"
     when
       bus: EventBus()
       //$user: User(realm != "memberhub" )
       $user: User(realm != "memberhub" && (isAvailable == true && isProfileCompleted == true) )
       $map : Map($value: this["token"] != null)
     then
        System.out.println(LOG_YELLOW + "================================================================================================================================================" + LOG_RESET);
        System.out.println(LOG_GREEN + "RULE EXECUTED      ::   Genny Layout" + LOG_RESET);
        System.out.println(LOG_GREEN+ "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@" + LOG_RESET);
        System.out.println(LOG_GREEN+ "@@@                                                               @@@" + LOG_RESET);
        System.out.println(LOG_GREEN+ "@@@                    GENNY LAYOUT                               @@@" + LOG_RESET);
        System.out.println(LOG_GREEN+ "@@@                                                               @@@" + LOG_RESET);
        System.out.println(LOG_GREEN+ "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@" + LOG_RESET);

         //Prepare Token & qwandaServiceUrl
        String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
        String tokenString = (String)$map.get("token");   
        System.out.println("\nToken   ::   " + StringUtils.abbreviateMiddle(tokenString,"...",40));
        //Get Genny Layout
        String layout = QwandaUtils.apiGet("https://raw.githubusercontent.com/genny-project/layouts/master/layouts/layout1.json", null);
        
        QCmdMessage cmd = new QCmdMessage("CMD_LAYOUT","layout1");
        JsonObject layoutObj = new JsonObject().mapFrom(cmd);
        layoutObj.put("msg_type", "CMD_MSG");
        layoutObj.put("cmd_type", "CMD_LAYOUT");
        layoutObj.put("code", "layout1");
        layoutObj.put("data", new JsonObject(layout));
		layoutObj.put("token", $value);
        System.out.println("------------------------------------------------------------------------\n");
        System.out.println("GENNY LAYOUT   ::   "+layoutObj.toString());
        System.out.println("------------------------------------------------------------------------");
        bus.publish("cmds", layoutObj);

        System.out.println( "\n" + LOG_RED + "RULE TERMINATED    ::   Genny Layout" + LOG_RESET);
        System.out.println(LOG_YELLOW + "------------------------------------------------------------------------------------------------------------------------------------------------" + LOG_RESET);
end

rule "Send BucketView"
    salience -1
    agenda-group "layout"
    when
       bus:EventBus()
       //$user: User(realm != "memberhub" )
       $user: User(realm != "memberhub" && (isAvailable == true && isProfileCompleted == true) )
       $map : Map($value: this["token"] != null)
    then
        System.out.println(LOG_YELLOW + "================================================================================================================================================" + LOG_RESET);
        System.out.println(LOG_GREEN + "RULE EXECUTED      ::   Send BucketView" + LOG_RESET);
       
       //Prepare Token & qwandaServiceUrl
        String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
        String tokenString = (String)$map.get("token");   

        System.out.println("\nToken   ::   " + StringUtils.abbreviateMiddle(tokenString,"...",40));
        System.out.println("Project Name   ::   " + $user.getRealm() );
         System.out.println("------------------------------------------------------------------------");

        // System.out.println("Sending Bucket View for project: "+$user.getRealm()); 

        //For the links and their weight
        JsonObject grpLinks = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_DASHBOARD/linkcodes/LNK_CORE/attributes", tokenString));
        //Getting B.E. to display in Bucket View
        JsonObject headerGrps = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_DRIVER_VIEW/linkcodes/LNK_CORE/attributes", tokenString));	
        JsonObject noQuotesBEG = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_NEW_ITEMS/linkcodes/LNK_CORE/attributes", tokenString));
        JsonObject approvedBEG = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_APPROVED/linkcodes/LNK_CORE/attributes", tokenString));
        JsonObject inTransitBEG = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_IN_TRANSIT/linkcodes/LNK_CORE/attributes", tokenString));
        JsonObject completedBEG = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_COMPLETED/linkcodes/LNK_CORE/attributes", tokenString));
        JsonObject paidBEG = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_PAID/linkcodes/LNK_CORE/attributes", tokenString));  
        //Getting Load data for each BEG's
        JsonObject noQuotes = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/BEG_0000001/linkcodes/LNK_BEG/attributes", tokenString));
        JsonObject quotes1 = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/BEG_0000002/linkcodes/LNK_BEG/attributes", tokenString));
        JsonObject quotes2 = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/BEG_0000003/linkcodes/LNK_BEG/attributes", tokenString)); 
        JsonObject approved = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/BEG_0000004/linkcodes/LNK_BEG/attributes", tokenString));
        JsonObject inTransit = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/BEG_0000005/linkcodes/LNK_BEG/attributes", tokenString)); 
		
	//	JsonArray beg4items = approved.getJsonArray("items");
	//	JsonArray beg4 = beg4items.getJsonArray(0);
	//	JsonArray ees = beg4.getJsonArray(0);
	//	JsonObject link = ees.getJsonObject(0).getJsonObject("link");
	//	link.put("parentColor","#FDE1EA");
	//	link.put("childColor","#FDE1EA"); // keys and indexes to be checked ADAM
		
		grpLinks.put("token", $value);
		headerGrps.put("token", $value);
		noQuotesBEG.put("token", $value);
		approvedBEG.put("token", $value);
		inTransitBEG.put("token", $value);
		completedBEG.put("token", $value);
		paidBEG.put("token", $value);
		noQuotes.put("token", $value);
		quotes1.put("token", $value);
		quotes2.put("token", $value);
		inTransit.put("token", $value);
		approved.put("token",$value);
		
        //Publish GRP_DASHBOARD
        bus.publish("cmds", grpLinks);	
        //Publish Header Grp
        bus.publish("cmds", headerGrps);	
        //Publish noQuotes BEG
        bus.publish("cmds", noQuotesBEG);
        //Publish Approved BEG
        bus.publish("cmds", approvedBEG);
        //Publish In Transit BEG
        bus.publish("cmds", inTransitBEG);
        //Publish Completed BEG
        bus.publish("cmds", completedBEG);
        //Publish Paiod BEG
        bus.publish("cmds", paidBEG);

        //Publish noQuotes load            
        bus.publish("cmds", noQuotes);
        //Publish Quotes load
        bus.publish("cmds", quotes1);
        //Publish Quotes load
        bus.publish("cmds", quotes2);
        //Publish approved loads  
        bus.publish("cmds", approved);
        //Publish In-Transit loads 
        bus.publish("cmds", inTransit);
        
        //Get Sub-Layout 
        String subLayout = QwandaUtils.apiGet("https://raw.githubusercontent.com/genny-project/layouts/master/card.json", null);    
       //Creating subLayout DATA_MSG
        JsonObject subLayoutObj = new JsonObject();
        subLayoutObj.put("msg_type", "DATA_MSG");
        subLayoutObj.put("data_type", "SUB_LAYOUT");
        subLayoutObj.put("code", "cardLayout");
        subLayoutObj.put("items", new JsonObject(subLayout));      
		subLayoutObj.put("token", $value);
		
        System.out.println("------------------------------------------------------------------------\n");
        System.out.println("SUBLAYOUT DATA   ::   " + subLayoutObj.toString()); 
        System.out.println("------------------------------------------------------------------------");
        bus.publish("cmds", subLayoutObj); 
        
        //Get Sub-Layout 
        String subLayoutList = QwandaUtils.apiGet("https://raw.githubusercontent.com/genny-project/layouts/master/list_item.json", null);    
        
        //Creating subLayout DATA_MSG
        JsonObject subLayoutListObj = new JsonObject();
        subLayoutListObj.put("msg_type", "DATA_MSG");
        subLayoutListObj.put("data_type", "SUB_LAYOUT");
        subLayoutListObj.put("code", "listLayout");
        subLayoutListObj.put("items", new JsonObject(subLayoutList));      
		subLayoutListObj.put("token", $value);
		
        System.out.println("------------------------------------------------------------------------\n");
        System.out.println("LIST SUBLAYOUT DATA   ::   " + subLayoutListObj.toString()); 
        System.out.println("------------------------------------------------------------------------");
        bus.publish("cmds", subLayoutListObj);
        

        //sending cmd BUCKET_VIEW
        QCmdMessage cmdBucketView = new QCmdMessage("CMD_VIEW","BUCKET_VIEW");
        JsonObject bucketViewJson = new JsonObject().mapFrom(cmdBucketView);
        bucketViewJson.put("root", "GRP_DRIVER_VIEW");
        
		bucketViewJson.put("token", $value);
        System.out.println("BUCKETVIEW DATA   ::    "+bucketViewJson.toString()); 
        bus.publish("cmds", bucketViewJson); 

        System.out.println( "\n" + LOG_RED + "RULE TERMINATED    ::   Send BucketView" + LOG_RESET);
        System.out.println(LOG_YELLOW + "------------------------------------------------------------------------------------------------------------------------------------------------" + LOG_RESET);
end

rule "NewUser Profile Submit"
    when
      $m : QEventMessage( event_type == "FORM_SUBMIT" && data.code == "QUE_NEW_USER_PROFILE_GRP" )
      bus: EventBus()
      //$user: User1(realm != null)
      $user: User(realm != null)
      $map : Map($value: this["token"] != null)    
     then
      System.out.println(LOG_YELLOW + "================================================================================================================================================" + LOG_RESET);
      System.out.println(LOG_GREEN + "RULE EXECUTED      ::   NewUser Profile Submit " + LOG_RESET);
      //Prepare Token & qwandaServiceUrl
      String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
      String tokenString = (String)$map.get("token"); 
      //String userCode = QwandaUtils.getBaseEntityCodeForUserName($user.getUname(),tokenString) ;
      //Update the profileCompleted user fact value
       modify($user){
           //setIsProfileCompleted(QwandaUtils.isProfileCompleted($user.getuCode(), "QUE_NEW_USER_PROFILE_GRP", tokenString));
           setIsProfileCompleted(QwandaUtils.isMandatoryFieldsEntered($user.getuCode(), $user.getuCode(), "QUE_NEW_USER_PROFILE_GRP", tokenString));
        }
      System.out.println("The user available value now is   ::    " + $user.getIsAvailable());    
      System.out.println("The profile completed value now is   ::    " + $user.getIsProfileCompleted());
      //Calling the rule group : layout
      drools.setFocus("layout"); 
      System.out.println( "\n" + LOG_RED + "RULE TERMINATED    ::   NewUser Profile Submit " + LOG_RESET);
      System.out.println(LOG_YELLOW + "------------------------------------------------------------------------------------------------------------------------------------------------" + LOG_RESET); 
end

