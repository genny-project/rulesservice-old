package life.genny.rules;

import life.genny.rules.RulesUtils;
import life.genny.rules.QRules;
import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.entity.EntityEntity;
import org.apache.commons.lang3.StringUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwandautils.QwandaUtils;
import life.genny.rules.RulesUtils;
import life.genny.qwanda.entity.User;
import life.genny.qwanda.Link;
import life.genny.qwanda.entity.BaseEntity;

import java.lang.reflect.Type;
import java.util.Map;
import com.google.gson.Gson;
import java.time.LocalDateTime;
import java.time.ZonedDateTime;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializationContext;
import com.google.gson.FieldNamingPolicy;
import io.vertx.core.json.JsonObject;
import io.vertx.core.json.JsonArray;
import java.time.format.DateTimeFormatter;
import life.genny.qwanda.DateTimeDeserializer;


/*   Rule for Add Load button click   */
rule "Add new Load"
   when
     $m : QEventMessage( event_type == "BTN_CLICK" && data.value == "ADD_NEW_LOAD" )
     rules: QRules()
   then
    RulesUtils.header(drools.getRule().getName());
     
    String qwandaServiceUrl = rules.getQwandaServiceUrl();
   /*    Get user code from the username   */
     String userName = rules.getAsString("preferred_username");   
     System.out.println("The user name is  ::  " +userName);
     String userCode =  QwandaUtils.getBaseEntityCodeForUserName(userName, rules.getToken());
     System.out.println("The user Code is  ::  " +userCode);
   /*   Prepare GSON Deserialization   */
     GsonBuilder gsonBuilder = new GsonBuilder();
     gsonBuilder.registerTypeAdapter(LocalDateTime.class, new DateTimeDeserializer());
     Gson gson = gsonBuilder.create();
     
    /*      Getting list of loads      */
     JsonObject loadLists = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_LOADS/linkcodes/LNK_CPY_COMPANY1/attributes", rules.getToken()));
     loadLists.put("token", rules.getToken());
     System.out.println("List of Load Json: "+loadLists.toString());
     rules.getEventBus().publish("cmds",loadLists);
     System.out.println("The user name is  ::  " +userName);
     
    /*     Creating new base-entity BEG for Posting new Job      */
     BaseEntity beg = QwandaUtils.createBaseEntityByCode(QwandaUtils.getUniqueId(userCode, null, "BEG", rules.getToken()), "Base Entity Group", qwandaServiceUrl, rules.getToken());
     String jobCode = beg.getCode();
     System.out.println("BaseEntity BEG created is   ::  "+beg.toString());
     System.out.println("The BEG code is   ::  "+jobCode);
    /*       link newly created Job to DRAFT - GRP_DRAFT_JOBS    */
     Link newJobLink =  QwandaUtils.createLink("GRP_DRAFTS", jobCode, "LNK_CORE", null, (double) 1, rules.getToken());
    /*  Creating new base-entity LOAD    */
     BaseEntity load = QwandaUtils.createBaseEntityByCode(QwandaUtils.getUniqueId(userCode, null, "LOD", rules.getToken()), "LOAD", qwandaServiceUrl, rules.getToken());
     String loadCode = load.getCode();
     
    /*  Add author to the load    */
      Answer loadAuthorAns = new Answer(rules.getUser().getCode(),loadCode, "PRI_AUTHOR", rules.getUser().getCode() );      	  
    /* convert answer to json */
	 String jsonAnswer = gson.toJson(loadAuthorAns);	     
    /* post answers to qwanda-utils */
	  QwandaUtils.apiPostEntity(qwandaServiceUrl+"/qwanda/answers",jsonAnswer, rules.getToken());
     
    /*  link newly created LOAD to JOB/BEG    */
     Link jobLoadLink =  QwandaUtils.createLink(jobCode, loadCode, "LNK_BEG", "LOAD", (double) 1, rules.getToken());
    /*    Getting Post Load Question GRP        */
     JsonObject qPostLoad = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/"+userCode+"/asks3/QUE_LOAD_DETAILS_GRP/"+loadCode, rules.getToken()));
     qPostLoad.put("root", "QUE_LOAD_DETAILS_GRP");
     qPostLoad.put("aliasCode", $m.data.getCode());
     qPostLoad.put("token", rules.getToken());
     System.out.println("QName Json: "+qPostLoad.toString());
     rules.getEventBus().publish("cmds",qPostLoad);
     
     JsonObject qPostJob = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/"+userCode+"/asks3/QUE_JOB_DETAILS_GRP/"+jobCode, rules.getToken()));
     qPostJob.put("root", "QUE_JOB_DETAILS_GRP");
     qPostJob.put("token", rules.getToken());
     System.out.println("QName Json: "+qPostJob.toString());
     rules.getEventBus().publish("cmds",qPostJob);

    /*    Sending cmd SUBLAYOUT_CHANGE      */
     QCmdMessage cmdJobSublayout = new QCmdMessage("CMD_SUBLAYOUT","JobLayout");
     JsonObject cmdJobSublayoutJson = new JsonObject().mapFrom(cmdJobSublayout);     
     String createJobLayout = RulesUtils.getLayout("create_job.json");
       cmdJobSublayoutJson.put("items",createJobLayout);
       cmdJobSublayoutJson.put("token", rules.getToken());
      QwandaUtils.jsonLogger("SubLayout Data",cmdJobSublayoutJson);

    /*  Publish it to the EventBus   */
      rules.getEventBus().publish("cmds", cmdJobSublayoutJson); 
       
	RulesUtils.footer(drools.getRule().getName());
  
end
