package com.sample;

import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QEventLinkChangeMessage;
import life.genny.qwanda.message.QCmdGeofenceMessage;
import life.genny.qwanda.message.QMSGMessage;
import life.genny.qwanda.message.QBaseMSGMessageType;
import life.genny.qwanda.entity.EntityEntity;
import org.apache.commons.lang3.StringUtils;
import io.vertx.rxjava.core.eventbus.EventBus;
import io.vertx.core.buffer.Buffer;
import com.google.gson.Gson;
import life.genny.qwanda.Answer;
import life.genny.qwanda.GPS;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwandautils.KeycloakUtils;
import life.genny.qwandautils.QwandaUtils;
import life.genny.qwandautils.GPSUtils;
import life.genny.qwandautils.RulesUtils;
import life.genny.qwanda.entity.User;
import life.genny.qwanda.Link;
import life.genny.qwanda.entity.BaseEntity;

import java.lang.reflect.Type;
import java.util.Map;
import java.time.LocalDateTime;
import java.time.ZonedDateTime;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializationContext;
import com.google.gson.FieldNamingPolicy;
import io.vertx.core.json.JsonObject;
import io.vertx.core.json.JsonArray;
import java.time.format.DateTimeFormatter;
import life.genny.qwanda.DateTimeDeserializer;


/*   Rule for Add icon click   */
rule "Add new JOB"
   when
     $m : QEventMessage( event_type == "BTN_CLICK" && data.value == "ADD_NEW_LOAD" )
     bus: EventBus()
     $user: User(realm != null )
     $tokenMap : Map($token: this["token"] != null)
     $decodedTokenMap : Map($value1: this["realm"] != null)
   then
     System.out.println(RulesUtils.headerRuleLogger("Add New Job"));
     /*     Prepare GSON Deserialization     */
     GsonBuilder gsonBuilder = new GsonBuilder();
     gsonBuilder.registerTypeAdapter(LocalDateTime.class, new DateTimeDeserializer());
     Gson gson = gsonBuilder.create();
     String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
     String tokenString = (String)$tokenMap.get("token");
     String userName = (String)$decodedTokenMap.get("preferred_username");
     System.out.println("The user name is  ::  " +userName);
     /*      Getting list of loads      */
     JsonObject loadLists = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_LOADS/linkcodes/LNK_CPY_COMPANY1/attributes", tokenString));
     loadLists.put("token", $token);
     System.out.println("List of Load Json: "+loadLists.toString());
     bus.publish("cmds",loadLists);
     System.out.println("The user name is  ::  " +userName);
     
     String userCode =  QwandaUtils.getBaseEntityCodeForUserName(userName, tokenString);
     System.out.println("The user Code is  ::  " +userCode);
     
     /*     Creating new base-entity BEG for Posting new Job      */
     BaseEntity beg = QwandaUtils.createBaseEntityByCode(QwandaUtils.getUniqueId(userCode, null, "BEG", tokenString), "Base Entity Group", qwandaServiceUrl, tokenString);
     String jobCode = beg.getCode();
     System.out.println("BaseEntity BEG created is   ::  "+beg.toString());
     System.out.println("The BEG code is   ::  "+jobCode);
     /*       link newly created Job to DRAFT - GRP_DRAFT_JOBS    */
     QwandaUtils.apiPostEntity(qwandaServiceUrl + "/qwanda/entityentitys", gson.toJson(new Link("GRP_DRAFTS",jobCode,"LNK_CORE")),tokenString);
     /*  Creating new base-entity LOAD    */
     BaseEntity load = QwandaUtils.createBaseEntityByCode(QwandaUtils.getUniqueId(userCode, null, "LOD", tokenString), "LOAD", qwandaServiceUrl, tokenString);
     String loadCode = load.getCode();
     /*          Getting Post Load Question GRP        */
     JsonObject qPostLoad = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/"+userCode+"/asks3/QUE_LOAD_DETAILS_GRP/"+loadCode, tokenString));
     qPostLoad.put("root", "QUE_LOAD_DETAILS_GRP");
     qPostLoad.put("aliasCode", $m.data.getCode());
     qPostLoad.put("token", tokenString);
     System.out.println("QName Json: "+qPostLoad.toString());
     bus.publish("cmds",qPostLoad);
     
     JsonObject qPostJob = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/"+userCode+"/asks3/QUE_JOB_DETAILS_GRP/"+jobCode, tokenString));
     qPostJob.put("root", "QUE_JOB_DETAILS_GRP");
     qPostJob.put("token", tokenString);
     System.out.println("QName Json: "+qPostJob.toString());
     bus.publish("cmds",qPostJob);

     /*     Sending cmd SUBLAYOUT_CHANGE      */
     QCmdMessage cmdJobSublayout = new QCmdMessage("CMD_SUBLAYOUT","JobLayout");
     JsonObject cmdJobSublayoutJson = new JsonObject().mapFrom(cmdJobSublayout);     
     String createJobLayout = QwandaUtils.apiGet("https://raw.githubusercontent.com/genny-project/layouts/master/create_job.json", null);
       cmdJobSublayoutJson.put("items",new JsonObject(createJobLayout));
       cmdJobSublayoutJson.put("token", tokenString);
    System.out.println(QwandaUtils.jsonLogger("SubLayout Data",cmdJobSublayoutJson));
      /*  Publish it to the EventBus   */
      bus.publish("cmds", cmdJobSublayoutJson); 
       
    System.out.println(RulesUtils.terminateRuleLogger("Add New Load"));
end
