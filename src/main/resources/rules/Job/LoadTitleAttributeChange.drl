package life.genny.rules;

import life.genny.rules.RulesUtils;
import life.genny.rules.QRules;

import life.genny.qwanda.Answer;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwanda.message.QEventAttributeValueChangeMessage;
import life.genny.qwandautils.QwandaUtils;
import life.genny.qwandautils.MergeUtil;

import java.util.Map;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializationContext;
import com.google.gson.FieldNamingPolicy;
import io.vertx.core.json.JsonObject;
import io.vertx.core.json.JsonArray;
import java.time.format.DateTimeFormatter;
import life.genny.qwanda.DateTimeDeserializer;
import java.time.LocalDateTime;

rule "Create Load :: Update Jobs Title based on Load's value change"
    when
    $m: QEventAttributeValueChangeMessage( event_type == "EVT_ATTRIBUTE_VALUE_CHANGE" && QEventAttributeValueChangeMessage.getData().getCode().equals("PRI_NAME") )
    	rules : QRules()
    then    
	    RulesUtils.header(drools.getRule().getName());
	    
	   /*  Prepare Token & qwandaServiceUrl    */
         String qwandaServiceUrl = rules.getQwandaServiceUrl();
         String tokenString = rules.getToken();
         
       /* Prepare GSON Deserialization */
        GsonBuilder gsonBuilder = new GsonBuilder();
        gsonBuilder.registerTypeAdapter(LocalDateTime.class, new DateTimeDeserializer());
        Gson gson = gsonBuilder.create();
        
       /*  Get Username and userCode    */
         String userName = rules.getAsString("preferred_username");   
         System.out.println("The user name is  ::  " +userName);
         String userCode =  QwandaUtils.getBaseEntityCodeForUserName(userName, rules.getToken());
         System.out.println("The user Code is  ::  " +userCode);
         System.out.println("Print QEventAttributeValueChangeMessage ::  "+$m.toString());
         
       /*     Collect load code from answer    */
         Answer newAnswer = $m.getAnswer();
         System.out.println("The created value  ::  "+newAnswer.getCreatedDate());
         System.out.println("Answer from QEventAttributeValueChangeMessage  ::  "+newAnswer.toString());
         String targetCode = newAnswer.getTargetCode();
         String sourceCode = newAnswer.getSourceCode();
         String attributeCode = newAnswer.getAttributeCode();
         String loadName = newAnswer.getValue();
         System.out.println("The target BE code is   ::  " +targetCode);
         System.out.println("The source BE code is   ::  " +sourceCode);
         System.out.println("The attribute code is   ::  " +attributeCode);
         System.out.println("The load name is   ::  " +loadName);
         
       /* Get the sourceCode(Job code) for this LOAD */
        JsonArray parentDataJson = new JsonArray(QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/entityentitys/"+targetCode+"/linkcodes/LNK_BEG/parents", tokenString));
        JsonObject objectInArray = parentDataJson.getJsonObject(0);
        String jobCode = objectInArray.getString("sourceCode");
        System.out.println("The Beg code is   ::  "+jobCode);
        Answer loadTitleAnswer = new Answer(userCode,jobCode,"PRI_TITLE",loadName );  
            
       /* convert answer to json */
	    String jsonAnswer = gson.toJson(loadTitleAnswer);
	    
       /* post answers to qwanda-utils */
	    QwandaUtils.apiPostEntity(qwandaServiceUrl+"/qwanda/answers",jsonAnswer, tokenString);
        
       RulesUtils.footer(drools.getRule().getName());
end

