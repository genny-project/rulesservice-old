package life.genny.rules;

import life.genny.rules.RulesUtils;
import life.genny.rules.QRules;
import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QMessage.MessageData;
import life.genny.qwanda.message.QCmdMessage;
import io.vertx.rxjava.core.eventbus.EventBus;
import io.vertx.core.buffer.Buffer;
import com.google.gson.Gson;
import life.genny.qwanda.Answer;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwanda.message.QEventAttributeValueChangeMessage;
import life.genny.qwandautils.KeycloakUtils;
import life.genny.qwandautils.MergeUtil;
import life.genny.qwandautils.QwandaUtils;
import life.genny.qwandautils.MergeUtil;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwanda.Ask;
import life.genny.qwanda.Link;


import java.lang.reflect.Type;
import java.util.Map;
import java.util.Set;
import java.util.Iterator;
import java.util.HashMap; 
import java.time.LocalDateTime;
import java.time.ZonedDateTime;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializationContext;
import com.google.gson.FieldNamingPolicy;
import io.vertx.core.json.JsonObject;
import io.vertx.core.json.JsonArray;
import java.time.format.DateTimeFormatter;
import life.genny.qwanda.DateTimeDeserializer;

global java.lang.String LOG_RESET;
global java.lang.String LOG_RED;
global java.lang.String LOG_GREEN;
global java.lang.String LOG_YELLOW;
global java.lang.String LOG_BLUE;
global java.lang.String LOG_PURPLE;
global java.lang.String LOG_CYAN;
global java.lang.String LOG_WHITE;
global java.lang.String LOG_BOLD;

rule "Answer"
    when
        m : QDataAnswerMessage( QDataAnswerMessage.getData_type().equals(Answer.class.getSimpleName()) )
        rules: QRules()
    then    
        RulesUtils.header(drools.getRule().getName());
        
        String qwandaServiceUrl = rules.getQwandaServiceUrl();
        String userCode =  rules.getUser().getCode();

        GsonBuilder gsonBuilder = new GsonBuilder();
        gsonBuilder.registerTypeAdapter(LocalDateTime.class, new DateTimeDeserializer());
        Gson gson = gsonBuilder.create();

        /* extract answers */
        Answer[] answers = m.getItems();
        for (Answer answer : answers) {
        
            Long askId = answer.getAskId();
            String sourceCode = answer.getSourceCode();
            String targetCode = answer.getTargetCode();
            answer.setSourceCode(answer.getTargetCode());
            String attributeCode = answer.getAttributeCode();
            String value = answer.getValue();
            Boolean inferred = answer.getInferred();
            Double weight = answer.getWeight();
            Boolean expired = answer.getExpired();
            Boolean refused = answer.getRefused();
            System.out.println("Printing Answer data recieved   ::");
            System.out.println("\nAskId: " +askId + "\nSource Code: " +sourceCode + "\nTarget Code: " +targetCode + "\nAttribute Code: " +attributeCode + "\nAttribute Value: " +value+" \nInferred: "+(inferred?"TRUE":"FALSE")+ " \nWeight: "+weight);
            System.out.println("------------------------------------------------------------------------");
            
            /* if this answer is actually an address another rule will be triggered */
            if(!attributeCode.contains("ADDRESS_FULL")) {
                  	/* convert answer to json */
	            String jsonAnswer = gson.toJson(answer);
	            System.out.println("incoming JSON Answer   ::   "+jsonAnswer);
	
	            /* convert Answer Json to Answer obj */
	            Answer answerObj = gson.fromJson(jsonAnswer, Answer.class);
	            System.out.println("Answer Object   ::   "+answerObj);
	            System.out.println("------------------------------------------------------------------------");
	            /* JsonObject jsonObject = Buffer.buffer(json).toJsonObject(); */         
	
	            /* post answers to qwanda-utils */
	            QwandaUtils.apiPostEntity(qwandaServiceUrl+"/qwanda/answers",jsonAnswer, rules.getToken());
            }
         }      
 
       RulesUtils.footer(drools.getRule().getName());
           
end


   