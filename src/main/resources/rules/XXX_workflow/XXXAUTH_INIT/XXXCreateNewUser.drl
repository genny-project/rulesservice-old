// package com.sample;

// import org.apache.commons.lang3.StringUtils;

// import life.genny.qwanda.message.QEventMessage;
// import life.genny.qwanda.message.QMessage.MessageData;
// import life.genny.qwanda.message.QCmdMessage;
// import life.genny.qwanda.message.QDataBaseEntityMessage;
// import io.vertx.rxjava.core.eventbus.EventBus;
// import io.vertx.core.buffer.Buffer;
// import com.google.gson.Gson;
// import life.genny.qwanda.Answer;
// import life.genny.qwanda.message.QDataAnswerMessage;
// import life.genny.qwandautils.KeycloakUtils;
// import life.genny.qwandautils.QwandaUtils;
// import life.genny.qwanda.message.QDataAskMessage;
// import life.genny.qwanda.message.QCmdMessage;
// import life.genny.qwanda.Ask;
// import life.genny.qwanda.entity.BaseEntity;

// import java.lang.reflect.Type;
// import java.util.Map;
// import java.util.Set;
// import java.time.LocalDateTime;
// import java.time.ZonedDateTime;
// import com.google.gson.GsonBuilder;
// import com.google.gson.JsonDeserializationContext;
// import com.google.gson.JsonDeserializer;
// import com.google.gson.JsonElement;
// import com.google.gson.JsonParseException;
// import com.google.gson.JsonPrimitive;
// import com.google.gson.JsonSerializationContext;
// import com.google.gson.FieldNamingPolicy;
// import io.vertx.core.json.JsonObject;
// import io.vertx.core.json.JsonArray;
// import java.time.format.DateTimeFormatter;
// import life.genny.qwanda.DateTimeDeserializer;
// import life.genny.qwanda.entity.User;
// import life.genny.qwanda.Link;

// // global java.lang.String REACT_APP_QWANDA_API_URL;
// // global java.lang.String REACT_APP_VERTX_URL;
// // global java.lang.String KEYCLOAKIP;

// // global variables for color logs
// global java.lang.String LOG_RESET;
// global java.lang.String LOG_RED;
// global java.lang.String LOG_GREEN;
// global java.lang.String LOG_YELLOW;
// global java.lang.String LOG_BLUE;
// global java.lang.String LOG_PURPLE;
// global java.lang.String LOG_CYAN;
// global java.lang.String LOG_WHITE;
// global java.lang.String LOG_BOLD;

   

// rule "Create new User"
//    salience 21
//    agenda-group "UserRegistration"
//    when
//       bus: EventBus()
//       $user: User(isAvailable == false)
//       $map : Map($value: this["token"] != null)
//       $map1 : Map($value1: this["realm"] != null)
//    then
//       System.out.println(LOG_YELLOW + "================================================================================================================================================" + LOG_RESET);
//       System.out.println(LOG_GREEN + "RULE EXECUTED      ::   Create New User" + LOG_RESET);
//       System.out.println("User Already Exists? true/false   ::   "+$user.getIsAvailable());
//       /* Prepare Token & qwandaServiceUrl */
//       String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
//       String tokenString = (String)$map.get("token");      
//       /* Creating new user based ion keycloak info */
//       BaseEntity person = QwandaUtils.createUser(qwandaServiceUrl, tokenString, $map1.get("preferred_username").toString(), $map1.get("given_name").toString(), $map1.get("family_name").toString(), $map1.get("email").toString() );      
//       System.out.println("Person Base Entity   ::     "+person.toString());
//       /* Get userCode for the given username */
//       String userCode = QwandaUtils.getBaseEntityCodeForUserName($user.getUname(),tokenString);
//       System.out.println("User Code from DB     ::    "+userCode);
//       /* Update the available fact value */
//        modify($user){
//            setuCode(QwandaUtils.getBaseEntityCodeForUserName($user.getUname(), tokenString)),
//            setIsAvailable(QwandaUtils.checkUserTokenExists(qwandaServiceUrl,tokenString)),
//            /* setIsProfileCompleted(QwandaUtils.isProfileCompleted(userCode, "QUE_NEW_USER_PROFILE_GRP", tokenString)); */
//            setIsProfileCompleted( QwandaUtils.isMandatoryFieldsEntered(userCode, userCode, "QUE_NEW_USER_PROFILE_GRP", tokenString));
//         }
//        System.out.println("User facts value after creating user -  isAvailable   ::   " +$user.getIsAvailable());
//       /* Calling the rule group : UserRegistration */
//       drools.setFocus("UserRegistration");
//       System.out.println("The UserCode     ::    " +$user.getuCode());
//       System.out.println("Available value after creating user     ::    " +$user.getIsAvailable());
//       System.out.println("isProfileCompleted value after creating user     ::    " +$user.getIsProfileCompleted());     
//       System.out.println( "\n" + LOG_RED + "RULE TERMINATED    ::  Create New User" + LOG_RESET);
//       System.out.println(LOG_YELLOW + "------------------------------------------------------------------------------------------------------------------------------------------------" + LOG_RESET);
// end

