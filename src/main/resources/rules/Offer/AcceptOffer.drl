package com.sample;

import org.apache.commons.lang3.StringUtils;

import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QMessage.MessageData;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import io.vertx.rxjava.core.eventbus.EventBus;
import io.vertx.core.buffer.Buffer;
import com.google.gson.Gson;
import life.genny.qwanda.Answer;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwandautils.KeycloakUtils;
import life.genny.qwandautils.QwandaUtils;
import life.genny.qwandautils.MessageUtils;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.Ask;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.message.QMSGMessage;
import life.genny.qwanda.message.QBaseMSGMessageType;

import java.lang.reflect.Type;
import java.util.Map;
import java.util.Set;
import java.time.LocalDateTime;
import java.time.ZonedDateTime;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializationContext;
import com.google.gson.FieldNamingPolicy;
import io.vertx.core.json.JsonObject;
import io.vertx.core.json.JsonArray;
import java.time.format.DateTimeFormatter;
import life.genny.qwanda.DateTimeDeserializer;
import life.genny.qwanda.entity.User;
import life.genny.qwanda.Link;

rule "Accept Offer"

    when
        $m : QEventMessage( event_type == "BTN_CLICK" && data.code == "BTN_ACCEPT_OFFER")
        bus: EventBus()
        $user: User(realm != null )
        $map : Map($value: this["token"] != null)
        $map1 : Map($value1: this["realm"] != null)
    then

        System.out.println(QwandaUtils.executeRuleLogger("Accept Offer"));
        
         /* Prepare GSON Deserialization */
        Gson gson = new GsonBuilder()
            .registerTypeAdapter(LocalDateTime.class, new JsonDeserializer<LocalDateTime>() {
                @Override
                public LocalDateTime deserialize(final JsonElement json, final Type type,
                    final JsonDeserializationContext jsonDeserializationContext)
                    throws JsonParseException {
                return LocalDateTime.parse(json.getAsJsonPrimitive().getAsString(), DateTimeFormatter.ISO_LOCAL_DATE_TIME);
                }

                public JsonElement serialize(final LocalDateTime date, final Type typeOfSrc,
                    final JsonSerializationContext context) {
                return new JsonPrimitive(date.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME)); 
                }
            }).create();
        
        
        /* Prepare Token & qwandaServiceUrl */
        String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
        String tokenString = (String)$map.get("token");   
        
        /* retrieve jsonObj's values sent on data.value */
        String data = $m.getData().getValue();
        if(data != null) {

            JsonObject dataJson = new JsonObject(data);
            String hint = dataJson.getString("hint");
            String offerCode = dataJson.getString("itemCode"); /* BEG_X .... */
            String userCode = $user.getuCode();
            String linkCode= "LNK_BEG";
            String linkValue= "OFFER";
            String begCode= null;

            /* base entity code is the job quote will be quoting on */
            if(offerCode != null) {                
                /* get OFFER BE's parent BEG code */
                JsonArray offerArray = new JsonArray(QwandaUtils.apiGet(qwandaServiceUrl + "/qwanda/entityentitys/" + offerCode + "/linkcodes/" + linkCode + "/parents", tokenString));
                System.out.println("------------------------------------------------------------------------");
                System.out.println("OFFER BE   ::   "+ offerArray.toString());	
                System.out.println("------------------------------------------------------------------------");	

                for(Object obj : offerArray) {
                    JsonObject offerObj = JsonObject.mapFrom(obj);
                    begCode= offerObj.getString("sourceCode");  
                    System.out.println("BEG CODE   ::   "+ begCode);	                  
                }

                /* Sending message to BEG OWNER */
                String code= "code:" + begCode ;
                String recipient = "recipient:OWNER";
                String[] msgMessageData = {code, recipient};
                String templateCode = "MSG_CH40_ACCEPT_OFFER";
                String[] attachments = {};           
                QBaseMSGMessageType method = QBaseMSGMessageType.SMS;

                System.out.println("------------------------------------------------------------------------");
                System.out.println("msgMessageData Array   ::   " + msgMessageData.toString());
                
                /* Creating messageData MSG_MESSAGE */
                QMSGMessage msgMessage = new QMSGMessage("MSG_MESSAGE", templateCode, msgMessageData, method, attachments);
                JsonObject jsonMessage = new JsonObject().mapFrom(msgMessage);

                System.out.println("------------------------------------------------------------------------");
                System.out.println("MESSAGE TO OWNER   ::   " + jsonMessage.toString());
                System.out.println("------------------------------------------------------------------------");
                
                jsonMessage.put("token",tokenString);
                bus.publish("messages", jsonMessage);


                /* Check if a link exists between BEG & COMPANY */
                Boolean linkExists = QwandaUtils.checkIfLinkExistsForTarget(begCode, linkCode, userCode, tokenString );
                System.out.println("LINK EXISTS ?  ::    "+ linkExists);

                /* Creating a link between BEG & COMPANY  || LINKVALUE = "QUOTER" */
                if(!linkExists){
                    System.out.println("\nCREATING LINK BETWEEN          ::   " + begCode + "  &  " + userCode);
                    Link link = new Link( begCode, userCode, linkCode, "QUOTER");
                    link.setWeight(0.0);
                    String output = QwandaUtils.apiPostEntity(qwandaServiceUrl + "/qwanda/entityentitys", gson.toJson(link),tokenString);
                }
            

                /* Fectching updated link of BEG */
                JsonArray updatedLink = new JsonArray(QwandaUtils.apiGet(qwandaServiceUrl + "/qwanda/entityentitys/" + begCode + "/linkcodes/" + linkCode + "/children", tokenString));
                
                /* Creating a data msg */
                JsonObject newLink = new JsonObject();
                newLink.put("msg_type", "DATA_MSG");
                newLink.put("data_type", "LINK_CHANGE");
                newLink.put("items", updatedLink);

                System.out.println("------------------------------------------------------------------------");
                System.out.println("Updated Link   ::  "+newLink.toString());
                System.out.println("------------------------------------------------------------------------");
                /* publish new link data */
                newLink.put("token", tokenString );
                bus.publish("cmds", newLink);


                /* SEND QUOTER BE AGAIN FOR UPDATE */
                JsonObject quoterObj = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_PEOPLE/linkcodes/LNK_CORE/attributes?PRI_USERNAME=" + userCode, tokenString));
                quoterObj.put("aliasCode", "USER"); 
                System.out.println("------------------------------------------------------------------------");
                System.out.println("QUOTER BE   ::  " + quoterObj.toString());
                System.out.println("------------------------------------------------------------------------");
                quoterObj.put("token", tokenString);      
                bus.publish("cmds", quoterObj);

            }
        }

        System.out.println(QwandaUtils.terminateRuleLogger("Accept Offer"));

end

