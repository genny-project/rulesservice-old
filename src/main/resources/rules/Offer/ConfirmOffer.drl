package life.genny.rules;

import life.genny.rules.RulesUtils;
import life.genny.rules.QRules;
import life.genny.qwandautils.MergeUtil;
import life.genny.qwandautils.QwandaUtils;
import life.genny.qwandautils.MessageUtils;
import life.genny.qwandautils.MergeUtil;
import life.genny.qwandautils.PaymentUtils;
import life.genny.qwandautils.KeycloakUtils;
import org.apache.commons.lang3.StringUtils;

import life.genny.qwanda.Answer;
import life.genny.qwanda.Ask;
import life.genny.qwanda.Link;
import life.genny.qwanda.DateTimeDeserializer;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.entity.User;

import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QMessage.MessageData;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QEventBtnClickMessage;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwanda.message.QMSGMessage;
import life.genny.qwanda.message.QBaseMSGMessageType;

import io.vertx.rxjava.core.eventbus.EventBus;
import io.vertx.core.buffer.Buffer;
import io.vertx.core.json.JsonObject;
import io.vertx.core.json.JsonArray;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializationContext;
import com.google.gson.FieldNamingPolicy;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;

import java.lang.reflect.Type;
import java.time.LocalDateTime;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;

rule "Confirm Offer"
    when
        $m : QEventBtnClickMessage( event_type == "BTN_CLICK" && data.code == "BTN_CONFIRM_OFFER")
        rules: QRules()
    then

        RulesUtils.header(drools.getRule().getName());
        /* Prepare GSON Deserialization */
            Gson gson = new GsonBuilder()
            .registerTypeAdapter(LocalDateTime.class, new JsonDeserializer<LocalDateTime>() {
                @Override
                public LocalDateTime deserialize(final JsonElement json, final Type type,
                    final JsonDeserializationContext jsonDeserializationContext)
                    throws JsonParseException {
                return LocalDateTime.parse(json.getAsJsonPrimitive().getAsString(), DateTimeFormatter.ISO_LOCAL_DATE_TIME);
                }

                public JsonElement serialize(final LocalDateTime date, final Type typeOfSrc,
                    final JsonSerializationContext context) {
                return new JsonPrimitive(date.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME)); 
                }
            }).create();

        /* Prepare Token & qwandaServiceUrl */
            String qwandaServiceUrl = rules.getQwandaServiceUrl();
            String tokenString = rules.getToken();
        
        /* Get offerCode, username, userCode, userFullName */
            String offerCode = $m.getItemCode();
            System.out.println("offerCode  ::   "+ offerCode);          
            String userName = rules.getAsString("preferred_username");
            System.out.println("username   ::   "+ userName);                 
            String userCode = QwandaUtils.getBaseEntityCodeForUserName(userName, tokenString);
            System.out.println("usercode   ::   "+ userCode);
            String userFullName= MergeUtil.getFullName(userCode, tokenString);
            System.out.println("user fullName   ::   "+ userFullName);
        
            String linkCode= "LNK_BEG";
            String linkOffer= "OFFER";
            String linkQuoter= "QUOTER";
            String linkOwner = "OWNER";

            /* GET attributes of the OFFER that's being accepted */
                JsonArray offerBe = new JsonArray(QwandaUtils.apiGet(qwandaServiceUrl + "/qwanda/baseentitys/" + offerCode + "/attributes", tokenString));
                RulesUtils.ruleLogger("OFEER Base Entity", offerBe);
                
                Map<String, String> map = new HashMap<>();
                /* loop to GET attributeCodes and VALUE */
                for(Object obj : offerBe) {
                    
                    JsonObject offerObj = (JsonObject) obj;
                    String attributeCode = offerObj.getString("attributeCode");
                    String attributeValue = offerObj.getString("valueString");
                    map.put(attributeCode, attributeValue); /* PUT in map */
                }
                                
                System.out.println("------------------------------------------------------------------------");
                System.out.println("MAP DATA   ::   " + map);
                System.out.println("------------------------------------------------------------------------");
                
                String begCode= map.get("PRI_BEG_CODE");
                String begPrice= map.get("PRI_OFFER_PRICE");
                String quoterCode= map.get("PRI_QUOTER_CODE");
                String quoterUname= map.get("PRI_QUOTER_USERNAME");

                System.out.println("------------------------------------------------------------------------");
                System.out.println("BEG CODE          ::   " + begCode);
                System.out.println("BEG PRICE         ::   " + begPrice);
                System.out.println("QUOTER CODE       ::   " + quoterCode);
                System.out.println("QUOTER USERNAME   ::   " + quoterUname);
                System.out.println("------------------------------------------------------------------------");

            /* Update link between BEG and QUOTR as DRIVER */
                System.out.println("\nCREATING DRIVER LINK BETWEEN          ::   " + begCode + "  &  " + quoterCode);
                Link link = new Link( begCode, quoterCode, linkCode, "DRIVER");
                link.setWeight(1.0);
                String output1 = QwandaUtils.apiPutEntity(qwandaServiceUrl + "/qwanda/links", gson.toJson(link),tokenString);
            
            
            /* SEND QUOTER BE UPDATE */
                JsonObject quoterObj = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/"+ begCode +"/linkcodes/"+ linkCode +"/attributes?PRI_USERNAME=" + quoterUname, tokenString));
                RulesUtils.ruleLogger("QUOTER Base Entity", quoterObj);
                quoterObj.put("token", tokenString);      
                rules.publish("cmds", quoterObj);
            
             /* Update link between BEG and OFFER to weight= 0 */
                System.out.println("UPDATING weight OF LINK BETWEEN          ::   " + begCode + "  &  " + offerCode);
                Link link3 = new Link( begCode, offerCode, linkCode, linkOffer);
                link3.setWeight(0.0);
                String output3 = QwandaUtils.apiPutEntity(qwandaServiceUrl + "/qwanda/links", gson.toJson(link3),tokenString);
                
            /* Sending updated link of BEG */
                JsonArray updatedLink1 = new JsonArray(QwandaUtils.apiGet(qwandaServiceUrl + "/qwanda/entityentitys/" + begCode + "/linkcodes/" + linkCode + "/children", tokenString));
                /* Creating a data msg */
                JsonObject newLink1 = new JsonObject();
                newLink1.put("msg_type", "DATA_MSG");
                newLink1.put("data_type", "LINK_CHANGE");
                newLink1.put("items", updatedLink1);

                RulesUtils.ruleLogger("Updated link of BEG", newLink1);
                /* publish new link data */
                newLink1.put("token", tokenString );
                rules.publish("cmds", newLink1);
                
            /* Update BEG to have DRIVER_CODE as an attribute */
                Answer beAnswer = new Answer(begCode, begCode, "STT_IN_TRANSIT", quoterCode);
	            String jsonBeUpdate = gson.toJson(beAnswer);
	            QwandaUtils.apiPostEntity(qwandaServiceUrl+"/qwanda/answers", jsonBeUpdate, tokenString);

            /* Update BEG's PRI_PRICE */
                Answer priceAnswer = new Answer(begCode, begCode, "PRI_PRICE", begPrice);
                priceAnswer.setInferred(true);
                System.out.println("UPDATING PRICE of BEG          ::   " + priceAnswer);
                RulesUtils.println(priceAnswer);
                rules.publishData(priceAnswer);

            /* Move BEG to GRP_APPROVED */
                String oldGroup = "GRP_NEW_ITEMS";
                String newGroup = "GRP_APPROVED";
                String linkCode2 = "LNK_CORE";
                
                /* Moving the BEG */
                JsonObject begEntity = new JsonObject();
                begEntity.put("sourceCode", oldGroup);
                begEntity.put("targetCode", begCode);  /* begCode */
                begEntity.put("attributeCode", linkCode2);

                RulesUtils.ruleLogger("EntityLink", begEntity);

                String output2 = QwandaUtils.apiPostEntity(qwandaServiceUrl+"/qwanda/baseentitys/move/" + newGroup, begEntity.toString(), tokenString);

            /* Sending updated link of BEG'S parent group */
                JsonArray updatedLink2 = new JsonArray(QwandaUtils.apiGet(qwandaServiceUrl + "/qwanda/entityentitys/" + begCode + "/linkcodes/" + linkCode2, tokenString));
                /* Creating a data msg */
                    JsonObject newLink = new JsonObject();
                    newLink.put("msg_type", "DATA_MSG");
                    newLink.put("data_type", "LINK_CHANGE");
                    newLink.put("items", updatedLink2);
                    

                 RulesUtils.ruleLogger("Updated Link", newLink);
                /* publish new link data */
                    newLink.put("token", tokenString );
                    rules.publish("cmds", newLink);
                    
                /* drools.setFocus("payments"); */

                /* Sending message to OWNER */
                HashMap<String,String> contextMap = new HashMap<String, String>();
        		contextMap.put("DRIVER",quoterCode);
        		contextMap.put("JOB", begCode);  
        		contextMap.put("QUOTER", quoterCode); 
       
        		String ownerCode = QwandaUtils.getSourceOrTargetForGroupLink("GRP_NEW_ITEMS", linkCode, begCode, linkOwner, false, tokenString);
        		RulesUtils.println("owner code ::"+userCode);
				String[] recipientArr = {userCode};

        		/* rules.sendMessage("", recipientArr, contextMap,"MSG_CH40_CONFIRM_QUOTE_OWNER", "SMS"); */
        		/* rules.sendMessage("", recipientArr, contextMap,"MSG_CH40_CONFIRM_QUOTE_OWNER", "EMAIL"); */
            
            	 /* Sending message to DRIVER */
        		HashMap<String,String> contextMapForDriver = new HashMap<String, String>();
        		contextMapForDriver.put("JOB", begCode);
        		contextMapForDriver.put("OWNER", userCode);
        
				String[] recipientArrForDriver = {quoterCode};
		
				/* rules.sendMessage("", recipientArrForDriver, contextMapForDriver,"MSG_CH40_CONFIRM_QUOTE_DRIVER", "SMS"); */
        		/* rules.sendMessage("", recipientArrForDriver, contextMapForDriver,"MSG_CH40_CONFIRM_QUOTE_DRIVER", "EMAIL"); */
                
                /* Set progression of LOAD delivery to 0 */
                Answer updateProgressAnswer = new Answer(begCode, begCode, "PRI_PROGRESS", Double.toString(0.0));
    				RulesUtils.println(updateProgressAnswer);
    				rules.publishData(updateProgressAnswer);
                
                /* We ask FE to monitor GPS */
                rules.geofenceJob(begCode, rules.getUser().getCode(), 10.0); 

        /* sending cmd BUCKETVIEW */
        drools.setFocus("bucketview"); 
        RulesUtils.footer(drools.getRule().getName());
end
