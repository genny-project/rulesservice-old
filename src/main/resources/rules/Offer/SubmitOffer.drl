package com.sample;

import org.apache.commons.lang3.StringUtils;

import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QMessage.MessageData;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import io.vertx.rxjava.core.eventbus.EventBus;
import io.vertx.core.buffer.Buffer;
import com.google.gson.Gson;
import life.genny.qwanda.Answer;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwandautils.KeycloakUtils;
import life.genny.qwandautils.QwandaUtils;
import life.genny.qwandautils.MessageUtils;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.Ask;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.message.QMSGMessage;
import life.genny.qwanda.message.QBaseMSGMessageType;

import java.lang.reflect.Type;
import java.util.Map;
import java.util.Set;
import java.time.LocalDateTime;
import java.time.ZonedDateTime;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializationContext;
import com.google.gson.FieldNamingPolicy;
import io.vertx.core.json.JsonObject;
import io.vertx.core.json.JsonArray;
import java.time.format.DateTimeFormatter;
import life.genny.qwanda.DateTimeDeserializer;
import life.genny.qwanda.entity.User;
import life.genny.qwanda.Link;


rule "Submit Offer"
    when
       $m : QEventMessage( event_type == "FORM_SUBMIT" && data.code == "QUE_OFFER_DETAILS_GRP" ) 
       bus:EventBus()
       $user: User(realm != null)
       $map : Map($value: this["token"] != null)
    then
        System.out.println(QwandaUtils.executeRuleLogger("Submit Offer"));       
        /* Prepare GSON Deserialization */
        Gson gson = new GsonBuilder()
            .registerTypeAdapter(LocalDateTime.class, new JsonDeserializer<LocalDateTime>() {
                @Override
                public LocalDateTime deserialize(final JsonElement json, final Type type,
                    final JsonDeserializationContext jsonDeserializationContext)
                    throws JsonParseException {
                return LocalDateTime.parse(json.getAsJsonPrimitive().getAsString(), DateTimeFormatter.ISO_LOCAL_DATE_TIME);
                }

                public JsonElement serialize(final LocalDateTime date, final Type typeOfSrc,
                    final JsonSerializationContext context) {
                return new JsonPrimitive(date.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME)); 
                }
            }).create();

        /* Prepare Token & qwandaServiceUrl */
            String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
            String tokenString = (String)$map.get("token");   
        
        String dataString = $m.getData().getValue();
        JsonObject dataJson = new JsonObject(dataString);
        
        String offerCode = dataJson.getString("targetCode");
        String userCode = $user.getuCode();
        String linkCode= "LNK_BEG";
        String linkOffer= "OFFER";
        String linkQuoter= "QUOTER";

        System.out.println("OFFER CODE FROM FE     ::    "+ offerCode);
        System.out.println("USER CODE      ::    "+ userCode);

        /* GET  attributes of the OFFER BE */
            JsonArray offerBe = new JsonArray(QwandaUtils.apiGet(qwandaServiceUrl + "/qwanda/baseentitys/" + offerCode + "/attributes", tokenString));
            System.out.println("------------------------------------------------------------------------");
            System.out.println("OFFER DATA   ::   " + offerBe.toString());
            System.out.println("------------------------------------------------------------------------");
            
            Map<String, String> map = new HashMap<>();
            /* loop to GET attributeCodes and VALUE */
            for(Object obj : offerBe) {
                JsonObject offerObj = (JsonObject) obj;
                String attributeCode = offerObj.getString("attributeCode");
                String attributeValue = offerObj.getString("valueString");
                map.put(attributeCode, attributeValue); /* PUT in map */

            }
            System.out.println("------------------------------------------------------------------------");
            System.out.println("MAP DATA   ::   " + map);
            System.out.println("------------------------------------------------------------------------");
            
            String begCode= map.get("PRI_BEG_CODE");
            String quoterCode= map.get("PRI_QUOTER_CODE");
            String quoterUname= map.get("PRI_QUOTER_USERNAME");
            String priOfferCode= map.get("PRI_OFFER_CODE");

            System.out.println("------------------------------------------------------------------------");
            System.out.println("BEG CODE          ::   " + begCode);
            System.out.println("QUOTER CODE       ::   " + quoterCode);
            System.out.println("QUOTER USERNAME   ::   " + quoterUname);
            System.out.println("PRI OFFER CODE   ::   " + priOfferCode);
            System.out.println("------------------------------------------------------------------------");

        /* link BEG and OFFER BE || OFFER */
            System.out.println("\nCREATING LINK BETWEEN          ::   " + begCode + "  &  " + offerCode);
            Link link1 = new Link( begCode, offerCode, linkCode, linkOffer);
            link1.setWeight(.01);
            String output1 = QwandaUtils.apiPostEntity(qwandaServiceUrl + "/qwanda/entityentitys", gson.toJson(link1),tokenString);

        /* link BEG and QUOTER BE || QUOTER */
            System.out.println("\nCREATING LINK BETWEEN          ::   " + begCode + "  &  " + quoterCode);
            Link link2 = new Link( begCode, quoterCode, linkCode, linkQuoter);
            link2.setWeight(1.0);
            String output2 = QwandaUtils.apiPostEntity(qwandaServiceUrl + "/qwanda/entityentitys", gson.toJson(link2),tokenString);

        /* sending cmd BUCKETVIEW */
        drools.setFocus("bucketview");        
        System.out.println(QwandaUtils.terminateRuleLogger("Submit Offer"));
end
