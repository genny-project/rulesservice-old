package life.genny.rules;

import life.genny.rules.RulesUtils;
import life.genny.rules.QRules;
import life.genny.qwandautils.MergeUtil;
import life.genny.qwandautils.QwandaUtils;
import life.genny.qwandautils.MessageUtils;
import life.genny.qwandautils.MergeUtil;
import life.genny.qwandautils.KeycloakUtils;
import org.apache.commons.lang3.StringUtils;

import life.genny.qwanda.Answer;
import life.genny.qwanda.Ask;
import life.genny.qwanda.Link;
import life.genny.qwanda.DateTimeDeserializer;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.entity.User;

import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QMessage.MessageData;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QCmdViewMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QEventBtnClickMessage;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwanda.message.QMSGMessage;
import life.genny.qwanda.message.QBaseMSGMessageType;

import io.vertx.rxjava.core.eventbus.EventBus;
import io.vertx.core.buffer.Buffer;
import io.vertx.core.json.JsonObject;
import io.vertx.core.json.JsonArray;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializationContext;
import com.google.gson.FieldNamingPolicy;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;

import java.lang.reflect.Type;
import java.time.LocalDateTime;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;

rule "Submit Offer"
    when
       $m : QEventMessage( event_type == "FORM_SUBMIT" && data.code == "QUE_OFFER_DETAILS_GRP" ) 
       bus:EventBus()
       $user: User(realm != null)
       $map : Map($value: this["token"] != null)
       $map1 : Map($value1: this["realm"] != null)
       rules: QRules()
    then
        System.out.println(QwandaUtils.executeRuleLogger("Submit Offer"));       
        /* Prepare GSON Deserialization */
            Gson gson = new GsonBuilder()
            .registerTypeAdapter(LocalDateTime.class, new JsonDeserializer<LocalDateTime>() {
                @Override
                public LocalDateTime deserialize(final JsonElement json, final Type type,
                    final JsonDeserializationContext jsonDeserializationContext)
                    throws JsonParseException {
                return LocalDateTime.parse(json.getAsJsonPrimitive().getAsString(), DateTimeFormatter.ISO_LOCAL_DATE_TIME);
                }

                public JsonElement serialize(final LocalDateTime date, final Type typeOfSrc,
                    final JsonSerializationContext context) {
                return new JsonPrimitive(date.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME)); 
                }
            }).create();
            Gson gson1 = new Gson();
            GsonBuilder gsonBuilder = new GsonBuilder();
            gsonBuilder.registerTypeAdapter(LocalDateTime.class, new DateTimeDeserializer());
            gson1 = gsonBuilder.create();

        /* Prepare Token & qwandaServiceUrl */
            String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
            String tokenString = (String)$map.get("token");   
        
        String dataString = $m.getData().getValue();
        JsonObject dataJson = new JsonObject(dataString);
        String offerCode = dataJson.getString("targetCode");
        

        String userName = (String)$map1.get("preferred_username");   
        System.out.println("username   ::   "+ userName);           
        String userCode = QwandaUtils.getBaseEntityCodeForUserName(userName, tokenString);
        System.out.println("usercode   ::   "+ userCode);
        String userFullName= MergeUtil.getFullName(userCode, tokenString);
        System.out.println("user fullName   ::   "+ userFullName);

        String linkCode= "LNK_BEG";
        String linkOffer= "OFFER";
        String linkQuoter= "QUOTER";
        String linkOwner = "OWNER";

        System.out.println("OFFER CODE FROM FE     ::    "+ offerCode);
        System.out.println("USER CODE              ::    "+ userCode);

        /* GET  attributes of the OFFER BE */
            JsonArray offerBe = new JsonArray(QwandaUtils.apiGet(qwandaServiceUrl + "/qwanda/baseentitys/" + offerCode + "/attributes", tokenString));
            System.out.println("------------------------------------------------------------------------");
            System.out.println("OFFER DATA   ::   " + offerBe.toString());
            System.out.println("------------------------------------------------------------------------");
            
            Map<String, String> map = new HashMap<>();
            /* loop to GET attributeCodes and VALUE */
            for(Object obj : offerBe) {
                JsonObject offerObj = (JsonObject) obj;
                String attributeCode = offerObj.getString("attributeCode");
                String attributeValue = offerObj.getString("valueString");
                map.put(attributeCode, attributeValue); /* PUT in map */

            }
            System.out.println("------------------------------------------------------------------------");
            System.out.println("MAP DATA   ::   " + map);
            System.out.println("------------------------------------------------------------------------");
            
            String begCode= map.get("PRI_BEG_CODE");
            String quoterCode= map.get("PRI_QUOTER_CODE");
            String quoterUname= map.get("PRI_QUOTER_USERNAME");
            String quoterFullName= map.get("PRI_QUOTER_FULLNAME");
            String priOfferCode= map.get("PRI_OFFER_CODE");
            
            System.out.println("------------------------------------------------------------------------");
            System.out.println("BEG CODE          ::   " + begCode);
            System.out.println("QUOTER CODE       ::   " + quoterCode);
            System.out.println("QUOTER USERNAME   ::   " + quoterUname);
            System.out.println("QUOTER FULLNAME   ::   " + quoterFullName);
            System.out.println("PRI OFFER CODE   ::   " + priOfferCode);
            System.out.println("------------------------------------------------------------------------");
            
                        

            String templateCode = null;
            Boolean linkExists = false;
            
        /* Check if a link exists between BEG & OFFER */
            Boolean linkBegOffer = QwandaUtils.checkIfLinkExistsForTarget(begCode,  linkCode, offerCode, tokenString );
            System.out.println("LINK EXISTS FOR BEG & OFFER ?  ::    "+ linkBegOffer);        
            
            if(linkBegOffer) { 
               
            	/* Driver is giving counter-offer */
                if(userCode.equals(quoterCode)) {
                    RulesUtils.println("Driver is giving counter offer");
                    HashMap<String,String> counterContextMap = new HashMap<String, String>();
                    counterContextMap.put("QUOTER",quoterCode);
                    counterContextMap.put("JOB", begCode);  
                    counterContextMap.put("OFFER", priOfferCode); 
        
                    String ownerCode = QwandaUtils.getSourceOrTargetForGroupLink("GRP_NEW_ITEMS", linkCode, begCode, linkOwner, false, tokenString);
                    RulesUtils.println("owner code ::"+ownerCode);
                    String[] counterRecipientArr = {ownerCode};

                    rules.sendMessage("", counterRecipientArr, counterContextMap,"MSG_CH40_COUNTER_OFFER_FROM_DTO", "SMS");
                    rules.sendMessage("", counterRecipientArr, counterContextMap,"MSG_CH40_COUNTER_OFFER_FROM_DTO", "EMAIL");
                
                    HashMap<String,String> counterContextMapForDriver = new HashMap<String, String>();
                    counterContextMapForDriver.put("JOB", begCode);
                    counterContextMapForDriver.put("OWNER", ownerCode);
                    counterContextMapForDriver.put("OFFER", priOfferCode);
            
                    String[] counterRecipientArrForDriver = {quoterCode};
            
                    rules.sendMessage("", counterRecipientArrForDriver, counterContextMapForDriver,"MSG_CH40_COUNTER_OFFER_FROM_DTD", "SMS");
                    rules.sendMessage("", counterRecipientArrForDriver, counterContextMapForDriver,"MSG_CH40_COUNTER_OFFER_FROM_DTD", "EMAIL");
                }
        	
                /* Owner is giving counter offer */
                    if(!userCode.equals(quoterCode)) {
                        RulesUtils.println("Owner is giving counter offer");
                        HashMap<String,String> contextMap = new HashMap<String, String>();
                        contextMap.put("QUOTER",quoterCode);
                        contextMap.put("JOB", begCode);  
                        contextMap.put("OFFER", priOfferCode); 
            
                        String ownerCode = QwandaUtils.getSourceOrTargetForGroupLink("GRP_NEW_ITEMS", linkCode, begCode, linkOwner, false, tokenString);
                        RulesUtils.println("Owner sending counter offer! Owner code ::"+ownerCode);
                        String[] recipientArr = {ownerCode};

                        rules.sendMessage("", recipientArr, contextMap,"MSG_CH40_COUNTER_OFFER_OTO", "SMS");
                        rules.sendMessage("", recipientArr, contextMap,"MSG_CH40_COUNTER_OFFER_OTO", "EMAIL");
                    
                        HashMap<String,String> contextMapForDriver = new HashMap<String, String>();
                        contextMapForDriver.put("JOB", begCode);
                        contextMapForDriver.put("OWNER", ownerCode);
                        contextMapForDriver.put("OFFER", priOfferCode);
                
                        String[] recipientArrForDriver = {quoterCode};
                
                        rules.sendMessage("", recipientArrForDriver, contextMapForDriver,"MSG_CH40_COUNTER_OFFER_OTD", "SMS");
                        rules.sendMessage("", recipientArrForDriver, contextMapForDriver,"MSG_CH40_COUNTER_OFFER_OTD", "EMAIL");
                    }
            }   
            
            /* link BEG and OFFER BE || OFFER */
            if(!linkBegOffer) {
            	
            	linkExists = false;
            	
                System.out.println("\nCREATING LINK BETWEEN          ::   " + begCode + "  &  " + offerCode);
                Link link1 = new Link( begCode, offerCode, linkCode, linkOffer);
                link1.setWeight(.01);
                String output1 = QwandaUtils.apiPostEntity(qwandaServiceUrl + "/qwanda/entityentitys", gson.toJson(link1),tokenString);

                /* Update the number of offers for BEG */ 
                    Integer offerCount = 0;
                    String offerCountString= MergeUtil.getAttrValue(begCode, "PRI_OFFER_COUNT", tokenString);
                    if(offerCountString == null) { 
                        offerCount = 1;
                    }else {                 
                        offerCount = Integer.parseInt(offerCountString);
                        offerCount = offerCount + 1;
                        System.out.println("Offer Count is   ::   " + offerCount);
                    }

                    Answer offerCountAnswer = new Answer(begCode, begCode, "PRI_OFFER_COUNT", offerCount.toString());
                    String result= QwandaUtils.apiPostEntity(qwandaServiceUrl + "/qwanda/answers", gson1.toJson(offerCountAnswer), tokenString);  

                /* Driver is making-offer for first time */
                    HashMap<String,String> noLinkContextMap = new HashMap<String, String>();
                    noLinkContextMap.put("QUOTER",quoterCode);
                    noLinkContextMap.put("JOB", begCode); 
                    noLinkContextMap.put("OFFER", offerCode); 
            
                    String ownerCode = QwandaUtils.getSourceOrTargetForGroupLink("GRP_NEW_ITEMS", linkCode, begCode, linkOwner, false, tokenString);
                    RulesUtils.println("owner code ::"+ownerCode);
                    String[] noLinkRecipientArr = {ownerCode};

				    rules.sendMessage("", noLinkRecipientArr, noLinkContextMap,"MSG_CH40_SUBMIT_QUOTE_OWNER", "EMAIL");
                    rules.sendMessage("", noLinkRecipientArr, noLinkContextMap,"MSG_CH40_SUBMIT_QUOTE_OWNER", "SMS");
                    
                    
                    HashMap<String,String> noLinkContextMapForDriver = new HashMap<String, String>();
                    noLinkContextMapForDriver.put("JOB", begCode);
                    noLinkContextMapForDriver.put("OWNER", ownerCode);
                    noLinkContextMapForDriver.put("OFFER", offerCode);
                    noLinkContextMapForDriver.put("QUOTER", quoterCode);
                
                    String[] noLinkRecipientArrForDriver = {quoterCode};
                
                    rules.sendMessage("", noLinkRecipientArrForDriver, noLinkContextMapForDriver,"MSG_CH40_SUBMIT_QUOTE_DRIVER", "SMS");
                    rules.sendMessage("", noLinkRecipientArrForDriver, noLinkContextMapForDriver,"MSG_CH40_SUBMIT_QUOTE_DRIVER", "EMAIL");
            }

        /* Check if a link exists between USER & OFFER */
            Boolean linkUserOffer = QwandaUtils.checkIfLinkExistsForTarget(userCode,  linkCode, offerCode, tokenString );
            System.out.println("LINK EXISTS FOR USER & OFFER?  ::    "+ linkUserOffer);
        /* link BEG and QUOTER BE || QUOTER */
            if(!linkUserOffer){
                System.out.println("\nCREATING LINK BETWEEN          ::   " + begCode + "  &  " + quoterCode);
                Link link2 = new Link( begCode, quoterCode, linkCode, linkQuoter);
                link2.setWeight(1.0);
                String output2 = QwandaUtils.apiPostEntity(qwandaServiceUrl + "/qwanda/entityentitys", gson.toJson(link2),tokenString);
            } 
            
            

        /* SEND OFFER BE    */
            JsonObject offerObj = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/"+ begCode +"/linkcodes/"+ linkCode +"/attributes?PRI_OFFER_CODE=" + offerCode, tokenString));
            System.out.println("------------------------------------------------------------------------");
            System.out.println("UPDATED OFFER BE   ::  " + offerObj.toString());
            System.out.println("------------------------------------------------------------------------");
            offerObj.put("token", tokenString);      
            bus.publish("cmds", offerObj);

        /* SEND QUOTER BE */
            JsonObject quoterObj = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/"+ begCode +"/linkcodes/"+ linkCode +"/attributes?PRI_USERNAME=" + userCode, tokenString));
            System.out.println("------------------------------------------------------------------------");
            System.out.println("QUOTER BE   ::  " + quoterObj.toString());
            System.out.println("------------------------------------------------------------------------");
            quoterObj.put("token", tokenString);      
            bus.publish("cmds", quoterObj);
        
        /* Sending updated link of BEG */
            JsonArray updatedLink = new JsonArray(QwandaUtils.apiGet(qwandaServiceUrl + "/qwanda/entityentitys/" + begCode + "/linkcodes/" + linkCode + "/children", tokenString));
            /* Creating a data msg */
                JsonObject newLink = new JsonObject();
                newLink.put("msg_type", "DATA_MSG");
                newLink.put("data_type", "LINK_CHANGE");
                newLink.put("items", updatedLink);
                System.out.println("------------------------------------------------------------------------");
                System.out.println("Updated Link   ::  "+newLink.toString());
                System.out.println("------------------------------------------------------------------------");
            /* publish new link data */
                newLink.put("token", tokenString );
                bus.publish("cmds", newLink);

        /* Sending message if offer exists*/


        /* Send BUCKETVIEW Cmd */
        drools.setFocus("bucketview");        
        System.out.println(QwandaUtils.terminateRuleLogger("Submit Offer"));
end
