package life.genny.rules;

import life.genny.rules.RulesUtils;
import life.genny.rules.QRules;
import life.genny.qwandautils.MergeUtil;
import life.genny.qwandautils.QwandaUtils;
import life.genny.qwandautils.MessageUtils;
import life.genny.qwandautils.MergeUtil;
import life.genny.qwandautils.KeycloakUtils;
import org.apache.commons.lang3.StringUtils;

import life.genny.qwanda.Answer;
import life.genny.qwanda.Ask;
import life.genny.qwanda.Link;
import life.genny.qwanda.DateTimeDeserializer;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.entity.User;

import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QMessage.MessageData;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwanda.message.QMSGMessage;
import life.genny.qwanda.message.QBaseMSGMessageType;

import io.vertx.rxjava.core.eventbus.EventBus;
import io.vertx.core.buffer.Buffer;
import io.vertx.core.json.JsonObject;
import io.vertx.core.json.JsonArray;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializationContext;
import com.google.gson.FieldNamingPolicy;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;

import java.lang.reflect.Type;
import java.time.LocalDateTime;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;

rule "Make Offer"
    when
        $m : QEventMessage( event_type == "BTN_CLICK" && data.code == "BTN_MAKE_OFFER")
        rules: QRules()
    then
        RulesUtils.header(drools.getRule().getName());
        /* Prepare GSON Deserialization */
            Gson gson = new GsonBuilder()
                .registerTypeAdapter(LocalDateTime.class, new JsonDeserializer<LocalDateTime>() {
                    @Override
                    public LocalDateTime deserialize(final JsonElement json, final Type type,
                        final JsonDeserializationContext jsonDeserializationContext)
                        throws JsonParseException {
                    return LocalDateTime.parse(json.getAsJsonPrimitive().getAsString(), DateTimeFormatter.ISO_LOCAL_DATE_TIME);
                    }

                    public JsonElement serialize(final LocalDateTime date, final Type typeOfSrc,
                        final JsonSerializationContext context) {
                    return new JsonPrimitive(date.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME)); 
                    }
                }).create();
            Gson gson1 = new Gson();
            GsonBuilder gsonBuilder = new GsonBuilder();
            gsonBuilder.registerTypeAdapter(LocalDateTime.class, new DateTimeDeserializer());
            gson1 = gsonBuilder.create();
        
        
        /* Prepare Token & qwandaServiceUrl */
            String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
            String tokenString = rules.getToken();
        
        /* retrieve jsonObjs values sent on data.value */
        String data = $m.getData().getValue();
        if(data != null) {

            JsonObject dataJson = new JsonObject(data);

            String begCode = dataJson.getString("itemCode"); /* BEG code */
            System.out.println("begCode  ::   "+ begCode);        
            
             String userName = rules.getAsString("preferred_username");
            System.out.println("username   ::   "+ userName);         
            String userCode = QwandaUtils.getBaseEntityCodeForUserName(userName, tokenString);
            System.out.println("usercode   ::   "+ userCode);
            String userFullName= MergeUtil.getFullName(userCode, tokenString);
            System.out.println("user fullName   ::   "+ userFullName);

            /* BEG code is the job, quoter is making offer on */
            if(begCode != null) {
            			
                /* Create Offer BE */
                    BaseEntity offer = QwandaUtils.createBaseEntityByCode(QwandaUtils.getUniqueId(userCode , null, "OFR", tokenString ), "Offer", qwandaServiceUrl, tokenString);
                    RulesUtils.ruleLogger("OFFER Base Entity", offer);
                    /* Get Offer Code */
                    String offerCode= offer.getCode();
                    System.out.println("OFFER CODE   ::   "+offerCode);
            
                /* Save attributes for OFFER as answer */
                    Answer offercode = new Answer(userCode, offerCode, "PRI_OFFER_CODE", offerCode);
                    Answer quoterCode = new Answer(userCode, offerCode, "PRI_QUOTER_CODE", userCode);
                    Answer quoterUname = new Answer(userCode, offerCode, "PRI_QUOTER_USERNAME", userName);
                    Answer quoterFullName = new Answer(userCode, offerCode, "PRI_QUOTER_FULLNAME", userFullName);
                    Answer jobCode = new Answer(userCode, offerCode, "PRI_BEG_CODE", begCode);
                    
                    List<Answer> answerList = new ArrayList<Answer>();	
                    answerList.add(offercode);
                    answerList.add(quoterCode);
                    answerList.add(quoterUname);
                    answerList.add(quoterFullName);
                    answerList.add(jobCode);

                    /* save attributes */
                    int i=1;
                    for (Answer answer : answerList) {
                        System.out.println("Answer      " + i + "::   " + answer.toString());               
                        String result= QwandaUtils.apiPostEntity(qwandaServiceUrl + "/qwanda/answers",
                                gson1.toJson(answer), tokenString);
                                System.out.println("Result      " + i + "::   " + result );
                        i++;                    
                    }                              
                /*get OFFER QUESTION GROUP */
                    JsonObject offerGrp = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl + "/qwanda/baseentitys/" + userCode + "/asks2/QUE_OFFER_DETAILS_GRP/" + offerCode, tokenString));
                    RulesUtils.ruleLogger("Make offer Questions", offerGrp);
                     /* publish QUESTIONS */
                        offerGrp.put("token", tokenString);					
                        rules.getEventBus().publish("cmds",  offerGrp); 
            }
        }

        /* sending cmd FORM_VIEW to display Questions */
            QCmdMessage cmdFormView = new QCmdMessage("CMD_VIEW", "FORM_VIEW");
            JsonObject formViewJson = new JsonObject().mapFrom(cmdFormView);
            formViewJson.put("root", "QUE_OFFER_DETAILS_GRP");       
            RulesUtils.ruleLogger("Form View Cmd", formViewJson);
            formViewJson.put("token", tokenString);
            rules.getEventBus().publish("cmds", formViewJson);

        RulesUtils.footer(drools.getRule().getName());
end