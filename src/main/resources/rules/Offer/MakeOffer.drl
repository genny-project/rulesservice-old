package com.sample;

import org.apache.commons.lang3.StringUtils;

import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QMessage.MessageData;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import io.vertx.rxjava.core.eventbus.EventBus;
import io.vertx.core.buffer.Buffer;
import com.google.gson.Gson;
import life.genny.qwanda.Answer;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwandautils.KeycloakUtils;
import life.genny.qwandautils.MergeUtil;
import life.genny.qwandautils.QwandaUtils;
import life.genny.qwandautils.MessageUtils;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.Ask;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.message.QMSGMessage;
import life.genny.qwanda.message.QBaseMSGMessageType;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;

import java.lang.reflect.Type;
import java.util.Map;
import java.util.Set;
import java.util.List;
import java.util.ArrayList;
import java.time.LocalDateTime;
import java.time.ZonedDateTime;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializationContext;
import com.google.gson.FieldNamingPolicy;
import io.vertx.core.json.JsonObject;
import io.vertx.core.json.JsonArray;
import java.time.format.DateTimeFormatter;
import life.genny.qwanda.DateTimeDeserializer;
import life.genny.qwanda.entity.User;
import life.genny.qwanda.Link;


rule "Make Offer"

    when
        $m : QEventMessage( event_type == "BTN_CLICK" && data.code == "BTN_MAKE_OFFER")
        bus: EventBus()
        $user: User(realm != null )
        $map : Map($value: this["token"] != null)
        $map1 : Map($value1: this["realm"] != null)
    then

        System.out.println(QwandaUtils.executeRuleLogger("Make Offer"));
        /* Prepare GSON Deserialization */
            Gson gson = new GsonBuilder()
                .registerTypeAdapter(LocalDateTime.class, new JsonDeserializer<LocalDateTime>() {
                    @Override
                    public LocalDateTime deserialize(final JsonElement json, final Type type,
                        final JsonDeserializationContext jsonDeserializationContext)
                        throws JsonParseException {
                    return LocalDateTime.parse(json.getAsJsonPrimitive().getAsString(), DateTimeFormatter.ISO_LOCAL_DATE_TIME);
                    }

                    public JsonElement serialize(final LocalDateTime date, final Type typeOfSrc,
                        final JsonSerializationContext context) {
                    return new JsonPrimitive(date.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME)); 
                    }
                }).create();
            Gson gson1 = new Gson();
            GsonBuilder gsonBuilder = new GsonBuilder();
            gsonBuilder.registerTypeAdapter(LocalDateTime.class, new DateTimeDeserializer());
            gson1 = gsonBuilder.create();
        
        
        /* Prepare Token & qwandaServiceUrl */
            String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
            String tokenString = (String)$map.get("token");   
        
        /* retrieve jsonObj's values sent on data.value */
        String data = $m.getData().getValue();
        if(data != null) {

            JsonObject dataJson = new JsonObject(data);
            String hint = dataJson.getString("hint");
            String begCode = dataJson.getString("itemCode"); /* BEG_X .... */
            String userCode = $user.getuCode();
            String userName = $user.getUname();
            String linkCode= "LNK_BEG";

            /* BEG code is the job, quoter is making offer on */
            if(begCode != null) {
                /* Create Offer BE */
                    BaseEntity offer = QwandaUtils.createBaseEntityByCode(QwandaUtils.getUniqueId( userCode, null, "OFR", tokenString ), "Offer", qwandaServiceUrl, tokenString);
                    System.out.println("------------------------------------------------------------------------\n");
                    System.out.println("OFFER BASE ENTITY   ::   "+offer.toString());  
                    System.out.println("------------------------------------------------------------------------");

                    String offerCode= offer.getCode();
                    System.out.println("OFFER CODE   ::   "+offerCode);
            
                /* Save attributes for OFFER as answer           */
                    Answer offercode = new Answer(userCode, offerCode, "PRI_OFFER_CODE", offerCode);
                    Answer quoterCode = new Answer(userCode, offerCode, "PRI_QUOTER_CODE", userCode);
                    Answer quoterUname = new Answer(userCode, offerCode, "PRI_QUOTER_USERNAME", userName);
                    Answer jobCode = new Answer(userCode, offerCode, "PRI_BEG_CODE", begCode);
                    
                    List<Answer> answerList = new ArrayList<Answer>();	
                    answerList.add(offercode);
                    answerList.add(quoterCode);
                    answerList.add(quoterUname);
                    answerList.add(jobCode);

                    /* save attributes */
                    int i=1;
                    for (Answer answer : answerList) {
                        System.out.println("Answer      " + i + "::   " + answer.toString());               
                        String result= QwandaUtils.apiPostEntity(qwandaServiceUrl + "/qwanda/answers",
                                gson1.toJson(answer), tokenString);
                                System.out.println("Result      " + i + "::   " + result );
                        i++;
                        
                    }         
                
                if(offer != null) {
                    /* get OFFER QUESTION GROUP */
                    JsonObject offerGrp = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl + "/qwanda/baseentitys/" + $user.getuCode() + "/asks2/QUE_OFFER_DETAILS_GRP/" + offerCode, tokenString));
                    System.out.println("------------------------------------------------------------------------");
                    System.out.println("OFFER QUESTION GROUP   ::   "+ offerGrp.toString());	
                    System.out.println("------------------------------------------------------------------------");	
                    
                    /* publish QUESTIONS */
                    offerGrp.put("token", tokenString);					
                    bus.publish("cmds",  offerGrp);
                }
            }
        }

        /* sending cmd FORM_VIEW */
        QCmdMessage cmdFormView = new QCmdMessage("CMD_VIEW","FORM_VIEW");
        JsonObject formViewJson = new JsonObject().mapFrom(cmdFormView);
        formViewJson.put("root", "QUE_OFFER_DETAILS_GRP");
        
        System.out.println("------------------------------------------------------------------------");
        System.out.println("FORM VIEW   ::   " + formViewJson.toString());
        System.out.println("------------------------------------------------------------------------");
        
        formViewJson.put("token", tokenString);
        bus.publish("cmds", formViewJson);

        System.out.println(QwandaUtils.terminateRuleLogger("Make Offer"));
end

