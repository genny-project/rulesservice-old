 package com.sample;

 import org.apache.commons.lang3.StringUtils;

 import life.genny.qwanda.message.QEventMessage;
 import life.genny.qwanda.message.QMessage.MessageData;
 import life.genny.qwanda.message.QCmdMessage;
 import life.genny.qwanda.message.QDataBaseEntityMessage;
 import io.vertx.rxjava.core.eventbus.EventBus;
 import io.vertx.core.buffer.Buffer;
 import com.google.gson.Gson;
 import life.genny.qwanda.Answer;
 import life.genny.qwanda.message.QDataAnswerMessage;
 import life.genny.qwandautils.KeycloakUtils;
 import life.genny.qwandautils.QwandaUtils;
 import life.genny.qwandautils.MessageUtils;
 import life.genny.qwanda.message.QDataAskMessage;
 import life.genny.qwanda.message.QCmdMessage;
 import life.genny.qwanda.Ask;
 import life.genny.qwanda.entity.BaseEntity;
 import life.genny.qwanda.message.QMSGMessage;
 import life.genny.qwanda.message.QBaseMSGMessageType;

 import java.lang.reflect.Type;
 import java.util.Map;
 import java.util.Set;
 import java.time.LocalDateTime;
 import java.time.ZonedDateTime;
 import com.google.gson.GsonBuilder;
 import com.google.gson.JsonDeserializationContext;
 import com.google.gson.JsonDeserializer;
 import com.google.gson.JsonElement;
 import com.google.gson.JsonParseException;
 import com.google.gson.JsonPrimitive;
 import com.google.gson.JsonSerializationContext;
 import com.google.gson.FieldNamingPolicy;
 import io.vertx.core.json.JsonObject;
 import io.vertx.core.json.JsonArray;
 import java.time.format.DateTimeFormatter;
 import life.genny.qwanda.DateTimeDeserializer;
 import life.genny.qwanda.entity.User;
 import life.genny.qwanda.Link;


 rule "Send Updated Link"
     agenda-group "update"
     when    
         bus: EventBus()
         $user: User(realm != null )
         $map : Map($value: this["token"] != null)
         $offerFact: Offer(begCode != null)
     then
         System.out.println(QwandaUtils.executeRuleLogger("Send Updated Link"));
         /* Prepare Token & qwandaServiceUrl */
             String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
             String tokenString = (String)$map.get("token");   

         /* Sending updated link of BEG */
             String begCode= $offerFact.getBegCode();
             String linkCode = $offerFact.getLinkCode();
             JsonArray updatedLink = new JsonArray(QwandaUtils.apiGet(qwandaServiceUrl + "/qwanda/entityentitys/" + begCode + "/linkcodes/" + linkCode + "/children", tokenString));
        
         /* Creating a data msg */
             JsonObject newLink = new JsonObject();
             newLink.put("msg_type", "DATA_MSG");
             newLink.put("data_type", "LINK_CHANGE");
             newLink.put("items", updatedLink);
             System.out.println("------------------------------------------------------------------------");
             System.out.println("Updated Link   ::  "+newLink.toString());
             System.out.println("------------------------------------------------------------------------");
         /* publish new link data */
             newLink.put("token", tokenString );
             bus.publish("cmds", newLink);
         System.out.println(QwandaUtils.terminateRuleLogger("Send Updated Link"));
 end

