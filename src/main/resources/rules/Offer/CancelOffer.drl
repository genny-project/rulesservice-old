package life.genny.rules;

import life.genny.rules.RulesUtils;
import life.genny.rules.QRules;
import life.genny.qwandautils.MergeUtil;
import life.genny.qwandautils.QwandaUtils;
import life.genny.qwandautils.MessageUtils;
import life.genny.qwandautils.MergeUtil;
import life.genny.qwandautils.KeycloakUtils;
import org.apache.commons.lang3.StringUtils;

import life.genny.qwanda.Answer;
import life.genny.qwanda.Ask;
import life.genny.qwanda.Link;
import life.genny.qwanda.DateTimeDeserializer;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.entity.User;

import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QMessage.MessageData;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QEventBtnClickMessage;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwanda.message.QMSGMessage;
import life.genny.qwanda.message.QBaseMSGMessageType;

import io.vertx.rxjava.core.eventbus.EventBus;
import io.vertx.core.buffer.Buffer;
import io.vertx.core.json.JsonObject;
import io.vertx.core.json.JsonArray;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializationContext;
import com.google.gson.FieldNamingPolicy;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;

import java.lang.reflect.Type;
import java.time.LocalDateTime;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;

rule "Cancel Offer"
    when
        $m : QEventBtnClickMessage( event_type == "BTN_CLICK" && data.code == "BTN_CANCEL_OFFER")
        rules: QRules()
    then
        RulesUtils.header(drools.getRule().getName());
        /* Prepare GSON Deserialization */
            Gson gson = new GsonBuilder()
            .registerTypeAdapter(LocalDateTime.class, new JsonDeserializer<LocalDateTime>() {
                @Override
                public LocalDateTime deserialize(final JsonElement json, final Type type,
                    final JsonDeserializationContext jsonDeserializationContext)
                    throws JsonParseException {
                return LocalDateTime.parse(json.getAsJsonPrimitive().getAsString(), DateTimeFormatter.ISO_LOCAL_DATE_TIME);
                }

                public JsonElement serialize(final LocalDateTime date, final Type typeOfSrc,
                    final JsonSerializationContext context) {
                return new JsonPrimitive(date.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME)); 
                }
            }).create();
            Gson gson1 = new Gson();
            GsonBuilder gsonBuilder = new GsonBuilder();
            gsonBuilder.registerTypeAdapter(LocalDateTime.class, new DateTimeDeserializer());
            gson1 = gsonBuilder.create();
              
        /* Prepare Token & qwandaServiceUrl */
            String qwandaServiceUrl = rules.getQwandaServiceUrl();
            String tokenString = rules.getToken();  
                 
        /* Get offerCode, username, userCode, userFullName */
            String offerCode = $m.getItemCode();
            System.out.println("offerCode  ::   "+ offerCode);                    
            String userName = rules.getAsString("preferred_username");
            System.out.println("username   ::   "+ userName);                 
            String userCode = QwandaUtils.getBaseEntityCodeForUserName(userName, tokenString);
            System.out.println("usercode   ::   "+ userCode);
            String userFullName= MergeUtil.getFullName(userCode, tokenString);
            System.out.println("user fullName   ::   "+ userFullName);
        
            String linkCode= "LNK_BEG";
            String linkOffer= "OFFER";
            String linkQuoter= "QUOTER";

        /* GET attributes of the OFFER that's being declined */
            JsonArray offerBe = new JsonArray(QwandaUtils.apiGet(qwandaServiceUrl + "/qwanda/baseentitys/" + offerCode + "/attributes", tokenString));
            RulesUtils.ruleLogger("OFFER Base Entity", offerBe);
            
            Map<String, String> map = new HashMap<>();
            /* loop to GET attributeCodes and VALUE */
            for(Object obj : offerBe) {
                JsonObject offerObj = (JsonObject) obj;
                String attributeCode = offerObj.getString("attributeCode");
                String attributeValue = offerObj.getString("valueString");
                map.put(attributeCode, attributeValue); /* PUT in map */

            }
            System.out.println("------------------------------------------------------------------------");
            System.out.println("MAP DATA   ::   " + map);
            System.out.println("------------------------------------------------------------------------");
            
            String begCode= map.get("PRI_BEG_CODE");

            System.out.println("------------------------------------------------------------------------");
            System.out.println("BEG CODE          ::   " + begCode);
            System.out.println("------------------------------------------------------------------------");

            /* Update the number of offers for BEG */ 
            Integer offerCount = 0;
            String offerCountString= MergeUtil.getAttrValue(begCode, "PRI_OFFER_COUNT", tokenString);
            if(offerCountString == null) { 
                offerCount = 0;
            }else {                 
                offerCount = Integer.parseInt(offerCountString);
                offerCount = offerCount - 1;
                System.out.println("Offer Count is   ::   " + offerCount);
            }

            Answer offerCountAnswer = new Answer(begCode, begCode, "PRI_OFFER_COUNT", offerCount.toString());
            String result= QwandaUtils.apiPostEntity(qwandaServiceUrl + "/qwanda/answers", gson1.toJson(offerCountAnswer), tokenString);               

        /* Update link between BEG and OFFER to weight= 0 */
            System.out.println("UPDATING weight OF LINK BETWEEN          ::   " + begCode + "  &  " + offerCode);
            Link link = new Link( begCode, offerCode, linkCode, linkOffer);
            link.setWeight(0.0);
            String output1 = QwandaUtils.apiPutEntity(qwandaServiceUrl + "/qwanda/links", gson.toJson(link),tokenString);
        
        /* Sending updated link of BEG */
            JsonArray updatedLink1 = new JsonArray(QwandaUtils.apiGet(qwandaServiceUrl + "/qwanda/entityentitys/" + begCode + "/linkcodes/" + linkCode + "/children", tokenString));
            /* Creating a data msg */
            JsonObject newLink1 = new JsonObject();
            newLink1.put("msg_type", "DATA_MSG");
            newLink1.put("data_type", "LINK_CHANGE");
            newLink1.put("items", updatedLink1);

            RulesUtils.ruleLogger("Updated Link of BEG", newLink1);
            /* publish new link data */
            newLink1.put("token", tokenString );
            rules.publish("cmds", newLink1);

        /* Sending message to QUOTER */
            String templateCode = "MSG_CH40_CANCEL_OFFER";
            String recipient = "OWNER";
            JsonObject jsonMessage = MessageUtils.prepareSMSTemplate(templateCode, begCode, recipient, null, tokenString);
            rules.publish("messages", jsonMessage);
    
        RulesUtils.footer(drools.getRule().getName());
end


