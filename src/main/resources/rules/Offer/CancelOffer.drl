package com.sample;

import org.apache.commons.lang3.StringUtils;

import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QMessage.MessageData;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import io.vertx.rxjava.core.eventbus.EventBus;
import io.vertx.core.buffer.Buffer;
import com.google.gson.Gson;
import life.genny.qwanda.Answer;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwandautils.KeycloakUtils;
import life.genny.qwandautils.MergeUtil;
import life.genny.qwandautils.QwandaUtils;
import life.genny.qwandautils.MessageUtils;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.Ask;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.message.QMSGMessage;
import life.genny.qwanda.message.QBaseMSGMessageType;

import java.lang.reflect.Type;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
import java.time.LocalDateTime;
import java.time.ZonedDateTime;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializationContext;
import com.google.gson.FieldNamingPolicy;
import io.vertx.core.json.JsonObject;
import io.vertx.core.json.JsonArray;
import java.time.format.DateTimeFormatter;
import life.genny.qwanda.DateTimeDeserializer;
import life.genny.qwanda.entity.User;
import life.genny.qwanda.Link;

rule "Cancel Offer"
    when
        $m : QEventMessage( event_type == "BTN_CLICK" && data.code == "BTN_CANCEL_OFFER")
        bus: EventBus()
        $user: User(realm != null )
        $map : Map($value: this["token"] != null)
        $map1 : Map($value1: this["realm"] != null)
    then
        System.out.println(QwandaUtils.executeRuleLogger("Cancel Offer"));
        /* Prepare GSON Deserialization */
            Gson gson = new GsonBuilder()
            .registerTypeAdapter(LocalDateTime.class, new JsonDeserializer<LocalDateTime>() {
                @Override
                public LocalDateTime deserialize(final JsonElement json, final Type type,
                    final JsonDeserializationContext jsonDeserializationContext)
                    throws JsonParseException {
                return LocalDateTime.parse(json.getAsJsonPrimitive().getAsString(), DateTimeFormatter.ISO_LOCAL_DATE_TIME);
                }

                public JsonElement serialize(final LocalDateTime date, final Type typeOfSrc,
                    final JsonSerializationContext context) {
                return new JsonPrimitive(date.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME)); 
                }
            }).create();
              
        /* Prepare Token & qwandaServiceUrl */
            String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
            String tokenString = (String)$map.get("token");   
        
        /* retrieve jsonObj's values sent on data.value */
        String data = $m.getData().getValue();
        if(data != null) {
            JsonObject dataJson = new JsonObject(data);
            String offerCode = dataJson.getString("itemCode"); /* OFFER code */
            String userCode = $user.getuCode();
            String linkCode= "LNK_BEG";
            String linkValue= "OFFER";

            /* GET attributes of the OFFER that's being declined */
                JsonArray offerBe = new JsonArray(QwandaUtils.apiGet(qwandaServiceUrl + "/qwanda/baseentitys/" + offerCode + "/attributes", tokenString));
                System.out.println("------------------------------------------------------------------------");
                System.out.println("OFEER DATA   ::   " + offerBe.toString());
                System.out.println("------------------------------------------------------------------------");
                
                Map<String, String> map = new HashMap<>();
                /* loop to GET attributeCodes and VALUE */
                for(Object obj : offerBe) {
                    JsonObject offerObj = (JsonObject) obj;
                    String attributeCode = offerObj.getString("attributeCode");
                    String attributeValue = offerObj.getString("valueString");
                    map.put(attributeCode, attributeValue); /* PUT in map */

                }
                System.out.println("------------------------------------------------------------------------");
                System.out.println("MAP DATA   ::   " + map);
                System.out.println("------------------------------------------------------------------------");
                
                String begCode= map.get("PRI_BEG_CODE");

                System.out.println("------------------------------------------------------------------------");
                System.out.println("BEG CODE          ::   " + begCode);
                System.out.println("------------------------------------------------------------------------");


            /* Update link between BEG and OFFER to weight= 0 */
                System.out.println("UPDATING weight OF LINK BETWEEN          ::   " + begCode + "  &  " + offerCode);
                Link link = new Link( begCode, offerCode, linkCode, linkValue);
                link.setWeight(0.0);
                String output1 = QwandaUtils.apiPutEntity(qwandaServiceUrl + "/qwanda/links", gson.toJson(link),tokenString);
            
            /* Sending updated link of BEG */
                JsonArray updatedLink1 = new JsonArray(QwandaUtils.apiGet(qwandaServiceUrl + "/qwanda/entityentitys/" + begCode + "/linkcodes/" + linkCode + "/children", tokenString));
                /* Creating a data msg */
                JsonObject newLink1 = new JsonObject();
                newLink1.put("msg_type", "DATA_MSG");
                newLink1.put("data_type", "LINK_CHANGE");
                newLink1.put("items", updatedLink1);

                System.out.println("------------------------------------------------------------------------");
                System.out.println("Updated Link   ::  "+newLink1.toString());
                System.out.println("------------------------------------------------------------------------");
                /* publish new link data */
                newLink1.put("token", tokenString );
                bus.publish("cmds", newLink1);

            /* Sending message to QUOTER */
                String templateCode = "MSG_CH40_CANCEL_OFFER";
                String recipient = "OWNER";
                JsonObject jsonMessage = MessageUtils.prepareSMSTemplate(templateCode, begCode, recipient, null, tokenString);
                bus.publish("messages", jsonMessage);
        }
        System.out.println(QwandaUtils.terminateRuleLogger("Cancel Offer"));
end


