package life.genny.rules;

import life.genny.rules.RulesUtils;
import life.genny.rules.QRules;
import life.genny.qwandautils.MergeUtil;
import life.genny.qwandautils.QwandaUtils;
import life.genny.qwandautils.MessageUtils;
import life.genny.qwandautils.MergeUtil;
import life.genny.qwandautils.KeycloakUtils;
import org.apache.commons.lang3.StringUtils;

import life.genny.qwanda.Answer;
import life.genny.qwanda.Ask;
import life.genny.qwanda.Link;
import life.genny.qwanda.DateTimeDeserializer;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.entity.User;

import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QMessage.MessageData;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QEventBtnClickMessage;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwanda.message.QMSGMessage;
import life.genny.qwanda.message.QBaseMSGMessageType;

import io.vertx.rxjava.core.eventbus.EventBus;
import io.vertx.core.buffer.Buffer;
import io.vertx.core.json.JsonObject;
import io.vertx.core.json.JsonArray;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializationContext;
import com.google.gson.FieldNamingPolicy;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;

import java.lang.reflect.Type;
import java.time.LocalDateTime;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;


rule "Accept Job"
    no-loop true
    when
        $m : QEventBtnClickMessage( event_type == "BTN_CLICK" && data.code == "BTN_ACCEPT_JOB")
        rules: QRules()
    then
        RulesUtils.header(drools.getRule().getName());
        /* Prepare GSON Deserialization */
            Gson gson1 = new Gson();
            GsonBuilder gsonBuilder = new GsonBuilder();
            gsonBuilder.registerTypeAdapter(LocalDateTime.class, new DateTimeDeserializer());
            gson1 = gsonBuilder.create();
        /* Prepare Token & qwandaServiceUrl */
            String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
            String tokenString = rules.getToken();

            String begCode = $m.getItemCode();
            System.out.println("begCode  ::   "+ begCode);        
            
            String userName = rules.getAsString("preferred_username");
            System.out.println("username   ::   "+ userName);                 
            String userCode = QwandaUtils.getBaseEntityCodeForUserName(userName, tokenString);
            System.out.println("usercode   ::   "+ userCode);
            String userFullName= MergeUtil.getFullName(userCode, tokenString);
            System.out.println("user fullName   ::   "+ userFullName);
        
            String linkCode= "LNK_BEG";
            String linkOffer= "OFFER";
            String linkQuoter= "QUOTER";

            /* get BEG PRICE */           
                String begPrice = MergeUtil.getAttrValue(begCode, "PRI_PRICE", tokenString);       
                System.out.println("BEG PRICE   ::   "+begPrice);
            /* Create Offer BE */
                BaseEntity offer = QwandaUtils.createBaseEntityByCode(QwandaUtils.getUniqueId(userCode , null, "OFR", tokenString ), "Offer", qwandaServiceUrl, tokenString);
                RulesUtils.ruleLogger("OFFER Base Entity", offer);

                String offerCode= offer.getCode();
                System.out.println("OFFER CODE   ::   "+offerCode);
            
            /* Save attributes for OFFER as answer          */
                Answer price = new Answer(userCode, offerCode, "PRI_OFFER_PRICE", begPrice);
                Answer offercode = new Answer(userCode, offerCode, "PRI_OFFER_CODE", offerCode);
                Answer quoterCode = new Answer(userCode, offerCode, "PRI_QUOTER_CODE", userCode);
                Answer quoterUname = new Answer(userCode, offerCode, "PRI_QUOTER_USERNAME", userName);
                Answer quoterFullName = new Answer(userCode, offerCode, "PRI_QUOTER_FULLNAME", userFullName);
                Answer jobCode = new Answer(userCode, offerCode, "PRI_BEG_CODE", begCode);
                
                List<Answer> answerList = new ArrayList<Answer>();	
                answerList.add(price);
                answerList.add(offercode);
                answerList.add(quoterCode);
                answerList.add(quoterUname);
                answerList.add(quoterFullName);
                answerList.add(jobCode);

                /* save attributes */
                int i=1;
                for (Answer answer : answerList) {
                    System.out.println("Answer      " + i + "::   " + answer.toString());               
                    String result= QwandaUtils.apiPostEntity(qwandaServiceUrl + "/qwanda/answers",
                            gson1.toJson(answer), tokenString);
                            System.out.println("Result      " + i + "::   " + result );
                    i++;
                    
                } 

             /* Update the number of offers for BEG */ 
                Integer offerCount = 0;
                String offerCountString= MergeUtil.getAttrValue(begCode, "PRI_OFFER_COUNT", tokenString);
                if(offerCountString == null) { 
                    offerCount = 1;
                }else {                 
                    offerCount = Integer.parseInt(offerCountString);
                    offerCount = offerCount + 1;
                    System.out.println("Offer Count is   ::   " + offerCount);
                }

                Answer offerCountAnswer = new Answer(begCode, begCode, "PRI_OFFER_COUNT", offerCount.toString());
                String result= QwandaUtils.apiPostEntity(qwandaServiceUrl + "/qwanda/answers", gson1.toJson(offerCountAnswer), tokenString);               

            /* link BEG and OFFER BE || OFFER */
                QwandaUtils.createLink(begCode, offerCode, linkCode, linkOffer, 1.0, tokenString);
            /* link BEG and QUOTER BE || QUOTER */
                QwandaUtils.createLink(begCode, userCode, linkCode, linkQuoter, 1.0, tokenString);       
            /* SEND OFFER BE    */
                JsonObject offerObj = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/"+ begCode +"/linkcodes/"+ linkCode +"/attributes?PRI_OFFER_CODE=" + offerCode, tokenString));
                RulesUtils.ruleLogger("Updated OFFER Base Entity", offerObj);
                offerObj.put("token", tokenString);      
                rules.getEventBus().publish("cmds", offerObj);

            /* SEND QUOTER BE */
                JsonObject quoterObj = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/"+ begCode +"/linkcodes/"+ linkCode +"/attributes?PRI_USERNAME=" + userCode, tokenString));
                RulesUtils.ruleLogger("QUOTER Base Entity", quoterObj);
                quoterObj.put("token", tokenString);      
                rules.getEventBus().publish("cmds", quoterObj);
            /* Sending updated link of BEG */
                JsonArray updatedLink = new JsonArray(QwandaUtils.apiGet(qwandaServiceUrl + "/qwanda/entityentitys/" + begCode + "/linkcodes/" + linkCode + "/children", tokenString));
                /* Creating a data msg */
                    JsonObject newLink = new JsonObject();
                    newLink.put("msg_type", "DATA_MSG");
                    newLink.put("data_type", "LINK_CHANGE");
                    newLink.put("items", updatedLink);
                    RulesUtils.ruleLogger("Updated Link of BEG", newLink);
                /* publish new link data */
                    newLink.put("token", tokenString );
                    rules.getEventBus().publish("cmds", newLink);

            /* Sending message to BEG OWNER */
                rules.set("begCode", begCode);
                rules.set("recipient", "OWNER");
                rules.set("templateCode", "MSG_CH40_ACCEPT_OFFER");           
                rules.setState("SEND_MESSAGE");       
                update(rules); 
                drools.setFocus("message"); 
        /* Send BUCKETVIEW Cmd */
        drools.setFocus("bucketview"); 
        RulesUtils.footer(drools.getRule().getName());
end
