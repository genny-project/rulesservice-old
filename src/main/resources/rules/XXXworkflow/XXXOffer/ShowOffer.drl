package com.sample;

import org.apache.commons.lang3.StringUtils;

import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QMessage.MessageData;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import io.vertx.rxjava.core.eventbus.EventBus;
import io.vertx.core.buffer.Buffer;
import com.google.gson.Gson;
import life.genny.qwanda.Answer;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwandautils.KeycloakUtils;
import life.genny.qwandautils.QwandaUtils;
import life.genny.rules.RulesUtils;
import life.genny.qwandautils.MessageUtils;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.Ask;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.message.QMSGMessage;
import life.genny.qwanda.message.QBaseMSGMessageType;

import java.lang.reflect.Type;
import java.util.Map;
import java.util.Set;
import java.time.LocalDateTime;
import java.time.ZonedDateTime;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializationContext;
import com.google.gson.FieldNamingPolicy;
import io.vertx.core.json.JsonObject;
import io.vertx.core.json.JsonArray;
import java.time.format.DateTimeFormatter;
import life.genny.qwanda.DateTimeDeserializer;
import life.genny.qwanda.entity.User;
import life.genny.qwanda.Link;



rule "Show Offer Details"
	when
		$m : QEventMessage( event_type == "BTN_CLICK" && data.code == "BTN_SHOW_OFFER")
        bus: EventBus()
        $user: User(realm != null )
        $map : Map($value: this["token"] != null)
        $map1 : Map($value1: this["realm"] != null)
	then
		System.out.println(QwandaUtils.executeRuleLogger("Show Offer Details"));
        /* Prepare Token & qwandaServiceUrl */
        String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
        String tokenString = (String)$map.get("token");   

	    String data = $m.getData().getValue();
		if(data != null) {
	
			JsonObject dataJson = new JsonObject(data);	
			String hint = dataJson.getString("hint"); /* BEG_XXX */
			String baseEntityCode = dataJson.getString("itemCode"); /* OFR_XXX .... */

			if(baseEntityCode != null) {
			
				/* we send the BE */
				JsonObject be = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/" + baseEntityCode, tokenString));
				JsonArray array = new JsonArray();
				array.add(be);
				
		        JsonObject cmdBe = new JsonObject();
		        cmdBe.put("token", $value);
		        cmdBe.put("msg_type", "DATA_MSG");
		        cmdBe.put("data_type", "BaseEntity");
		        cmdBe.put("items", array);
		        bus.publish("cmds", cmdBe); 
				
				/* we grab the layout and send it to FE */
				JsonObject sublayout = new JsonObject(QwandaUtils.apiGet(RulesUtils.getLayoutCacheURL("accept_offer.json"), null));
			    	QCmdMessage messageSublayout = new QCmdMessage("CMD_SUBLAYOUT","accept-offer");
			    JsonObject cmdSubLayout = new JsonObject().mapFrom(messageSublayout);
			    cmdSubLayout.put("items", sublayout);
			    cmdSubLayout.put("root", baseEntityCode);
			    cmdSubLayout.put("token", $value);
			    
                /* Publish it to the EventBus */
			    bus.publish("cmds", cmdSubLayout);
			}	
		}
        System.out.println(QwandaUtils.terminateRuleLogger("Show Offer Details"));
	
end
