package com.sample

import org.apache.commons.lang3.StringUtils;

import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QMessage.MessageData;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import io.vertx.rxjava.core.eventbus.EventBus;
import io.vertx.core.buffer.Buffer;
import com.google.gson.Gson;
import life.genny.qwanda.Answer;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwandautils.KeycloakUtils;
import life.genny.qwandautils.QwandaUtils;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.Ask;
import life.genny.qwanda.entity.BaseEntity;

import java.lang.reflect.Type;
import java.util.Map;
import java.util.Set;
import java.time.LocalDateTime;
import java.time.ZonedDateTime;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializationContext;
import com.google.gson.FieldNamingPolicy;
import io.vertx.core.json.JsonObject;
import io.vertx.core.json.JsonArray;
import java.time.format.DateTimeFormatter;
import life.genny.qwanda.DateTimeDeserializer;
import life.genny.qwanda.entity.User;

// global variables for color logs
global java.lang.String LOG_RESET;
global java.lang.String LOG_RED;
global java.lang.String LOG_GREEN;
global java.lang.String LOG_YELLOW;
global java.lang.String LOG_BLUE;
global java.lang.String LOG_PURPLE;
global java.lang.String LOG_CYAN;
global java.lang.String LOG_WHITE;
global java.lang.String LOG_BOLD;

rule "Clear User Attribute"
	when
		$m : QEventMessage( event_type == "BTN_CLICK" && data.code == "BTN_CLEAR" )
		bus: EventBus()
		$user: User(realm != null)
		$map : Map($value: this["token"] != null)    
	then
		System.out.println(LOG_YELLOW + "================================================================================================================================================" + LOG_RESET);
		System.out.println(LOG_GREEN + "RULE EXECUTED      ::   Clear User Attribute " + LOG_RESET);
		
		// Prepare GSON Deserialization
		Gson gson = new GsonBuilder()
			.registerTypeAdapter(LocalDateTime.class, new JsonDeserializer<LocalDateTime>() {
				@Override
				public LocalDateTime deserialize(final JsonElement json, final Type type,
					final JsonDeserializationContext jsonDeserializationContext)
					throws JsonParseException {
				return LocalDateTime.parse(json.getAsJsonPrimitive().getAsString(), DateTimeFormatter.ISO_LOCAL_DATE_TIME);
				}

				public JsonElement serialize(final LocalDateTime date, final Type typeOfSrc,
					final JsonSerializationContext context) {
				return new JsonPrimitive(date.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME)); 
				}
			}).create();
		
		//Prepare Token & qwandaServiceUrl
		String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
		String tokenString = (String)$map.get("token"); 
		
		//Getting PER_USER1 BE and it's attributes
		String userString = QwandaUtils.apiGet(qwandaServiceUrl +"/qwanda/baseentitys/GRP_PEOPLE/linkcodes/LNK_CORE/attributes?PRI_USERNAME=user1", tokenString);
		System.out.println("------------------------------------------------------------------------\n");
		System.out.println("USER BASEENTITY   ::   "+userString.toString());  
		System.out.println("------------------------------------------------------------------------");
		
		// Deserializing to QDataBaseEntityMessage
		QDataBaseEntityMessage beUser = gson.fromJson(userString, QDataBaseEntityMessage.class);
		// set Delete flag to TRUE
		beUser.setDelete(true);
		System.out.println("This is QDataBaseEntityMessage      ::   "+ beUser.toString());
		
		// Convert QDataBaseEntityMessage TO JsonObject
		JsonObject userObj = new JsonObject().mapFrom(beUser);
		userObj.put("token", tokenString);		
		
		System.out.println("User Object with delete flag TRUE   ::   "+ userObj.toString());
		bus.publish("cmds", userObj);
		
		
		 //Getting all Facebook Friends and their attributes
	    String friendString = QwandaUtils.apiGet(qwandaServiceUrl +"/qwanda/baseentitys/PER_USER1/linkcodes/LNK_FRIEND/attributes", tokenString);
	    System.out.println("------------------------------------------------------------------------\n");
	    System.out.println("FACEBOOK FRIEND LIST   ::   "+friendString.toString());  
	    System.out.println("------------------------------------------------------------------------");

		// Deserializing to QDataBaseEntityMessage
		QDataBaseEntityMessage beFriend = gson.fromJson(friendString, QDataBaseEntityMessage.class);
		// set Delete flag to TRUE
		beFriend.setDelete(true);
		System.out.println("This is QDataBaseEntityMessage      ::   "+ beFriend.toString());
		
		// Convert QDataBaseEntityMessage TO JsonObject
		JsonObject friendObj = new JsonObject().mapFrom(beFriend);
		friendObj.put("token", tokenString);		
		
		System.out.println("Friends Object with delete flag TRUE   ::   "+ friendObj.toString());
		bus.publish("cmds", friendObj);

		System.out.println( "\n" + LOG_RED + "RULE TERMINATED    ::   Clear User Attribute " + LOG_RESET);
		System.out.println(LOG_YELLOW + "------------------------------------------------------------------------------------------------------------------------------------------------" + LOG_RESET); 
	end
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

