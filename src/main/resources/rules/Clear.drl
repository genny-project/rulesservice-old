package com.sample

import org.apache.commons.lang3.StringUtils;

import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QMessage.MessageData;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import io.vertx.rxjava.core.eventbus.EventBus;
import io.vertx.core.buffer.Buffer;
import com.google.gson.Gson;
import life.genny.qwanda.Answer;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwandautils.KeycloakUtils;
import life.genny.qwandautils.QwandaUtils;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.Ask;
import life.genny.qwanda.entity.BaseEntity;

import java.lang.reflect.Type;
import java.util.Map;
import java.util.Set;
import java.util.ArrayList;
import java.util.List;

import java.time.LocalDateTime;
import java.time.ZonedDateTime;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializationContext;
import com.google.gson.FieldNamingPolicy;
import io.vertx.core.json.JsonObject;
import io.vertx.core.json.JsonArray;
import java.time.format.DateTimeFormatter;
import life.genny.qwanda.DateTimeDeserializer;
import life.genny.qwanda.entity.User;

// global variables for color logs
global java.lang.String LOG_RESET;
global java.lang.String LOG_RED;
global java.lang.String LOG_GREEN;
global java.lang.String LOG_YELLOW;
global java.lang.String LOG_BLUE;
global java.lang.String LOG_PURPLE;
global java.lang.String LOG_CYAN;
global java.lang.String LOG_WHITE;
global java.lang.String LOG_BOLD;

rule "Clear User Attribute"
	when
		$m : QEventMessage( event_type == "BTN_CLICK" && data.code == "QUE_CLEAR" )
		bus: EventBus()
		$user: User(realm != null)
		$map : Map($value: this["token"] != null)    
	then
		System.out.println(LOG_YELLOW + "================================================================================================================================================" + LOG_RESET);
		System.out.println(LOG_GREEN + "RULE EXECUTED      ::   Clear User Attribute " + LOG_RESET);
		
		// Prepare GSON Deserialization
		Gson gson = new GsonBuilder()
			.registerTypeAdapter(LocalDateTime.class, new JsonDeserializer<LocalDateTime>() {
				@Override
				public LocalDateTime deserialize(final JsonElement json, final Type type,
					final JsonDeserializationContext jsonDeserializationContext)
					throws JsonParseException {
				return LocalDateTime.parse(json.getAsJsonPrimitive().getAsString(), DateTimeFormatter.ISO_LOCAL_DATE_TIME);
				}

				public JsonElement serialize(final LocalDateTime date, final Type typeOfSrc,
					final JsonSerializationContext context) {
				return new JsonPrimitive(date.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME)); 
				}
			}).create();
		
		//Prepare Token & qwandaServiceUrl
		String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
		String tokenString = (String)$map.get("token"); 
		
		// //Getting PER_USER1 BE and it's attributes
		JsonArray userArray = new JsonArray(QwandaUtils.apiGet(qwandaServiceUrl +"/qwanda/baseentitys/PER_USER1/attributes", tokenString));
        System.out.println("------------------------------------------------------------------------\n");
        System.out.println("USER ATTRIBUTES   ::   "+userArray.toString());  
        System.out.println("------------------------------------------------------------------------");
        
		// Initialize lists
        List<Answer> userList = new ArrayList<Answer>();
        List<Answer> primaryList = new ArrayList<Answer>();
        
		// add each attribute obj to userList
        for(Object obj : userArray) {
            Answer ansObj = gson.fromJson(obj.toString(), Answer.class);
			ansObj.setSourceCode("PER_USER1");
			ansObj.setTargetCode("PER_USER1");
            userList.add(ansObj);
        }
        System.out.println("User List   ::   " + userList.toString());
		System.out.println("Length      ::   " + userList.size());
		System.out.println("------------------------------------------------------------------------\n");
        for(Answer answer : userList) {
			
            switch(answer.getAttributeCode()) {
				
				case("PRI_UUID") :
					primaryList.add(answer);
					break;

				case("PRI_FIRSTNAME") :
					primaryList.add(answer);
					break;

				case("PRI_LASTNAME") :
					primaryList.add(answer);
					break;

				case("PRI_EMAIL") :
					primaryList.add(answer);
					break;

				case("PRI_KEYCLOAK_UUID") :
					primaryList.add(answer);
					break;

				case("PRI_FB_BASIC") :
					primaryList.add(answer);
					break;
			}
            
        }
		System.out.println("Primary List    ::   " + primaryList.toString());
		System.out.println("Length          ::   " + primaryList.size());
        System.out.println("------------------------------------------------------------------------\n");

        //Answer[] ansWant = {ans1};
        userList.removeAll(primaryList);
		
		System.out.println("User List after REMOVAL    ::   " + userList.toString());
		System.out.println("Length                     ::   " + userList.size());
        System.out.println("------------------------------------------------------------------------\n");

		Answer[] items = new Answer[ userList.size() ];
        items = userList.toArray(items);

		// Prepare answer msg to be sent
		QDataAnswerMessage msg = new QDataAnswerMessage(items);
        msg.setDelete(true);

		// convert to json to put token
		JsonObject userObj = new JsonObject().mapFrom(msg);

		System.out.println("------------------------------------------------------------------------\n");
	    System.out.println("USER ATTRIBUTES TO DELETE   ::   "+userObj.toString());  
	    System.out.println("------------------------------------------------------------------------");

		userObj.put("token",tokenString);
		bus.publish("cmds", userObj);

		 //Getting all Facebook Friends and their attributes
	    String friendString = QwandaUtils.apiGet(qwandaServiceUrl +"/qwanda/baseentitys/PER_USER1/linkcodes/LNK_FRIEND/attributes", tokenString);
	    System.out.println("------------------------------------------------------------------------\n");
	    System.out.println("FACEBOOK FRIEND LIST   ::   "+friendString.toString());  
	    System.out.println("------------------------------------------------------------------------");

		// Deserializing to QDataBaseEntityMessage
		QDataBaseEntityMessage beFriend = gson.fromJson(friendString, QDataBaseEntityMessage.class);
		// set Delete flag to TRUE
		beFriend.setDelete(true);
		System.out.println("This is QDataBaseEntityMessage      ::   "+ beFriend.toString());
		
		// Convert QDataBaseEntityMessage TO JsonObject
		JsonObject friendObj = new JsonObject().mapFrom(beFriend);
		friendObj.put("token", tokenString);		
		
		System.out.println("Friends Object with delete flag TRUE   ::   "+ friendObj.toString());

		// JsonArray friendArray = friendObj.getJsonArray("items");
		// System.out.println("FRIEND ARRAY      ::   " + friendArray.toString());
		// Link link = new Link("PER_USER1", code, "LNK_FRIEND");
		// QwandaEndpoint.removeLink(link);

		bus.publish("cmds", friendObj);

		System.out.println( "\n" + LOG_RED + "RULE TERMINATED    ::   Clear User Attribute " + LOG_RESET);
		System.out.println(LOG_YELLOW + "------------------------------------------------------------------------------------------------------------------------------------------------" + LOG_RESET); 
	end
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

