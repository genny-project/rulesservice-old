package com.sample;
 
import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QCmdMessage;
import io.vertx.rxjava.core.eventbus.EventBus;
import io.vertx.core.buffer.Buffer;
import com.google.gson.Gson;
import life.genny.qwanda.Answer;
import life.genny.qwanda.message.QDataAnswerMessage;

import life.genny.qwandautils.QwandaUtils;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.qwanda.Ask;

import java.lang.reflect.Type;
import java.util.Map;
import java.time.LocalDateTime;
import java.time.ZonedDateTime;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializationContext;
import com.google.gson.FieldNamingPolicy;
import io.vertx.core.json.JsonObject;
import io.vertx.core.json.JsonArray;
import java.time.format.DateTimeFormatter;
import life.genny.qwanda.DateTimeDeserializer;
import life.genny.rules.QRules;

   
rule "Send Score Board"
    when
        $m : QEventMessage( event_type == "BTN_CLICK" && data.code == "QUE_FB_BASIC")
        bus: EventBus()
        rules: QRules()
    then
        rules.header();
        String userCode = rules.getUser().getCode();
        String tokenString = rules.getToken();
        String qwandaServiceUrl= rules.getQwandaServiceUrl();

        String homeLoanCode = "PRD_HOME_LOAN";
        String holidayCode = "PRD_HOLIDAY";
        String linkCode= "LNK_SCORE";

        String linkHomeloan = "LOAN";
        String linkHoliday = "HOLIDAY";

        /* Check if link exists between USER & PRD_HOME_LOAN */
        Boolean isHomeloan = QwandaUtils.checkIfLinkExistsForTarget(userCode, linkCode , homeLoanCode, tokenString);
        System.out.println("Link Exists ?   ::   "+ isHomeloan);

        /* Creating a link between USER & PRD_HOLIDAY */
        if(!isHomeloan){
            rules.createLink(userCode, homeLoanCode, linkCode, linkHomeloan, 1.0);
        }

        /* Check if link exists between USER & PRD_HOME_LOAN */
        Boolean isHoilday = QwandaUtils.checkIfLinkExistsForTarget(userCode, linkCode , holidayCode, tokenString);
        System.out.println("Link Exists ?   ::   "+ isHoilday);

        /* Creating a link between USER & PRD_HOME_LOAN */
        if(!isHoilday){
            rules.createLink(userCode, holidayCode, linkCode, linkHoliday, 1.0);
        }

        /* Send begs */
        rules.publishBaseEntityByCode(homeLoanCode);
        rules.publishBaseEntityByCode(holidayCode);

        /* Send updated link of User */
            JsonArray updatedLink = new JsonArray(QwandaUtils.apiGet(qwandaServiceUrl + "/qwanda/entityentitys/" + userCode + "/linkcodes/" + linkCode + "/children", tokenString));
            /* Creating a data msg */
            JsonObject newLink = new JsonObject();
            newLink.put("msg_type", "DATA_MSG");
            newLink.put("data_type", "LINK_CHANGE");
            newLink.put("items", updatedLink);
            System.out.println("------------------------------------------------------------------------");
            System.out.println("Updated Link   ::  "+newLink.toString());
            System.out.println("------------------------------------------------------------------------");
            /* publish new link data */
            newLink.put("token", tokenString );
            rules.publish("cmds", newLink);
end
