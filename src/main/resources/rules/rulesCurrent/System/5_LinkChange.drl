package life.genny.rules;


import life.genny.rules.QRules;
import life.genny.qwanda.Link;

import life.genny.qwandautils.QwandaUtils;

import life.genny.qwanda.Answer;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwanda.message.QEventLinkChangeMessage;


rule "Listen Link Change"
ruleflow-group 'LinkChange'
    when
        $m: QEventLinkChangeMessage( event_type == "EVT_LINK_CHANGE" && link != null )
        rules : QRules( isState("STARTED") && (!isState("LINK_CHANGE")) )
     then
      	rules.header();
 		rules.setState("LINK_CHANGE");

 		Link link = $m.getLink();
 		String[] recipientCodes = rules.getRecipientCodes($m);
		rules.println(Arrays.toString(recipientCodes));
 		rules.println("Link "+link);

 	/*	    if (link.getTargetCode().startsWith("BEG_")) {
 		   	 	List<BaseEntity> stakeholders = rules.getBaseEntitysByParentAndLinkCode(link.getTargetCode(),"LNK_BEG", 0, 20, false) ;
 		    		List<String> recipients = new ArrayList<String>();
 		    		for (BaseEntity stakeholder : stakeholders)
 		    		{
 		    			if (stakeholder.getCode().startsWith("PER_")) {
 		    				recipients.add(stakeholder.getCode());
 		    				rules.println("Sending to "+stakeholder.getCode());
 		    			}
 		   		 }

 		   		String[] recipientArray = recipients.toArray(new String[0]);
 		   		rules.publisData($m,recipientArray);
 		   }

 		    rules.sendParentLinks(link.getTargetCode(), link.getAttributeCode());
	*/
		rules.publishData($m,recipientCodes);

   	    rules.footer();

end
