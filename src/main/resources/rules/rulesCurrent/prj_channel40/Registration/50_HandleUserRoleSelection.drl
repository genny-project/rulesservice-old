package life.genny.rules;

import life.genny.rules.RulesUtils;
import life.genny.rules.QRules;
import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.entity.EntityEntity;
import life.genny.qwanda.Answer;
import life.genny.qwanda.attribute.Attribute;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwanda.message.QEventAttributeValueChangeMessage;
import life.genny.qwandautils.KeycloakUtils;
import life.genny.qwandautils.QwandaUtils;
import life.genny.qwandautils.MergeUtil;
import life.genny.rules.RulesUtils;
import life.genny.qwanda.Link;

import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializationContext;
import java.time.LocalDateTime;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;

rule "Save user role to the link with its Company"
    when
        $m: QEventAttributeValueChangeMessage( event_type == "EVT_ATTRIBUTE_VALUE_CHANGE" && QEventAttributeValueChangeMessage.getData().getCode().equals("LNK_USER_ROLE_LISTS") )
        rules: QRules(isState("STARTED") &&  !isState("USER_TYPE_SAVED") )
     then
         rules.header();  
        
         String userCode = rules.getUser().getCode();
         rules.println("The user Code is  ::  " +userCode);
         rules.println("Print QEventAttributeValueChangeMessage  LINK_ROLE_LISTS ::  "+$m.toString());
 
       /*  Collect role code from answer  */
         Answer newAnswer = $m.getAnswer();
         rules.println("Answer from QEventAttributeValueChangeMessage  LINK_ROLE_LISTS ::  "+newAnswer.toString());
         String targetCode = newAnswer.getTargetCode();
         String sourceCode = newAnswer.getSourceCode();
         String roleValue = "";
         
         List<Answer> answers = new ArrayList<Answer>();
         rules.addAttributes($m.getBe());
         Attribute driverAttribute  = RulesUtils.attributeMap.get("PRI_DRIVER");
        Attribute ownerAttribute = RulesUtils.attributeMap.get("PRI_OWNER");
 
         if(newAnswer.getValue().equals("SEL_DRIVER"))
         {
             roleValue = "DRIVER";
             Answer userRole = new Answer(userCode, userCode, "PRI_DRIVER" , "TRUE");
               userRole.setWeight(1.0);
               userRole.setAttribute(driverAttribute);
                $m.getBe().addAnswer(userRole); 
             rules.setState("IS_DRIVER");           

             //rules.publishData(userRole); 
             answers.add(userRole);
             Answer userRoleOwner = new Answer(userCode, userCode, "PRI_OWNER" , "FALSE");       
             userRoleOwner.setWeight(0.0);   
             userRoleOwner.setAttribute(ownerAttribute);  
              $m.getBe().addAnswer(userRoleOwner); 
            //rules.publishData(userRoleOwner); 
            answers.add(userRoleOwner);

             
         }
          if(newAnswer.getValue().equals("SEL_OWNER"))
         {
            roleValue = "OWNER";
            Answer userRole = new Answer(userCode, userCode, "PRI_OWNER" , "TRUE");
            userRole.setWeight(1.0);    
            userRole.setAttribute(ownerAttribute);  
             $m.getBe().addAnswer(userRole);   
            rules.setState("IS_OWNER");       

            //rules.publishData(userRole);
              answers.add(userRole); 
            Answer userRoleDriver = new Answer(userCode, userCode, "PRI_DRIVER" , "FALSE");
            userRoleDriver.setWeight(0.0);
            userRoleDriver.setAttribute(driverAttribute);
             $m.getBe().addAnswer(userRoleDriver);              
            //rules.publishData(userRoleDriver);
             answers.add(userRoleDriver);  

         }
         
         rules.saveAnswers(answers);
         
         String attributeCode = $m.data.getCode();
         rules.println("The target BE code is   ::  " +targetCode);
         rules.println("The source BE code is   ::  " +sourceCode);
         rules.println("The attribute code is   ::  " +attributeCode);
         rules.println("The role type code is   ::  " +newAnswer.getValue());
         rules.println("The role type value is   ::  " +roleValue);
           
       /* Get company code for this user */
        BaseEntity company = rules.getParent(userCode, "LNK_STAFF");
        String companyCode = company.getCode();
       /* Update link with the link Value  */
        rules.println("UPDATING link value OF LINK BETWEEN   ::   " + companyCode + "  &  " + userCode);
        Link updateLink = new Link( companyCode, userCode, "LNK_STAFF", roleValue, (double) 1);
        String result = QwandaUtils.apiPutEntity(rules.getQwandaServiceUrl() + "/qwanda/links", JsonUtils.toJson(updateLink),rules.getToken());
        

        rules.publishBE(rules.getUser());

        
        rules.setState("USER_TYPE_SAVED");
        
        rules.footer();  

end
