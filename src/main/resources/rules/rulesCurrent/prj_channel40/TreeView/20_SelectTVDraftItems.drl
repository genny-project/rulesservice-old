package life.genny.rules;

import life.genny.rules.QRules;


rule "TV_SELECT Individual Draft Jobs"
	   no-loop true
       ruleflow-group 'TV_SELECT'
       salience 8
     when
      rules: QRules( isState("STARTED") && isState("EVENT_TV_SELECT") && isState("PARENT_GRP_DRAFTS") &&
   										  !isState("LOOP_TV_DRAFT_ITEM_DATA_SENT") )
     then

     rules.header();

     drools.setFocus("CreateLoad");
     rules.setState("LOOP_TV_DRAFT_ITEM_DATA_SENT");
     rules.setState("TV_SELECT_RULE_EXECUTED"); /* Need to set this state compulsarily as the default rule
         												 executes based on this state */
     Object jobCodeObj = rules.get("tvSelectValue");
     Object parentCodeObj = rules.get("tvSelectCode");

     if(jobCodeObj != null && parentCodeObj != null){

	     String jobCode = jobCodeObj.toString();
	     String parentCode = parentCodeObj.toString();
	     if (jobCode != null && !jobCode.isEmpty() && parentCode != null && !parentCode.isEmpty()){

		     rules.publishCmd(rules.baseEntity.getBaseEntityByCode(jobCode),"job");

		    /*  Get load for the given job/BEG   */
		      BaseEntity load = rules.baseEntity.getLinkedBaseEntities(jobCode, "LNK_BEG", "LOAD").get(0);
		     rules.publishCmd(load, "load");

		    /*    Getting Post Load Question GRP        */
		     JsonObject qPostLoad = new JsonObject( QwandaUtils.apiGet(rules.getQwandaServiceUrl()+"/qwanda/baseentitys/"+rules.getUser().getCode()+"/asks3/QUE_LOAD_DETAILS_GRP/"+load.getCode(), rules.getToken()));
		     qPostLoad.put("root", "QUE_LOAD_DETAILS_GRP");
		     qPostLoad.put("aliasCode", parentCode);
		     qPostLoad.put("token", rules.getToken());
		     rules.println("QName Json: "+qPostLoad.toString());
		     rules.publish("cmds",qPostLoad);

		     JsonObject qPostJob = new JsonObject( QwandaUtils.apiGet(rules.getQwandaServiceUrl()+"/qwanda/baseentitys/"+rules.getUser().getCode()+"/asks3/QUE_JOB_DETAILS_GRP/"+jobCode, rules.getToken()));
		     qPostJob.put("root", "QUE_JOB_DETAILS_GRP");
		     qPostJob.put("token", rules.getToken());
		     rules.println("QName Json: "+qPostJob.toString());
		     rules.publish("cmds",qPostJob);

		    /*    Sending cmd SUBLAYOUT_CHANGE      */
		     QCmdMessage cmdJobSublayout = new QCmdMessage("CMD_SUBLAYOUT","JobLayout");
		     JsonObject cmdJobSublayoutJson = new JsonObject().mapFrom(cmdJobSublayout);
		     String createJobLayout = RulesUtils.getLayout(rules.realm() + "/create_job.json");
		       cmdJobSublayoutJson.put("items",createJobLayout);
		       cmdJobSublayoutJson.put("token", rules.getToken());
		      QwandaUtils.jsonLogger("SubLayout Data",cmdJobSublayoutJson);

		    /*  Publish it to the EventBus   */
		      rules.publish("cmds", cmdJobSublayoutJson);
	     }
      }

     rules.footer();
end
