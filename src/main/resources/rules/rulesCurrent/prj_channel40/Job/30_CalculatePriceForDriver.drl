package life.genny.rules;
import life.genny.rules.RulesUtils;
import life.genny.rules.QRules;
import life.genny.qwandautils.QwandaUtils;
import life.genny.qwandautils.MergeUtil;
import life.genny.qwanda.Answer;
import life.genny.qwanda.message.QEventAttributeValueChangeMessage;
import life.genny.qwanda.entity.BaseEntity;
import java.lang.Double;
import java.lang.String;
import java.math.BigDecimal;
import org.javamoney.moneta.Money;
import javax.money.CurrencyUnit;
import javax.money.Monetary;
import org.json.simple.JSONObject;
import java.util.ArrayList;

rule "Calculate Price for Driver"
    no-loop true
    when
        $m: QEventAttributeValueChangeMessage( data.code == "PRI_OFFER_DRIVER_PRICE_EXC_GST"  && getAnswer().getTargetCode().startsWith("OFR_") )
        rules : QRules( isState("STARTED") && !isState("CALCULATE_DRIVER_PRICE") )
    then    
    
        rules.header();
        
        rules.setState("CALCULATE_DRIVER_PRICE");
        Answer newAnswer = $m.getAnswer();
        BaseEntity source = rules.getBaseEntityByCode(newAnswer.getSourceCode());
        
        if (source.is("PRI_DRIVER") == true) {	
        		String tokenString = rules.getToken();
            
            /* BaseEntity Code */
                String begCode = newAnswer.getTargetCode();
            /* Get JSON */
                JSONObject moneyJson = JsonUtils.fromJson(newAnswer.getValue(), JSONObject.class);
            /* Get amount and currency */
                String amount = QwandaUtils.getAmountAsString(newAnswer.getValue());
                String currency = QwandaUtils.getCurrencyAsString(newAnswer.getValue());    
            /* Generate CURRENCY and amount in Double */
                Double amountValue = Double.parseDouble(amount);
                CurrencyUnit DEFAULT_CURRENCY = Monetary.getCurrency(currency);     
            /* Generate price in Money Type */      
                Money answerPrice = Money.of(amountValue, DEFAULT_CURRENCY);
            /* check if target is an OFFER  */
                Boolean isOffer = newAnswer.getTargetCode().startsWith("OFR_");
            /* Price attributeCodes */  
                String ownerPriceIncGstCode = "PRI_OFFER_OWNER_PRICE_INC_GST";
                String ownerPriceExcGstCode = "PRI_OFFER_OWNER_PRICE_EXC_GST";
                String driverPriceIncGstCode = "PRI_OFFER_DRIVER_PRICE_INC_GST";
                String driverPriceExcGstCode = "PRI_OFFER_DRIVER_PRICE_EXC_GST";
                String feePriceIncGstCode = "PRI_OFFER_FEE_INC_GST";
                String feePriceExcGstCode = "PRI_OFFER_FEE_EXC_GST";
            
                Money ownerPriceExcGST = Money.of(0, DEFAULT_CURRENCY);
                Money ownerPriceIncGST = Money.of(0, DEFAULT_CURRENCY);
                Money driverPriceExcGST = Money.of(0, DEFAULT_CURRENCY);
                Money driverPriceIncGST = Money.of(0, DEFAULT_CURRENCY);
                Money fees = Money.of(0, DEFAULT_CURRENCY);
                Money feePriceExcGST = Money.of(0, DEFAULT_CURRENCY);
                Money feePriceIncGST = Money.of(0, DEFAULT_CURRENCY);
            /* Get userRole */
                String userRole = null;
          
                    BaseEntity offer = rules.getBaseEntityByCode(newAnswer.getTargetCode());
                    System.out.println(" offerCode BE "+ offer.getCode());                  
                    userRole = offer.getValue("PRI_NEXT_ACTION",null);
                    
                rules.println("targetCode   ::   " + newAnswer.getTargetCode() );
                rules.println("userRole     ::    " + userRole );
            
            /* Check if the amount is  not null or not negative */  
                if( amountValue != null && amountValue >= 0){
                    if(  (userRole == null || userRole.equals("QUOTER") || userRole.equals("OWNER"))) {
                         
                         /* Driver Fees */
					   	fees = rules.calcDriverFee( answerPrice );       
			   			if(answerPrice.compareTo(Money.of(10, DEFAULT_CURRENCY)) > 0) {
							if(fees.compareTo(Money.of(100, DEFAULT_CURRENCY)) < 0) {
						     	fees = Money.of(100, DEFAULT_CURRENCY);
						     }
			  			}
			
			            feePriceExcGST = fees;
			            feePriceIncGST = rules.includeGSTMoney(feePriceExcGST);
            
                        driverPriceExcGST = answerPrice;
                        driverPriceIncGST = rules.includeGSTMoney(answerPrice);
                        ownerPriceExcGST = driverPriceExcGST.add(feePriceExcGST);
                        ownerPriceIncGST = rules.includeGSTMoney(ownerPriceExcGST);
                        rules.println("=======================================================================================================");
                        rules.println("QUOTER quoting     ::   ");
                        rules.println("targetCode         ::   " +newAnswer.getTargetCode() );
                        rules.println("ownerPriceExcGST   ::   " + ownerPriceExcGST);
                        rules.println("ownerPriceIncGST   ::   " + ownerPriceIncGST);
                        rules.println("driverPriceIncGST  ::   " + driverPriceIncGST);
                        rules.println("driverPriceExcGST  ::   " + driverPriceExcGST);
                        rules.println("=======================================================================================================");
                        /* Get amount values in String */
                            String ownerPriceIncGSTString = QwandaUtils.getMoneyString(ownerPriceIncGST);
                            String ownerPriceExcGSTString = QwandaUtils.getMoneyString(ownerPriceExcGST);
                            String driverPriceIncGSTString = QwandaUtils.getMoneyString(driverPriceIncGST);
                            String driverPriceExcGSTString = QwandaUtils.getMoneyString(driverPriceExcGST);
                            String feePriceIncGSTString = QwandaUtils.getMoneyString(feePriceIncGST);
                            String feePriceExcGSTString = QwandaUtils.getMoneyString(feePriceExcGST);
                            
                            /* Save PRICES as Answer */
                            List<Answer> answers = new ArrayList<Answer>();
                            answers.add(new Answer(newAnswer.getSourceCode(), begCode, ownerPriceIncGstCode, ownerPriceIncGSTString));
                            answers.add(new Answer(newAnswer.getSourceCode(), begCode, ownerPriceExcGstCode, ownerPriceExcGSTString));
                            answers.add(new Answer(newAnswer.getSourceCode(), begCode, driverPriceIncGstCode, driverPriceIncGSTString));
                           /* answers.add(new Answer(newAnswer.getSourceCode(), begCode, driverPriceExcGstCode, driverPriceExcGSTString)); */
                            answers.add(new Answer(newAnswer.getSourceCode(), begCode, feePriceIncGstCode, feePriceIncGSTString));
                            answers.add(new Answer(newAnswer.getSourceCode(), begCode, feePriceExcGstCode, feePriceExcGSTString));
                            rules.saveAnswers(answers);
                    }
                     else {
                     	rules.println("ERROR: User Role not acceptable - "+userRole);
                     }
                } else {
                	rules.println("ERROR: Amount is dodgy- "+amountValue);
                }
		}
        rules.footer();
end
