package life.genny.rules;

import life.genny.rules.RulesUtils;
import life.genny.rules.QRules;
import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QEventLinkChangeMessage;
import life.genny.qwanda.entity.EntityEntity;
import life.genny.qwanda.Answer;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwanda.message.QEventAttributeValueChangeMessage;
import life.genny.qwandautils.QwandaUtils;
import life.genny.qwandautils.JsonUtils;
import life.genny.rules.RulesUtils;
import life.genny.qwanda.entity.User;
import life.genny.qwanda.Link;
import life.genny.qwanda.entity.BaseEntity;
import java.util.Map;
import java.util.HashMap;


/*   Rule to handle load selection   */
rule "Handle Load Selection"

   ruleflow-group 'AttributeChange'
    when
        $m: QEventAttributeValueChangeMessage( getData().getCode().equals("LNK_LOAD_LISTS") )
         rules: QRules()
     then
         rules.header();
          
        /*     Collect load code from answer    */
         Answer newAnswer = $m.getAnswer();
         rules.println("Answer from QEventAttributeValueChangeMessage  ::  "+newAnswer.toString());
         String newLoadCode = newAnswer.getTargetCode();
         String loadTemplateCode = newAnswer.getValue();
         rules.println("The loadList BE code is   ::  " +newLoadCode);
         rules.println("The owner BE code is   ::  " +rules.getUser().getCode());
         rules.println("The loadTemplate code is   ::  " +loadTemplateCode);

        /*  Grab attributes from load and save it to newly load    */
         Map<String, String> map = new HashMap<>();
         map = rules.getMapOfAllAttributesValuesForBaseEntity(loadTemplateCode);
         
          RulesUtils.ruleLogger(" MAP DATA ",map );
          List<Answer> answers = new ArrayList<Answer>();
            try{
		      	for (Map.Entry<String, String> entry : map.entrySet())
		      	{	
                       Answer answerObj = new Answer(rules.getUser().getCode(), newLoadCode, entry.getKey(), entry.getValue() );
                       answers.add(answerObj);
                  }   
                  answers.add(new Answer(rules.getUser().getCode(), newLoadCode, "LNK_LOAD_LISTS",loadTemplateCode));
                  rules.saveAnswers(answers);              
               }catch (Exception e) {
               }              
           rules.println("The new laod with attribute is ::   "+newLoadCode.toString());
           BaseEntity newLoad = rules.getBaseEntityByCode(newLoadCode);
        	rules.publishBE(newLoad);

            
         rules.footer();

end
