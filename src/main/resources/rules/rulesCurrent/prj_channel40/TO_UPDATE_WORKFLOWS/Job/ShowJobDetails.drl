package life.genny.rules;

import life.genny.rules.QRules;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.message.QEventMessage;
import life.genny.rules.RulesUtils;
import io.vertx.core.json.JsonObject;

import life.genny.qwanda.message.QCmdMessage;

rule "Show more info about job"
	when
		$m: QEventMessage( event_type == "BTN_CLICK" && data.code == "BTN_LOAD_SEE_MORE")
		rules: QRules( isState("STARTED") &&  !isState("BTN_LOAD_SEE_MORE_LOOP"))
	then

		rules.header();
		rules.setState("BTN_LOAD_SEE_MORE_LOOP");
	    String[] lastLayout = rules.getLastLayout();
		String data = $m.getData().getValue();
		rules.println(data);
		if(data != null) {

			JsonObject dataJson = new JsonObject(data);
			String hint = dataJson.getString("hint");
			String baseEntityCode = dataJson.getString("itemCode");

			/* first we check if the base entity is a load, a driver, or an owner etc... The BE code will tell us: */
			if(baseEntityCode != null) {

				if(baseEntityCode.contains("LOD_")) {
			     	return;
				}
			}

		    if(hint != null && baseEntityCode != null) {

		    		switch(hint) {
				case "GRP_NEW_ITEMS":
				case "GRP_IN_TRANSIT":
				case "GRP_APPROVED":
				case "GRP_PAID":
				case "GRP_DELIVERED":
				case "GRP_COMPLETED":

				     rules.sendSublayout("LOAD_DETAILS", "loadLayout.json", baseEntityCode);

             if(rules.getUser().is("PRI_IS_SELLER") || rules.getUser().getValue("PRI_IS_SELLER").equals("TRUE")) {

               /* we check if the user is a driver and if they have any payment methods link to their account */
               String dataString = rules.getUser().getValue("PRI_USER_PAYMENT_METHODS", null);

               if(dataString != null) {

                  int arraySize = 0;

                  try {
                        JsonArray paymentsArray = new JsonArray(dataString);
                        if (paymentsArray.size() != 0){
                            arraySize = paymentsArray.size();
                        }
                    }
                     catch(Exception e){
                         System.out.println("Exception! Unable to create JsonArray ");
                    }

                  }

                  if(arraySize == 0 || dataString == null) {

                     /* we refresh the assembly tokens so driver can submit a quote */
                     drools.setFocus("ispayments");  /* NOW Set up Payments */
                  }
              }

				break;

				default:
					break;
				}
		    }
		}

		rules.footer();
end
