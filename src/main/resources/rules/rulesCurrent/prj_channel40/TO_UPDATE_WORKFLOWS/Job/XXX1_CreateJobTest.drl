package life.genny.rules;

import life.genny.rules.RulesUtils;
import life.genny.rules.QRules;
import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.entity.EntityEntity;
import life.genny.qwanda.Answer;
import life.genny.qwandautils.QwandaUtils;
import life.genny.rules.RulesUtils;
import life.genny.qwanda.entity.User;
import life.genny.qwanda.Link;
import life.genny.qwanda.entity.BaseEntity;

import io.vertx.core.json.JsonObject;

/*   Rule for Add Load button click   */
rule "Create Job"
   when
     $m : QEventMessage( event_type == "BTN_CLICK" && data.value == "ADD_NEW_LOAD" )
     rules: QRules(!isState("LOAD_CREATED"))
   then
     rules.header();

    /*   Creating new base-entity BEG for Posting new Job      */
     BaseEntity beg = rules.baseEntity.create(rules.getUser().getCode(), "BEG", "Base Entity Group");
     rules.publishBE(beg);
     rules.println("BaseEntity BEG created is   ::  "+beg.toString());
     rules.println("The BEG code is   ::  "+beg.getCode());

     /*    link newly created Job to DRAFT - GRP_DRAFT_JOBS    */
   /*  Link newJobLink =  QwandaUtils.createLink("GRP_DRAFTS", beg.getCode(), "LNK_CORE", null, (double) 1, rules.getToken());  */
      Link newJobLink =  QwandaUtils.createLink("GRP_NEW_ITEMS", beg.getCode(), "LNK_CORE", null, (double) 1, rules.getToken());

    /*  link current user as load-owner to the Job/BEG     */
        Link jobOwnerLink =  QwandaUtils.createLink(beg.getCode(), rules.getUser().getCode(), "LNK_BEG", "OWNER", (double) 1, rules.getToken());
        rules.println(" Added Load Owner to BEG/JOB ");

   if(true){
     /*  Creating new base-entity LOAD    */
     BaseEntity load = rules.createBaseEntityByCode(rules.getUser().getCode(),  "LOD", "LOAD");
     rules.publishBE(load);

    /*  Add author to the load    */
      Answer loadAuthorAns = new Answer(rules.getUser().getCode(),load.getCode(), "PRI_AUTHOR", rules.getUser().getCode() );
      rules.baseEntity.saveAnswer(loadAuthorAns);


     /*  link newly created LOAD to JOB/BEG    */
       Link jobLoadLink =  QwandaUtils.createLink(beg.getCode(), load.getCode(), "LNK_BEG", "LOAD", (double) 1, rules.getToken());



       /*  Adding Offer Count to 0   */
       	  Answer offerCountAns = new Answer(rules.getUser().getCode(),beg.getCode(), "PRI_OFFER_COUNT", "0" );
        /* Publish Answer   */
       	 rules.baseEntity.saveAnswer(offerCountAns);

         /*     Moving the BEG      */
    /*        Link link = new Link("GRP_DRAFTS",beg.getCode(),"LNK_CORE");
 	       String output = QwandaUtils.apiPostEntity(rules.getQwandaServiceUrl()+"/qwanda/baseentitys/move/GRP_NEW_ITEMS", JsonUtils.toJson(link), rules.getToken()); 	       */

 	      /*    Send newly created job with its attributes   */
 	      BaseEntity job = rules.baseEntity.getBaseEntityByCode(beg.getCode());
      /*     JsonObject newJobDetails = new JsonObject( QwandaUtils.apiGet(rules.getQwandaServiceUrl()+"/qwanda/baseentitys/"+beg.getCode()+"/linkcodes/LNK_BEG/attributes", rules.getToken()));
           rules.println("The newly submitted Job details     ::     "+newJobDetails.toString());
           rules.publishCmd(newJobDetails); */

          /* Get the sourceCode(Company code) for this User */
            BaseEntity company = rules.baseEntity.getParent(rules.getUser().getCode(), "LNK_STAFF");

         /* link newly created Job to GRP_LOADS   */
           rules.println("The beg Code is  ::  "+beg.getCode());
           String loadCode =  QwandaUtils.getSourceOrTargetForGroupLink("GRP_NEW_ITEMS", "LNK_BEG", beg.getCode() , "LOAD", false, rules.getToken());
           rules.println("The loadCode which is being added to the GRP_LOADS is :: "+loadCode);
           Link newLoadLinkToLoadList =  QwandaUtils.createLink("GRP_LOADS",loadCode , "LNK_LOAD", company.getCode(), (double) 1, rules.getToken());
           rules.println("The load has been added to the GRP_LOADS ");

          rules.setState("LOAD_CREATED");
      }
         /* Calling the rule group : BucketView     */
          rules.setState("TRIGGER_HOMEPAGE");

     rules.footer();

end
