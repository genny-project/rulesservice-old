
import life.genny.rules.QRules;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.message.QEventMessage;
import life.genny.rules.RulesUtils;
import life.genny.rules.Status;
import io.vertx.core.json.JsonObject;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

rule "Manually Confirm Arrival"
no-loop true
when
  $m : QEventMessage( event_type == "BTN_CLICK" && data.code == "BTN_CONFIRM_ARRIVAL")
  rules: QRules( !isState("CONFIRMED_ARRIVAL"))
then
    
		RulesUtils.header(drools.getRule().getName());
  		String data = $m.getData().getValue();
  		rules.setState("CONFIRMED_ARRIVAL");
  		
  		if(data != null) {
		
		     JsonObject dataJson = new JsonObject(data);
		     String begCode = dataJson.getString("itemCode");
		     if(begCode != null) {
		    	 	
		    	 	/* mark job as NOT delivered by driver */
			     Answer beAnswer = new Answer(begCode, begCode, "PRI_DRIVER_CONFIRMED_DELIVERY", "false");
		         rules.publishData(beAnswer);  
		            
		    	 	//rules.moveBaseEntity(begCode, "GRP_IN_TRANSIT", "GRP_COMPLETED","LNK_CORE");
		    	 	rules.moveBaseEntitySetLinkValue(begCode, "GRP_IN_TRANSIT", "GRP_COMPLETED", "LNK_CORE", "BEG"); 

			    	BaseEntity jobBe = rules.getBaseEntityByCode(begCode);
			    	String offerCode = jobBe.getValue("STT_HOT_OFFER",null);
        			BaseEntity offerBe = rules.getBaseEntityByCode(offerCode);
        			String quoterCode = offerBe.getValue("PRI_QUOTER_CODE", null);
        			String ownerCode = jobBe.getValue("PRI_AUTHOR",null);
        			
        			/* Add new attribute to save the time when load was dropped off */
	      		Answer jobDeliveryDateTimeAnswer = new Answer(rules.getUser().getCode(), begCode, "PRI_DROPOFF_DATETIME", rules.getZonedCurrentLocalDateTime());
	      		rules.saveAnswer(jobDeliveryDateTimeAnswer);
	      		
	      		BaseEntity loadBe = rules.getChildren(begCode, "LNK_BEG", "LOAD");
        
        			HashMap<String, String> contextMap = new HashMap<String, String>();
				contextMap.put("JOB", begCode);
				contextMap.put("DRIVER", quoterCode);
				contextMap.put("LOAD", loadBe.getCode());
				
				String[] recipientCodes = {ownerCode};
				    		
				rules.sendMessage("OK", recipientCodes, contextMap, "MSG_CH40_DELIVERED", "TOAST");
				rules.sendMessage("OK", recipientCodes, contextMap, "MSG_CH40_DELIVERED", "SMS");
				rules.sendMessage("OK", recipientCodes, contextMap, "MSG_CH40_DELIVERED", "EMAIL");
				
				/* Update the Job status   */
			       rules.updateBaseEntityAttribute(rules.getUser().getCode(), begCode, "STA_"+ownerCode, Status.NEEDS_ACTION.value());
			       rules.updateBaseEntityAttribute(rules.getUser().getCode(), begCode, "STA_"+quoterCode, Status.NEEDS_NO_ACTION.value());
		    			 
			    	
		    	    }
		     }
		
		RulesUtils.footer(drools.getRule().getName());

end