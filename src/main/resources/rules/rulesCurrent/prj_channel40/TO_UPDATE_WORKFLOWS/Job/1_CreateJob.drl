package life.genny.rules;

import life.genny.rules.RulesUtils;
import life.genny.rules.QRules;
import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.entity.EntityEntity;
import life.genny.qwanda.Answer;
import life.genny.qwandautils.QwandaUtils;
import life.genny.rules.RulesUtils;
import life.genny.qwanda.entity.User;
import life.genny.qwanda.Link;
import life.genny.qwanda.entity.BaseEntity;

import java.io.IOException;

import org.apache.http.client.ClientProtocolException;

import io.vertx.core.json.JsonObject;

/*   Rule for Add Load button click   */
rule "Create Job"
   when
     $m : QEventMessage( event_type == "BTN_CLICK" && data.value == "ADD_NEW_LOAD" )
     rules: QRules(!isState("CREATE_LOAD_CLICKED"))
   then
     rules.header();

      drools.setFocus("CreateLoad");

    /*     Creating new base-entity BEG for Posting new Job      */
     BaseEntity beg = rules.baseEntity.create(rules.getUser().getCode(), "BEG", "New Load");
       /*  Add author to the job    */
      Answer jobAuthorAns = new Answer(rules.getUser().getCode(),beg.getCode(), "PRI_AUTHOR", rules.getUser().getCode() );
      rules.baseEntity.saveAnswer(jobAuthorAns);

     rules.println("BaseEntity BEG created is   ::  "+beg.toString());
     rules.println("The BEG code is   ::  "+beg.getCode());

    /*       link newly created Job to DRAFT - GRP_DRAFT_JOBS    */
      Link newJobLink = QwandaUtils.createLink("GRP_DRAFTS", beg.getCode(), "LNK_CORE", "BEG", (double) 1, rules.getToken());

    /*  Add PRI_DROPOFF_DATETIME and set to null   */
      Answer loadDropOffDateTimeAns = new Answer(rules.getUser().getCode(), beg.getCode(), "PRI_DROPOFF_DATETIME", "null");
      rules.baseEntity.saveAnswer(loadDropOffDateTimeAns);

    /*  Creating new base-entity LOAD    */
      BaseEntity load = rules.baseEntity.create(rules.getUser().getCode(),  "LOD", "LOAD");

    /*  Add author to the load    */
      Answer loadAuthorAns = new Answer(rules.getUser().getCode(),load.getCode(), "PRI_AUTHOR", rules.getUser().getCode() );
      rules.baseEntity.saveAnswer(loadAuthorAns);


    /*  link newly created LOAD to JOB/BEG    */
       Link jobLoadLink =  QwandaUtils.createLink(beg.getCode(), load.getCode(), "LNK_BEG", "LOAD", (double) 1, rules.getToken());

    /*  link current user as load-owner to the Job/BEG     */
        Link jobOwnerLink =  QwandaUtils.createLink(beg.getCode(), rules.getUser().getCode(), "LNK_BEG", "OWNER", (double) 1, rules.getToken());
        rules.println(" Added Load Owner to BEG/JOB ");

    /*    Getting Post Load Question GRP        */
    
      String stakeHolderFilter = null;
      BaseEntity company =  rules.getParent(rules.getUser().getCode(),"LNK_STAFF");
      if(company != null) {
    	  stakeHolderFilter = company.getCode();
     }
      
 	 rules.sendQuestions(rules.getUser().getCode(), load.getCode(), "QUE_LOAD_DETAILS_GRP", stakeHolderFilter);
 	 rules.sendQuestions(rules.getUser().getCode(), beg.getCode(), "QUE_JOB_DETAILS_GRP");

    /*    Sending cmd SUBLAYOUT_CHANGE      */
     rules.sendSublayout("create-job", "create_job.json");

      /* Add new attribute to save job creation date-time */
      Answer newJobCreationDateTimeAnswer = new Answer(rules.getUser().getCode(), beg.getCode(), "PRI_JOB_CREATED_DATETIME", rules.getZonedCurrentLocalDateTime() );
      rules.baseEntity.saveAnswer(newJobCreationDateTimeAnswer);

      /* Add new attribute to check if a job is new or existing */
      Answer newJobSubmitAnswer = new Answer(rules.getUser().getCode(), beg.getCode(), "PRI_JOB_IS_SUBMITTED", "false");
      rules.baseEntity.saveAnswer(newJobSubmitAnswer);

     rules.footer();

end
