package life.genny.rules;

import life.genny.rules.RulesUtils;
import life.genny.rules.QRules;
import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.entity.EntityEntity;
import life.genny.qwanda.Answer;
import life.genny.qwandautils.QwandaUtils;
import life.genny.rules.RulesUtils;
import life.genny.qwanda.entity.User;
import life.genny.qwanda.Link;
import life.genny.qwanda.entity.BaseEntity;

import io.vertx.core.json.JsonObject;

/*   Rule for Add Load button click   */
rule "Create Job"
   when
     $m : QEventMessage( event_type == "BTN_CLICK" && data.value == "ADD_NEW_LOAD" )
     rules: QRules( !isState("CREATE_LOAD_CLICKED") )
   then
     rules.header();
     
      drools.setFocus("CreateLoad");
      rules.setState("CREATE_LOAD_CLICKED");

    /*     Creating new base-entity BEG for Posting new Job      */
     BaseEntity beg = rules.createBaseEntityByCode(rules.getUser().getCode(), "BEG", "New Load");
       /*  Add author to the job    */
      Answer jobAuthorAns = new Answer(rules.getUser().getCode(),beg.getCode(), "PRI_AUTHOR", rules.getUser().getCode() );
      rules.saveAnswer(jobAuthorAns);

     rules.println("BaseEntity BEG created is   ::  "+beg.toString());
     rules.println("The BEG code is   ::  "+beg.getCode());

    /*       link newly created Job to DRAFT - GRP_DRAFT_JOBS    */
      Link newJobLink =  QwandaUtils.createLink("GRP_DRAFTS", beg.getCode(), "LNK_CORE", "BEG", (double) 1, rules.getToken());

    /*  Add PRI_DROPOFF_DATETIME and set to null   */
      Answer loadDropOffDateTimeAns = new Answer(rules.getUser().getCode(), beg.getCode(), "PRI_DROPOFF_DATETIME", "null");
      rules.saveAnswer(loadDropOffDateTimeAns);

    /*  Creating new base-entity LOAD    */
      BaseEntity load = rules.createBaseEntityByCode(rules.getUser().getCode(),  "LOD", "LOAD");

    /*  Add author to the load    */
      Answer loadAuthorAns = new Answer(rules.getUser().getCode(),load.getCode(), "PRI_AUTHOR", rules.getUser().getCode() );
      rules.saveAnswer(loadAuthorAns);


    /*  link newly created LOAD to JOB/BEG    */
       Link jobLoadLink =  QwandaUtils.createLink(beg.getCode(), load.getCode(), "LNK_BEG", "LOAD", (double) 1, rules.getToken());

    /*  link current user as load-owner to the Job/BEG     */
        Link jobOwnerLink =  QwandaUtils.createLink(beg.getCode(), rules.getUser().getCode(), "LNK_BEG", "OWNER", (double) 1, rules.getToken());
        rules.println(" Added Load Owner to BEG/JOB ");

    /*    Getting Post Load Question GRP        */
     JsonObject qPostLoad = new JsonObject( QwandaUtils.apiGet(rules.getQwandaServiceUrl()+"/qwanda/baseentitys/"+rules.getUser().getCode()+"/asks3/QUE_LOAD_DETAILS_GRP/"+load.getCode(), rules.getToken()));
     qPostLoad.put("root", "QUE_LOAD_DETAILS_GRP");
     qPostLoad.put("aliasCode", $m.data.getCode());
     qPostLoad.put("token", rules.getToken());
     rules.println("QName Json: "+qPostLoad.toString());
     rules.publish("cmds",qPostLoad);

     JsonObject qPostJob = new JsonObject( QwandaUtils.apiGet(rules.getQwandaServiceUrl()+"/qwanda/baseentitys/"+rules.getUser().getCode()+"/asks3/QUE_JOB_DETAILS_GRP/"+beg.getCode(), rules.getToken()));
     qPostJob.put("root", "QUE_JOB_DETAILS_GRP");
     qPostJob.put("token", rules.getToken());
     rules.println("QName Json: "+qPostJob.toString());
     rules.publish("cmds",qPostJob);

    /*    Sending cmd SUBLAYOUT_CHANGE      */
     QCmdMessage cmdJobSublayout = new QCmdMessage("CMD_SUBLAYOUT","JobLayout");
     JsonObject cmdJobSublayoutJson = new JsonObject().mapFrom(cmdJobSublayout);
     String createJobLayout = RulesUtils.getLayout(rules.realm() + "/create_job.json");
       cmdJobSublayoutJson.put("items",createJobLayout);
       cmdJobSublayoutJson.put("token", rules.getToken());
      QwandaUtils.jsonLogger("SubLayout Data",cmdJobSublayoutJson);

    /*  Publish it to the EventBus   */
      rules.publish("cmds", cmdJobSublayoutJson);
      
      /* Add new attribute to save job creation date-time */
      Answer newJobCreationDateTimeAnswer = new Answer(rules.getUser().getCode(), beg.getCode(), "PRI_JOB_CREATED_DATETIME", rules.getZonedCurrentLocalDateTime() );
      rules.saveAnswer(newJobCreationDateTimeAnswer);
      
      
      /* Add new attribute to check if a job is new or existing */
      Answer newJobSubmitAnswer = new Answer(rules.getUser().getCode(), beg.getCode(), "PRI_JOB_IS_SUBMITTED", "false");
      rules.saveAnswer(newJobSubmitAnswer);

     rules.footer();

end
