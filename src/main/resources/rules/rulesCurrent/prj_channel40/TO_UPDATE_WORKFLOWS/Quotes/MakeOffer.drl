package life.genny.rules;

import life.genny.rules.QRules;
import life.genny.qwandautils.QwandaUtils;
import org.apache.commons.lang3.StringUtils;

import life.genny.qwanda.Answer;
import life.genny.qwanda.Ask;
import life.genny.qwanda.Link;
import life.genny.qwanda.DateTimeDeserializer;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.entity.User;

import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QMessage.MessageData;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QCmdViewMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QEventBtnClickMessage;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwanda.message.QMSGMessage;
import life.genny.qwanda.message.QBaseMSGMessageType;

import io.vertx.core.buffer.Buffer;
import io.vertx.core.json.JsonObject;
import io.vertx.core.json.JsonArray;


rule "Make Offer"
    when
        $m : QEventBtnClickMessage( event_type == "BTN_CLICK" && data.code == "BTN_MAKE_OFFER")
        rules: QRules(!isState("SUBMIT_QUOTE"))
    then
        rules.header();
        rules.setState("SUBMIT_QUOTE");

        /* Prepare Token & qwandaServiceUrl */
            String qwandaServiceUrl = rules.getQwandaServiceUrl();
            String tokenString = rules.getToken();

        /* Get begCode, username, userCode, userFullName */
            String begCode = $m.getItemCode();
            rules.println("begCode  ::   "+ begCode);

			BaseEntity user = rules.getUser();
            String userCode = user.getCode();
            rules.println("userCode   ::   "+ userCode);

            String userName = rules.getAsString("preferred_username");
            rules.println("username   ::   "+ userName);

            String userFullName = rules.getFullName(rules.getUser());
		    rules.println("user fullName   ::   " + userFullName);

            String linkCode= "LNK_BEG";
            String linkOffer= "OFFER";
            String offerCode= "null";
            String dataString = user.getValue("PRI_USER_PAYMENT_METHODS", null);

          if( dataString != null){
             int arraySize = 0;
             try{
                   JsonArray paymentsArray = new JsonArray(dataString);
                   if (paymentsArray.size() != 0){
                       arraySize = paymentsArray.size();
                   }
                }catch(Exception e){
                    System.out.println("Exception! Unable to create JsonArray ");
               }
           if(arraySize > 0){

         /* Check if a link exists between BEG & OFFER */

          BaseEntity oldOffer = rules.getOfferBaseEntity(begCode, linkCode, linkOffer, userCode, tokenString);
          if(oldOffer != null) {
            offerCode = oldOffer.getCode();
          }
          else {

            /* Create Offer BE */
	          BaseEntity offer = rules.createBaseEntityByCode(userCode , "OFR", "Offer");
	          RulesUtils.ruleLogger("OFFER Base Entity", offer);
	          /* Get Offer Code */
	          offerCode = offer.getCode();
	          rules.println("offerCode   ::   "+offerCode);

           /* Save attributes for OFFER as answer */
             Answer offercode = new Answer(userCode, offerCode, "PRI_OFFER_CODE", offerCode);
             Answer quoterCode = new Answer(userCode, offerCode, "PRI_QUOTER_CODE", userCode);
             Answer quoterUname = new Answer(userCode, offerCode, "PRI_QUOTER_USERNAME", userName);
             Answer quoterFullName = new Answer(userCode, offerCode, "PRI_QUOTER_FULLNAME", userFullName);
             Answer jobCode = new Answer(userCode, offerCode, "PRI_BEG_CODE", begCode);

              List<Answer> answerList = new ArrayList<Answer>();
              answerList.add(offercode);
              answerList.add(quoterCode);
              answerList.add(quoterUname);
              answerList.add(quoterFullName);
              answerList.add(jobCode);

			        rules.saveAnswers(answerList);
              rules.publishData(answerList);
          }

          /* Send Offer Questions */
          rules.askQuestionsToUser(userCode, offerCode, "QUE_OFFER_DRIVER_GRP", true);

          }
          else{

           /* Send Payment Method Questions */
           rules.sendQuestions(userCode, userCode, "QUE_PAYMENT_METHOD_GRP");
           rules.sendSublayout("driver-profile", "driver_payment_methods.json", true);
          }
        }else{
           /* Send Payment Method Questions */
          rules.sendQuestions(userCode, userCode, "QUE_PAYMENT_METHOD_GRP");
           rules.sendSublayout("driver-profile", "driver_payment_methods.json", true);
           //Send question QUE_PAYMENT_METHOD_GRP
       }


        rules.footer();
end
