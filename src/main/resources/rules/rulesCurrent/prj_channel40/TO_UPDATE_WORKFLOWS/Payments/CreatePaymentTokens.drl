package life.genny.rules;

import life.genny.rules.QRules;
import life.genny.utils.PaymentUtils;


rule "Create Assembly Tokens"
	agenda-group "payments"
	no-loop true
	when 
		rules: QRules( isState("IS_ASSEMBLY_USER_CREATED") && !isState("IS_ASSEMBLY_TOKEN_CREATED") ) 
	then
	
		RulesUtils.header(drools.getRule().getName());
		rules.setState("IS_ASSEMBLY_TOKEN_CREATED");		
		
		String assemblyAuthKey = PaymentUtils.getAssemblyAuthKey();
       	String assemblyId = rules.getUser().getValue("PRI_ASSEMBLY_USER_ID", null);

		if(assemblyId != null) {
			
			RulesUtils.println("Refreshing tokens");
  			
  			String oneTimeTransactionCardToken = null;
  			String oneTimeTransactionBankToken = null;
       		oneTimeTransactionCardToken = PaymentUtils.fetchOneTimeAssemblyToken(rules.getQwandaServiceUrl(), rules.getUser().getCode(), rules.getToken(), assemblyId, assemblyAuthKey, "card");
       		oneTimeTransactionBankToken = PaymentUtils.fetchOneTimeAssemblyToken(rules.getQwandaServiceUrl(), rules.getUser().getCode(), rules.getToken(), assemblyId, assemblyAuthKey, "bank");
	
			Answer cardTokenAnswer = new Answer(rules.getUser().getCode(), rules.getUser().getCode(), "PRI_ASSEMBLY_CARD_TOKEN", oneTimeTransactionCardToken);
			/* rules.publishData(cardTokenAnswer); */

			Answer bankTokenAnswer = new Answer(rules.getUser().getCode(), rules.getUser().getCode(), "PRI_ASSEMBLY_BANK_TOKEN", oneTimeTransactionBankToken);
			/* rules.publishData(bankTokenAnswer); */
			
			List<Answer> answers = new ArrayList<Answer>();
			answers.add(cardTokenAnswer);
			answers.add(bankTokenAnswer);

			rules.saveAnswers(answers);
		}
		
		RulesUtils.footer(drools.getRule().getName());
    	
end
 