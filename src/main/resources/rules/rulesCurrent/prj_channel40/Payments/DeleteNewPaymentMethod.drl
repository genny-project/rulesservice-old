package life.genny.rules;

import life.genny.rules.RulesUtils;
import life.genny.rules.QRules;

import life.genny.qwanda.Answer;

/* Sorry Adam if you read this */
import io.vertx.core.json.JsonArray;
import io.vertx.core.json.JsonObject;
import life.genny.utils.PaymentUtils;
import java.util.List;

rule "Delete new payment method - user"
	agenda-group "payment-method"
	when
		rules: QRules( isState("STARTED") && !isState("DELETED_PAYMENT_METHOD") )
		$m : QEventMessage( event_type == "PAYMENT_SUBMIT" && data.code == "USER_DELETE_NEW_PAYMENT_METHOD" )

	then

		rules.header();

		String deletedPaymentMethodId = $m.getData().getValue();

		String assemblyAuthKey = PaymentUtils.getAssemblyAuthKey();
       	String assemblyId = rules.getUser().getValue("PRI_ASSEMBLY_USER_ID", null);

       	/* Save tokens */
       	if(assemblyId != null) {

  			String oneTimeTransactionCardToken = null;
  			String oneTimeTransactionBankToken = null;
       		oneTimeTransactionCardToken = PaymentUtils.fetchOneTimeAssemblyToken(rules.getQwandaServiceUrl(), rules.getUser().getCode(), rules.getToken(), assemblyId, assemblyAuthKey, "card");
       		oneTimeTransactionBankToken = PaymentUtils.fetchOneTimeAssemblyToken(rules.getQwandaServiceUrl(), rules.getUser().getCode(), rules.getToken(), assemblyId, assemblyAuthKey, "bank");

			Answer cardTokenAnswer = new Answer(rules.getUser().getCode(), rules.getUser().getCode(), "PRI_ASSEMBLY_CARD_TOKEN", oneTimeTransactionCardToken);
			/* rules.saveAnswer(cardTokenAnswer); */
			Answer bankTokenAnswer = new Answer(rules.getUser().getCode(), rules.getUser().getCode(), "PRI_ASSEMBLY_BANK_TOKEN", oneTimeTransactionBankToken);
			/* rules.saveAnswer(bankTokenAnswer); */
			
			List<Answer> answers = new ArrayList<Answer>();
			answers.add(cardTokenAnswer);
			answers.add(bankTokenAnswer);

			rules.saveAnswers(answers);
       	}

		if(deletedPaymentMethodId != null) {

			String userCode = rules.getUser().getCode();
			String userCurrentPaymentMethods = rules.getUser().getValue("PRI_USER_PAYMENT_METHODS", null);
			if(userCurrentPaymentMethods != null) {

				JsonArray currentPaymentMethods = new JsonArray(userCurrentPaymentMethods);
				JsonArray newPaymentMethodsArray = new JsonArray();
				for(Object paymentMethodObj: currentPaymentMethods) {

					if(paymentMethodObj instanceof JsonObject) {

						JsonObject paymentMethod = (JsonObject)paymentMethodObj;
						if(paymentMethod.getString("id").equals(deletedPaymentMethodId) == false) {
							newPaymentMethodsArray.add(paymentMethod);
						} else {
							if(PaymentUtils.isBankAccount(paymentMethod.toString())) {
								PaymentUtils.deleteBankAccount(deletedPaymentMethodId, assemblyAuthKey);
							} else {
								PaymentUtils.deleteCard(deletedPaymentMethodId, assemblyAuthKey);
							}
						}
					}
				}

				String finalPaymentMethods = newPaymentMethodsArray.toString();
				Answer paymentAnswer = new Answer(userCode, userCode, "PRI_USER_PAYMENT_METHODS", finalPaymentMethods);
	            rules.saveAnswer(paymentAnswer);
			}
		}

		rules.setState("DELETED_PAYMENT_METHOD");
		rules.footer();

end
