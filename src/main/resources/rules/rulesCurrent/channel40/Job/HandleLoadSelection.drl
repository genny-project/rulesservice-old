package life.genny.rules;

import life.genny.rules.RulesUtils;
import life.genny.rules.QRules;
import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QEventLinkChangeMessage;
import life.genny.qwanda.entity.EntityEntity;
import life.genny.qwanda.Answer;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwanda.message.QEventAttributeValueChangeMessage;
import life.genny.qwandautils.QwandaUtils;
import life.genny.qwandautils.JsonUtils;
import life.genny.rules.RulesUtils;
import life.genny.qwanda.entity.User;
import life.genny.qwanda.Link;
import life.genny.qwanda.entity.BaseEntity;
import java.util.Map;
import java.util.HashMap;


/*   Rule to handle load selection   */
rule "Handle Load Selection"

   ruleflow-group 'AttributeChange'
    when
        $m: QEventAttributeValueChangeMessage( getData().getCode().equals("LNK_LOAD_LISTS") )
         rules: QRules()
     then
         rules.header();
        
   
        /*     Collect load code from answer    */
         Answer newAnswer = $m.getAnswer();
         rules.println("Answer from QEventAttributeValueChangeMessage  ::  "+newAnswer.toString());
         String targetCode = newAnswer.getTargetCode();
         String sourceCode = newAnswer.getSourceCode();
         String loadCode = newAnswer.getValue();
         rules.println("The target BE code is   ::  " +targetCode);
         rules.println("The source BE code is   ::  " +sourceCode);
         rules.println("The load code is   ::  " +loadCode);

        /*  Grab attributes from load and save it to newly load    */
         Map<String, String> map = new HashMap<>();
         map = rules.getMapOfAllAttributesValuesForBaseEntity(loadCode);
         
          RulesUtils.ruleLogger(" MAP DATA ",map );
        /*  Answer[] newAnswers = new Answer[map.size()]; */
            try{
              /*  int i = 0; */
		      	for (Map.Entry<String, String> entry : map.entrySet())
		      	{	
		    	       //if(!entry.getKey().equals("PRI_IMAGE_URL")){
                       Answer answerObj = new Answer(rules.getUser().getCode(), targetCode, entry.getKey(), entry.getValue() );
                        rules.saveAnswer(answerObj);
                       /* Answer[] answerArray = new Answer[answerObj];
                        QDataAnswerMessage newLoadAnswers = new QDataAnswerMessage(newAnswers); */
                        
                     /*  newAnswers[i] = answerObj; 
                       i++; */
                   // }
                  }                 
               }catch (Exception e) {
               }              
           /* QDataAnswerMessage newLoadAnswers = new QDataAnswerMessage(newAnswers);
            String jsonQDataAnswerMessage = JsonUtils.toJson(newLoadAnswers);
		   rules.println("updated answer json string ::"+jsonQDataAnswerMessage);*/
         /*   Send new answers to api to save it   */ 
	      /*	String response =   QwandaUtils.apiPostEntity(rules.getQwandaServiceUrl()+"/qwanda/answers/bulk", jsonQDataAnswerMessage, rules.getToken());
           rules.println("The new laod with attribute is ::   "+targetCode.toString());
           rules.println("The bulk answer post response is ::   "+response); */
        
        /*  Copying */
            
         rules.footer();

end
