package life.genny.rules;

import life.genny.rules.RulesUtils;
import life.genny.rules.QRules;
import life.genny.qwandautils.QwandaUtils;
import life.genny.qwandautils.MergeUtil;
import life.genny.qwanda.Answer;
import life.genny.qwanda.message.QEventAttributeValueChangeMessage;
import life.genny.qwanda.entity.BaseEntity;
import java.lang.Double;
import java.lang.String;
import java.math.BigDecimal;

import org.javamoney.moneta.Money;
import javax.money.CurrencyUnit;
import javax.money.Monetary;

import org.json.simple.JSONObject;

/*  Calculate Load Price adding service fee  */
rule "Calculate Load Price"
    when
    	$m: QEventAttributeValueChangeMessage(  QEventAttributeValueChangeMessage.getData().getCode().equals("PRI_PRICE")  && getAnswer().getTargetCode().startsWith("BEG_") || 
												QEventAttributeValueChangeMessage.getData().getCode().equals("PRI_OFFER_PRICE")  && getAnswer().getTargetCode().startsWith("OFR_") )
    	rules : QRules()
    then    
		rules.header();
		String tokenString = rules.getToken();
		Answer newAnswer = $m.getAnswer();
		
		/* BaseEntity Code */
			String beCode = newAnswer.getTargetCode();
		
		/* Get JSON */
			JSONObject moneyJson = JsonUtils.fromJson(newAnswer.getValue(), JSONObject.class);

		/* Get amount and currency */
			String amount = QwandaUtils.getAmountAsString(newAnswer.getValue());
			String currency = QwandaUtils.getCurrencyAsString(newAnswer.getValue());	

		/* Generate CURRENCY and amount in Double */
			Double amountValue = Double.parseDouble(amount);
			CurrencyUnit DEFAULT_CURRENCY = Monetary.getCurrency(currency);		

		/* Generate price in Money Type */		
			Money answerPrice = Money.of(amountValue, DEFAULT_CURRENCY);

		/* Price attributeCode and Other price atrributeCode generation */
			String priceCode = $m.getData().getCode();			
			String ownerPriceIncGstCode = priceCode.replace("_PRICE", "_OWNER_PRICE_INC_GST");
			String ownerPriceExcGstCode = priceCode.replace("_PRICE", "_OWNER_PRICE_EXC_GST");
			String driverPriceIncGstCode = priceCode.replace("_PRICE", "_DRIVER_PRICE_INC_GST");
			String driverPriceExcGstCode = priceCode.replace("_PRICE", "_DRIVER_PRICE_EXC_GST");
			String feePriceIncGstCode = priceCode.replace("_PRICE", "_FEE_INC_GST");
			String feePriceExcGstCode = priceCode.replace("_PRICE", "_FEE_EXC_GST");
		
			Money ownerPriceExcGST = Money.of(0, DEFAULT_CURRENCY);
			Money ownerPriceIncGST = Money.of(0, DEFAULT_CURRENCY);
			Money driverPriceExcGST = Money.of(0, DEFAULT_CURRENCY);
			Money driverPriceIncGST = Money.of(0, DEFAULT_CURRENCY);

			Money fees = Money.of(0, DEFAULT_CURRENCY);
			Money feePriceExcGST = Money.of(0, DEFAULT_CURRENCY);
			Money feePriceIncGST = Money.of(0, DEFAULT_CURRENCY);

			String ownerPriceIncGSTString = null;
			String ownerPriceExcGSTString = null;
			String driverPriceIncGSTString = null;
			String driverPriceExcGSTString = null;
			String feePriceIncGSTString = null; 
			String feePriceExcGSTString = null; 

		/* Get userRole */
			String userRole = null;
			if(newAnswer.getTargetCode().startsWith("OFR_")) {			
				String offerCode = newAnswer.getTargetCode();
				System.out.println(" offerCode BE "+ offerCode);
				userRole = MergeUtil.getAttrValue(offerCode, "PRI_NEXT_ACTION", tokenString);
			}

			System.out.println("targetCode   ::   " + newAnswer.getTargetCode() );
			System.out.println("userRole     ::    " + userRole );

		/* Check if the amount is  not null or not negative */	
			if( amountValue != null && amountValue >= 0){

				if( newAnswer.getTargetCode().startsWith("BEG_") || ( newAnswer.getTargetCode().startsWith("OFR_") && userRole != null && userRole.equals("OWNER")) ) {

					/* Owner Fees */
					fees = rules.calcOwnerFee( answerPrice );		
					feePriceExcGST = fees;
					feePriceIncGST = rules.includeGSTMoney(fees);

					System.out.println("=======================================================================================================");
					System.out.println("OWNER countering   ::   ");
					System.out.println(" targetCode" +newAnswer.getTargetCode() );
					ownerPriceIncGST = answerPrice;
					ownerPriceExcGST = rules.excludeGSTMoney(ownerPriceIncGST);
					driverPriceIncGST = ownerPriceIncGST.subtract(feePriceIncGST);
					driverPriceExcGST = ownerPriceExcGST.subtract(feePriceExcGST);
					System.out.println("ownerPriceExcGST   ::   " + ownerPriceExcGST.getNumber().doubleValue());
					System.out.println("ownerPriceIncGST   ::   " + ownerPriceIncGST.getNumber().doubleValue());
					System.out.println("driverPriceIncGST   ::   " + driverPriceIncGST.getNumber().doubleValue());
					System.out.println("driverPriceExcGST   ::   " + driverPriceExcGST.getNumber().doubleValue());
					System.out.println("=======================================================================================================");
				}
				else if( newAnswer.getTargetCode().startsWith("OFR_") && (userRole == null || userRole.equals("QUOTER"))) {

					/* Driver Fees */
					fees = rules.calcDriverFee( answerPrice );		
					feePriceExcGST = fees;
					feePriceIncGST = rules.includeGSTMoney(fees);

					System.out.println("=======================================================================================================");
					System.out.println("QUOTER countering   ::   ");
					driverPriceExcGST = answerPrice;
					driverPriceIncGST = rules.includeGSTMoney(answerPrice);
					ownerPriceExcGST = driverPriceExcGST.add(feePriceExcGST);
					ownerPriceIncGST = rules.includeGSTMoney(ownerPriceExcGST);

					System.out.println("ownerPriceExcGST   ::   " + ownerPriceExcGST.getNumber().doubleValue());
					System.out.println("ownerPriceIncGST   ::   " + ownerPriceIncGST.getNumber().doubleValue());
					System.out.println("driverPriceIncGST   ::   " + driverPriceIncGST.getNumber().doubleValue());
					System.out.println("driverPriceExcGST   ::   " + driverPriceExcGST.getNumber().doubleValue());
					System.out.println("=======================================================================================================");
				}

				/* Get amount values in String */
				ownerPriceIncGSTString = QwandaUtils.getMoneyString(ownerPriceIncGST);
				ownerPriceExcGSTString = QwandaUtils.getMoneyString(ownerPriceExcGST);
				driverPriceIncGSTString = QwandaUtils.getMoneyString(driverPriceIncGST);
				driverPriceExcGSTString = QwandaUtils.getMoneyString(driverPriceExcGST);
				feePriceIncGSTString = QwandaUtils.getMoneyString(feePriceIncGST);
				feePriceExcGSTString = QwandaUtils.getMoneyString(feePriceExcGST);
			}

		/* Save PRICES as Answer */
			/* Saving  OWNER_PRICE_INC_GST */ 
				Answer ownerPriceIncGSTAnswer = new Answer(rules.getUser().getCode(), beCode, ownerPriceIncGstCode, ownerPriceIncGSTString);          
				rules.publishData(ownerPriceIncGSTAnswer);   

			/* Saving  OWNER_PRICE_EXC_GST */ 
				Answer ownerPriceExcGSTAnswer = new Answer(rules.getUser().getCode(), beCode, ownerPriceExcGstCode, ownerPriceExcGSTString);          
				rules.publishData(ownerPriceExcGSTAnswer); 
			
			/* Saving  DRIVER_PRICE_INC_GST */ 
				Answer driverPriceIncGSTAnswer = new Answer(rules.getUser().getCode(), beCode, driverPriceIncGstCode, driverPriceIncGSTString);          
				rules.publishData(driverPriceIncGSTAnswer);  

			/* Saving  DRIVER_PRICE_EXC_GST */ 
				Answer driverPriceExcGSTAnswer = new Answer(rules.getUser().getCode(), beCode, driverPriceExcGstCode, driverPriceExcGSTString);          
				rules.publishData(driverPriceExcGSTAnswer); 

			/* Saving  FEE_INC_GST */ 
				Answer feePriceIncGSTAnswer = new Answer(rules.getUser().getCode(), beCode, feePriceIncGstCode, feePriceIncGSTString);          
				rules.publishData(feePriceIncGSTAnswer);   

			/* Saving  FEE_EXC_GST */ 
				Answer feePriceExcGSTAnswer = new Answer(rules.getUser().getCode(), beCode, feePriceExcGstCode, feePriceExcGSTString);         
				rules.publishData(feePriceExcGSTAnswer); 
		rules.footer();
		
end