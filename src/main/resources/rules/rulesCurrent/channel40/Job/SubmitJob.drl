package life.genny.rules;

import life.genny.rules.QRules;
import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.entity.EntityEntity;
import life.genny.qwanda.Answer;
import life.genny.qwandautils.QwandaUtils;
import life.genny.qwandautils.GPSUtils;
import life.genny.qwandautils.JsonUtils;
import life.genny.rules.RulesUtils;
import life.genny.qwanda.entity.User;
import life.genny.qwanda.Link;
import life.genny.qwanda.entity.BaseEntity;
import java.util.Arrays;


import io.vertx.core.json.JsonObject;


/* Rule handling Cancel and Submit Button click in the Create Load  */
rule "Post Job Cancel/Submit button click"
    when
      $m : QEventMessage( event_type == "FORM_SUBMIT" && data.code == "QUE_JOB_DETAILS_GRP" )
      rules: QRules()   
    then
         rules.setDrools(drools);
         rules.header();  
           
        /* rules.showLoading("Creating your new load..."); */
                
       /*  Get data.value and decode    */
        String dataString = $m.data.getValue();
        JsonObject dataJson = new JsonObject(dataString);
        String jobCode = dataJson.getString("targetCode");
        String actionCode = dataJson.getString("action"); 
        rules.println("The job code is   :: "+jobCode);
        
       if(actionCode.equalsIgnoreCase("submit")) {       
           
           /* We create a new attribute "PRI_TOTAL_DISTANCE" for this BEG. TODO: should be triggered in another rule */
           	String pickupLatitudeString = rules.getBaseEntityValueAsString(jobCode, "PRI_PICKUP_ADDRESS_LATITUDE");
           	String pickupLongitudeString = rules.getBaseEntityValueAsString(jobCode, "PRI_PICKUP_ADDRESS_LONGITUDE");
           	String deliveryLatitudeString = rules.getBaseEntityValueAsString(jobCode, "PRI_DROPOFF_ADDRESS_LATITUDE");
           	String deliveryLongitudeString = rules.getBaseEntityValueAsString(jobCode, "PRI_DROPOFF_ADDRESS_LONGITUDE");
           	
           	Double totalDistance = GPSUtils.getDistance(pickupLatitudeString, pickupLongitudeString, deliveryLatitudeString, deliveryLongitudeString);
       		if(totalDistance > 0) {
       			Answer totalDistanceAnswer = new Answer(jobCode, jobCode, "PRI_TOTAL_DISTANCE_M", Double.toString(totalDistance));
           		rules.saveAnswer(totalDistanceAnswer);
       		}
       		
       	 /*    Adding Offer Count to 0   */
       	   Answer offerCountAns = new Answer(rules.getUser().getCode(),jobCode, "PRI_OFFER_COUNT", "0" );
       	 /* Publish Answer   */
       	   rules.saveAnswer(offerCountAns); 
	    
          /*     Moving the BEG      */
            Link link = new Link("GRP_DRAFTS",jobCode,"LNK_CORE");
 	       String output = QwandaUtils.apiPostEntity(rules.getQwandaServiceUrl()+"/qwanda/baseentitys/move/GRP_NEW_ITEMS", JsonUtils.toJson(link), rules.getToken()); 	       
 	       
 	      /*    Send newly created job with its attributes   */        
           JsonObject newJobDetails = new JsonObject( QwandaUtils.apiGet(rules.getQwandaServiceUrl()+"/qwanda/baseentitys/"+jobCode+"/linkcodes/LNK_BEG/attributes", rules.getToken()));
           rules.println("The newly submitted Job details     ::     "+newJobDetails.toString());
           rules.publishCmd(newJobDetails); 
           
          /* Get the sourceCode(Company code) for this User */
            BaseEntity company = rules.getParent(rules.getUser().getCode(), "LNK_STAFF");
         
         /*     link newly created Job to GRP_LOADS   */
           BaseEntity load = rules.getChildren(jobCode, "LNK_BEG", "LOAD");
           String loadCode = load.getCode();  
           Link newLoadLinkToLoadList =  QwandaUtils.createLink("GRP_LOADS",loadCode , "LNK_LOAD", company.getCode(), (double) 1, rules.getToken());
           rules.println("The load has been added to the GRP_LOADS ");
           
          /* Determine the recipient code */
            String[] recipients = VertxUtils.getSubscribers(rules.realm(), "GRP_NEW_ITEMS");  

        /* SEND LOAD BE    */
            rules.publishBaseEntityByCode(loadCode, jobCode,"LNK_BEG", recipients);
        /* SEND JOB BE */
            rules.publishBaseEntityByCode(jobCode, jobCode,"LNK_BEG", recipients);
        /* Get the parent GRP of GRP_NEW_ITEMS */
            BaseEntity parentGrp = rules.getParent("GRP_NEW_ITEMS", "LNK_CORE");   
        /* SEND GRP_NEW_ITEMS BE */
            rules.publishBaseEntityByCode("GRP_NEW_ITEMS", parentGrp.getCode(),"LNK_CORE",recipients);
        
        /* Sending Messages */

                HashMap<String,String> contextMap = new HashMap<String, String>();
                contextMap.put("JOB", jobCode);
                contextMap.put("OWNER", rules.getUser().getCode()); 
        
                rules.println("The String Array is ::"+Arrays.toString(recipients));
                
             /* Sending toast message to owner frontend */
                rules.sendMessage("", recipients, contextMap, "MSG_CH40_NEW_JOB_POSTED", "TOAST");
                

             /* Sending message to BEG OWNER */
                rules.sendMessage("", recipients, contextMap, "MSG_CH40_NEW_JOB_POSTED", "SMS"); 
                rules.sendMessage("", recipients, contextMap, "MSG_CH40_NEW_JOB_POSTED", "EMAIL");
        
         /*  Calling the rule group : BucketView     */
           drools.setFocus("SendLayoutsAndData"); 
      }
      else if(actionCode.equalsIgnoreCase("cancel")){
      
       /*  String status =  rules.removeLink("GRP_DRAFTS", jobCode, "LNK_CORE");
        rules.println("Status after removing link  :: " +status);   */
       
       /*    Calling the rule group : BucketView     */
         drools.setFocus("SendLayoutsAndData");       
      }
             
     rules.footer(); 
        
end
