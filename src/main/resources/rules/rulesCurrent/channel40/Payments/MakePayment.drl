package life.genny.rules;

import life.genny.rules.QRules;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.Answer;
import io.vertx.core.json.JsonObject;
import life.genny.qwandautils.PaymentUtils;
import life.genny.rules.RulesUtils;
import life.genny.qwandautils.MergeUtil;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;

rule "Make Payment"
	agenda-group "makepayment"
	no-loop true
	when
		m : QDataAnswerMessage( QDataAnswerMessage.getData_type().equals(Answer.class.getSimpleName()) )
	    rules: QRules( (isState("PAYMENT_ANSWER") && !isState("PAYMENT_DONE")) )
	then
		rules.header();

		rules.println("Make Payment started");

		/* Save Payment-related answers as user/BEG attributes */
		String begCode = PaymentUtils.processPaymentAnswers(rules.getQwandaServiceUrl(), m, rules.getToken());

   		String assemblyAuthKey = PaymentUtils.getAssemblyAuthKey();
   		String assemblyId = MergeUtil.getAttrValue(rules.getUser().getCode(), "PRI_ASSEMBLY_USER_ID", rules.getToken());

		if(begCode != null && assemblyId != null) {

			/* Make payment */
			rules.showLoading("Processing payment...");

			Boolean isMakePaymentSucceeded = PaymentUtils.makePayment(begCode, assemblyAuthKey, rules.getToken());
			RulesUtils.println("isMakePaymentSucceeded ::"+isMakePaymentSucceeded);



						/* We grab the quoter code */
						String offerCode = MergeUtil.getAttrValue(begCode, "STT_HOT_OFFER", rules.getToken());
						if(offerCode != null) {

				            BaseEntity offerBe = MergeUtil.getBaseEntityForAttr(offerCode, rules.getToken());

				            String offerPrice = MergeUtil.getBaseEntityAttrValueAsString(offerBe, "PRI_OFFER_PRICE");

					        String ownerPriceExcGST= MergeUtil.getBaseEntityAttrValueAsString(offerBe, "PRI_OFFER_OWNER_PRICE_EXC_GST");
				            String ownerPriceIncGST= MergeUtil.getBaseEntityAttrValueAsString(offerBe, "PRI_OFFER_OWNER_PRICE_INC_GST");
				            String driverPriceExcGST= MergeUtil.getBaseEntityAttrValueAsString(offerBe, "PRI_OFFER_DRIVER_PRICE_EXC_GST");
				            String driverPriceIncGST= MergeUtil.getBaseEntityAttrValueAsString(offerBe, "PRI_OFFER_DRIVER_PRICE_INC_GST");
				            String feePriceExcGST= MergeUtil.getBaseEntityAttrValueAsString(offerBe, "PRI_OFFER_FEE_EXC_GST");
				            String feePriceIncGST= MergeUtil.getBaseEntityAttrValueAsString(offerBe, "PRI_OFFER_FEE_INC_GST");

				            String quoterCode= MergeUtil.getBaseEntityAttrValueAsString(offerBe, "PRI_QUOTER_CODE");
				            String quoterUname = MergeUtil.getBaseEntityAttrValueAsString(offerBe, "PRI_QUOTER_USERNAME");

							/* Allocate QUOTER as Driver */
							rules.updateLink(begCode, quoterCode, "LNK_BEG", "DRIVER", 1.0);

				            /* SEND QUOTER BE to FE */
				            String dataBeMsg = PaymentUtils.publishBaseEntityByCode(quoterCode, rules.getToken());
				            rules.publish("cmds", dataBeMsg);

				            /* Update BEG's prices */
							rules.updateBaseEntityAttribute(begCode, begCode, "PRI_PRICE", offerPrice);

							rules.updateBaseEntityAttribute(begCode, begCode, "PRI_OWNER_PRICE_EXC_GST", ownerPriceExcGST);
							rules.updateBaseEntityAttribute(begCode, begCode, "PRI_OWNER_PRICE_INC_GST", ownerPriceIncGST);

							rules.updateBaseEntityAttribute(begCode, begCode, "PRI_DRIVER_PRICE_EXC_GST", driverPriceExcGST);
							rules.updateBaseEntityAttribute(begCode, begCode, "PRI_DRIVER_PRICE_INC_GST", driverPriceIncGST);

							rules.updateBaseEntityAttribute(begCode, begCode, "PRI_FEE_EXC_GST", feePriceExcGST);
							rules.updateBaseEntityAttribute(begCode, begCode, "PRI_FEE_INC_GST", feePriceIncGST);

				            /* Update link between BEG and OFFER to weight= 0 */
				            rules.updateLink(begCode, offerCode, "LNK_BEG", "OFFER", 0.0);

				            /* Update BEG to have DRIVER_CODE as an attribute */
							rules.updateBaseEntityAttribute(begCode, begCode, "STT_IN_TRANSIT", quoterCode);


				            /* Send Messages */

				            /* Get offerCode, username, userCode, userFullName */
			                String userCode = rules.getUser().getCode();
				            String userName = rules.getAsString("preferred_username");
				            String userFullName = MergeUtil.getFullName(userCode, rules.getToken());

				            if(!isMakePaymentSucceeded) {

				            		RulesUtils.println("Sending error toast since make payment failed");
				            		HashMap<String,String> contextMap = new HashMap<String, String>();
			                		contextMap.put("DRIVER", quoterCode);
			               		contextMap.put("JOB", begCode);
			                		contextMap.put("QUOTER", quoterCode);

			                		String[] recipientArr = { userCode };

								/*Need to display error toast if make payment fails */
								rules.sendMessage(null, recipientArr, contextMap, "MSG_CH40_MAKE_PAYMENT_FAILED", "TOAST");
							}

							if(isMakePaymentSucceeded) {
							}

			                HashMap<String,String> contextMap = new HashMap<String, String>();
			                contextMap.put("DRIVER", quoterCode);
			                contextMap.put("JOB", begCode);
			                contextMap.put("QUOTER", quoterCode);

			                String[] recipientArr = { userCode };

							rules.sendMessage("", recipientArr, contextMap,"MSG_CH40_CONFIRM_QUOTE_OWNER", "TOAST");
			                /* Sending message to BEG OWNER - SMS Disabled, Email enabled to owner */
			                /* rules.sendMessage("", recipientArr, contextMap,"MSG_CH40_CONFIRM_QUOTE_OWNER", "SMS"); */
			                rules.sendMessage("", recipientArr, contextMap,"MSG_CH40_CONFIRM_QUOTE_OWNER", "EMAIL");

			                /* QUOTER config */
			                HashMap<String,String> contextMapForDriver = new HashMap<String, String>();
			                contextMapForDriver.put("JOB", begCode);
			                contextMapForDriver.put("OWNER", userCode);

			                String[] recipientArrForDriver = { quoterCode };

			                /* Sending message to DRIVER - Email and sms enabled */
			                rules.sendMessage("", recipientArrForDriver, contextMapForDriver,"MSG_CH40_CONFIRM_QUOTE_DRIVER", "TOAST");
			                rules.sendMessage("", recipientArrForDriver, contextMapForDriver,"MSG_CH40_CONFIRM_QUOTE_DRIVER", "SMS");
			                rules.sendMessage("", recipientArrForDriver, contextMapForDriver,"MSG_CH40_CONFIRM_QUOTE_DRIVER", "EMAIL");


							/* Set progression of LOAD delivery to 0 */
			  				Answer updateProgressAnswer = new Answer(begCode, begCode, "PRI_PROGRESS", Double.toString(0.0));
			   				rules.publishData(updateProgressAnswer);

							/* We ask FE to monitor GPS */
			   				rules.geofenceJob(begCode, rules.getUser().getCode(), 10.0);

			   				 /* Move BEG to GRP_APPROVED */
				            rules.moveBaseEntity(begCode, "GRP_NEW_ITEMS", "GRP_APPROVED", "LNK_CORE");

          					/* redirecting user to bucket */
          					rules.sendSublayout("bucket-dashboard", "dashboard_channel40.json");
			   			}


		}

		rules.footer();
end
