package life.genny.rules;

import life.genny.rules.QRules;

import life.genny.qwanda.message.QEventMessage;
import life.genny.qwandautils.PaymentUtils;
import life.genny.qwandautils.MergeUtil;

import io.vertx.core.json.JsonObject;

rule "Release Payment"
	when 
		$m : QEventMessage( event_type == "FORM_SUBMIT" && data.code == "QUE_USER_RATING_GRP" )
      	rules: QRules( isState("RELEASE_PAYMENT") )
	then
	
	 	rules.header();
		rules.println("Release Payment process started"); 
		rules.clearState("RELEASE_PAYMENT");
		
		String assemblyAuthKey = PaymentUtils.getAssemblyAuthKey();
       	String assemblyId = MergeUtil.getAttrValue(rules.getUser().getCode(), "PRI_ASSEMBLY_USER_ID", rules.getToken());
       	
       	String begCode = rules.getBaseEntityValueAsString(rules.getUser().getCode(), "STT_JOB_IS_RATING");
      	RulesUtils.println("Beg code in release payment ::"+begCode);
		
  		if(begCode != null && assemblyId != null) {
	    
		     PaymentUtils.releasePayment(begCode, assemblyAuthKey, rules.getToken());
		     rules.println("Payment is released!"); 
		     
		     
		     /* Send email to Owner and driver */
		     List<Link> linkList = rules.getLinks(begCode,"LNK_BEG");
		     String ownerCode = null;
		     String driverCode = null;
		     
		     for(Link link : linkList) {
		     	if(link.getLinkValue().equals("OWNER")) {
		     		ownerCode = link.getTargetCode();
		     	}
		     	
		     	if(link.getLinkValue().equals("DRIVER")) {
		     		driverCode = link.getTargetCode();
		     	}
		     }
		     
		     if(ownerCode != null && driverCode != null) {
		     	
		     	HashMap<String, String> contextMap = new HashMap<String, String>();
			 	contextMap.put("JOB", begCode);
			 	contextMap.put("OWNER", ownerCode);
			 	contextMap.put("DRIVER", driverCode);
			 	   
			 	/* Triggering email to owner */
			 	String[] messageToOwnerRecipients = new String[1];
		     	messageToOwnerRecipients[0] = ownerCode;
		     	rules.sendMessage(begCode, messageToOwnerRecipients, contextMap, "MSG_CH40_PAYMENT_RELEASED_OWNER", "TOAST");
		     	rules.sendMessage(begCode, messageToOwnerRecipients, contextMap, "MSG_CH40_PAYMENT_RELEASED_OWNER", "EMAIL");
		     	
		     	/* Triggering email to driver */
		     	String[] messageToDriverRecipients = new String[1];
		     	messageToDriverRecipients[0] = driverCode;
		     	rules.sendMessage(begCode, messageToDriverRecipients, contextMap, "MSG_CH40_PAYMENT_RELEASED_DRIVER", "TOAST");
		     	rules.sendMessage(begCode, messageToDriverRecipients, contextMap, "MSG_CH40_PAYMENT_RELEASED_DRIVER", "EMAIL");		
		        	     	
		     }
	
		}
	rules.footer();	
end