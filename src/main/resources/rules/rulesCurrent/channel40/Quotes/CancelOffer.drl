package life.genny.rules;

import life.genny.rules.RulesUtils;
import life.genny.rules.QRules;
import life.genny.qwandautils.MergeUtil;
import life.genny.qwandautils.QwandaUtils;
import life.genny.qwandautils.MessageUtils;
import life.genny.qwandautils.MergeUtil;
import life.genny.qwandautils.KeycloakUtils;
import org.apache.commons.lang3.StringUtils;

import life.genny.qwanda.Answer;
import life.genny.qwanda.Ask;
import life.genny.qwanda.Link;
import life.genny.qwanda.DateTimeDeserializer;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.entity.User;

import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QMessage.MessageData;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QEventBtnClickMessage;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwanda.message.QMSGMessage;
import life.genny.qwanda.message.QBaseMSGMessageType;

import io.vertx.rxjava.core.eventbus.EventBus;
import io.vertx.core.buffer.Buffer;
import io.vertx.core.json.JsonObject;
import io.vertx.core.json.JsonArray;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializationContext;
import com.google.gson.FieldNamingPolicy;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;

import java.lang.reflect.Type;
import java.time.LocalDateTime;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;

rule "Cancel Offer"
    when
        $m : QEventBtnClickMessage( event_type == "BTN_CLICK" && data.code == "BTN_CANCEL_OFFER")
        rules: QRules()
    then
        rules.header();
        /* Prepare Token & qwandaServiceUrl */
            String qwandaServiceUrl = rules.getQwandaServiceUrl();
            String tokenString = rules.getToken();  
                 
        /* Get offerCode, username, userCode, userFullName */
            String offerCode = $m.getItemCode();
            System.out.println("offerCode  ::   "+ offerCode);                    
            String userName = rules.getAsString("preferred_username");
            System.out.println("username   ::   "+ userName);                 
            String userCode =  rules.getUser().getCode();            
            System.out.println("usercode   ::   "+ userCode);
            String userFullName= MergeUtil.getFullName(userCode, tokenString);
            System.out.println("user fullName   ::   "+ userFullName);
        
            String linkCode= "LNK_BEG";
            String linkOffer= "OFFER";
            String linkQuoter= "QUOTER";
            String linkOwner = "OWNER";

        /* GET OFFER BE */
            BaseEntity offerBe = MergeUtil.getBaseEntityForAttr(offerCode, tokenString);
        
        /* GET attributes of the OFFER BE */
            String begCode= MergeUtil.getBaseEntityAttrValueAsString(offerBe, "PRI_BEG_CODE");
            String quoterCode= MergeUtil.getBaseEntityAttrValueAsString(offerBe, "PRI_QUOTER_CODE");
            
            System.out.println("------------------------------------------------------------------------");
            System.out.println("begCode          ::   " + begCode);
            System.out.println("quoterCode       ::   " + quoterCode);
            System.out.println("------------------------------------------------------------------------");

        /* Update PRI_NEXT_ACTION = null */ 
            String noneCode= "NONE";
            Answer offerActionAnswer = new Answer(userCode, offerCode, "PRI_NEXT_ACTION", noneCode);
            rules.saveAnswer(offerActionAnswer);               
            RulesUtils.println("Saving PRI_NEXT_ACTION Answer   ::   "+ offerActionAnswer);

        /* Update the number of offers for BEG */ 
            Integer offerCount = 0;
            String offerCountString= MergeUtil.getAttrValue(begCode, "PRI_OFFER_COUNT", tokenString);
            if(offerCountString == null) { 
                offerCount = 0;
            }else {                 
                offerCount = Integer.parseInt(offerCountString);
                if(offerCount >= 0){
                    offerCount = offerCount - 1;
                    System.out.println("Offer Count is   ::   " + offerCount);
                }
            }

            Answer offerCountAnswer = new Answer(begCode, begCode, "PRI_OFFER_COUNT", offerCount.toString());
            rules.saveAnswer(offerCountAnswer);                              

        /* Update link between BEG and OFFER to weight= 0 */
            rules.updateLink(begCode, offerCode, linkCode, linkOffer, 0.0);       
        
        /* Sending updated link of BEG */
            JsonArray updatedLink1 = new JsonArray(QwandaUtils.apiGet(qwandaServiceUrl + "/qwanda/entityentitys/" + begCode + "/linkcodes/" + linkCode + "/children", tokenString));
            /* Creating a data msg */
            JsonObject newLink1 = new JsonObject();
            newLink1.put("msg_type", "DATA_MSG");
            newLink1.put("data_type", "LINK_CHANGE");
            newLink1.put("items", updatedLink1);

            RulesUtils.ruleLogger("Updated Link of BEG", newLink1);
            /* publish new link data */
            newLink1.put("token", tokenString );
            rules.publish("cmds", newLink1);

        /* Messages */
            /* Sending message to OWNER */
                HashMap<String,String> contextMap = new HashMap<String, String>();
                contextMap.put("JOB", begCode); 
                contextMap.put("OFFER", offerCode); 
                contextMap.put("QUOTER", quoterCode);
            
                String ownerCode = QwandaUtils.getSourceOrTargetForGroupLink("GRP_NEW_ITEMS", linkCode, begCode, linkOwner, false, tokenString);
                RulesUtils.println("owner code ::"+ownerCode);
                String[] recipientArr = {ownerCode};
        
                rules.sendMessage("", recipientArr, contextMap,"MSG_CH40_CANCEL_OFFER_OWNER", "SMS"); 
                rules.sendMessage("", recipientArr, contextMap,"MSG_CH40_CANCEL_OFFER_OWNER", "EMAIL"); 
         
            /* Sending message to DRIVER */  
                HashMap<String,String> contextMapForDriver = new HashMap<String, String>();
                contextMapForDriver.put("JOB", begCode);
                contextMapForDriver.put("OWNER", ownerCode);
                contextMapForDriver.put("OFFER", offerCode);
            
                String[] recipientArrForDriver = {quoterCode};
            
                rules.sendMessage("", recipientArrForDriver, contextMapForDriver,"MSG_CH40_CANCEL_OFFER_DRIVER", "SMS");
                rules.sendMessage("", recipientArrForDriver, contextMapForDriver,"MSG_CH40_CANCEL_OFFER_DRIVER", "EMAIL"); 
        rules.footer();
end


