package life.genny.rules;

import life.genny.rules.RulesUtils;
import life.genny.rules.QRules;
import life.genny.qwandautils.MergeUtil;
import life.genny.qwandautils.QwandaUtils;
import life.genny.qwandautils.MessageUtils;
import life.genny.qwandautils.MergeUtil;
import life.genny.qwandautils.KeycloakUtils;
import org.apache.commons.lang3.StringUtils;

import life.genny.qwanda.Answer;
import life.genny.qwanda.Ask;
import life.genny.qwanda.Link;
import life.genny.qwanda.DateTimeDeserializer;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.entity.User;

import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QMessage.MessageData;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QCmdViewMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QEventBtnClickMessage;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwanda.message.QMSGMessage;
import life.genny.qwanda.message.QBaseMSGMessageType;

import io.vertx.core.buffer.Buffer;
import io.vertx.core.json.JsonObject;
import io.vertx.core.json.JsonArray;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializationContext;
import com.google.gson.FieldNamingPolicy;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;

import java.lang.reflect.Type;
import java.time.LocalDateTime;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;

rule "Submit Offer Owner"
    when
       $m : QEventMessage( event_type == "FORM_SUBMIT" && data.code == "QUE_OFFER_OWNER_GRP" ) 
       rules: QRules()
    then
        rules.header();
        /* Prepare GSON Deserialization */
            Gson gson = new GsonBuilder()
            .registerTypeAdapter(LocalDateTime.class, new JsonDeserializer<LocalDateTime>() {
                @Override
                public LocalDateTime deserialize(final JsonElement json, final Type type,
                    final JsonDeserializationContext jsonDeserializationContext)
                    throws JsonParseException {
                return LocalDateTime.parse(json.getAsJsonPrimitive().getAsString(), DateTimeFormatter.ISO_LOCAL_DATE_TIME);
                }

                public JsonElement serialize(final LocalDateTime date, final Type typeOfSrc,
                    final JsonSerializationContext context) {
                return new JsonPrimitive(date.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME)); 
                }
            }).create();
            Gson gson1 = new Gson();
            GsonBuilder gsonBuilder = new GsonBuilder();
            gsonBuilder.registerTypeAdapter(LocalDateTime.class, new DateTimeDeserializer());
            gson1 = gsonBuilder.create();

        /* Prepare Token & qwandaServiceUrl */
            String qwandaServiceUrl = rules.getQwandaServiceUrl();
            String tokenString = rules.getToken();        
        
        /* Get offerCode, username, userCode, userFullName */
            String dataString = $m.getData().getValue();
            JsonObject dataJson = new JsonObject(dataString);

            String offerCode = dataJson.getString("targetCode");
            System.out.println("offerCode   ::   "+ offerCode);   

            String userName = rules.getAsString("preferred_username");
            System.out.println("username   ::   "+ userName);    

            String userCode =  rules.getUser().getCode();            
            System.out.println("usercode   ::   "+ userCode);
            
            String userFullName= MergeUtil.getFullName(userCode, tokenString);
            System.out.println("user fullName   ::   "+ userFullName);
        
            String linkCode= "LNK_BEG";
            String linkOffer= "OFFER";
            String linkQuoter= "QUOTER";  
            String linkOwner = "OWNER";
            String linkCreator = "CREATOR";

        /* GET OFFER BE */
            BaseEntity offerBe = MergeUtil.getBaseEntityForAttr(offerCode, tokenString);

        /* GET  attributes of the OFFER BE */
            String begCode= MergeUtil.getBaseEntityAttrValueAsString(offerBe, "PRI_BEG_CODE");
            String quoterCode= MergeUtil.getBaseEntityAttrValueAsString(offerBe, "PRI_QUOTER_CODE");
            String quoterUname= MergeUtil.getBaseEntityAttrValueAsString(offerBe, "PRI_QUOTER_USERNAME");
            String quoterFullName= MergeUtil.getBaseEntityAttrValueAsString(offerBe, "PRI_QUOTER_FULLNAME");
            String priOfferCode= MergeUtil.getBaseEntityAttrValueAsString(offerBe, "PRI_OFFER_CODE");
            
            System.out.println("------------------------------------------------------------------------");
            System.out.println("BEG CODE          ::   " + begCode);
            System.out.println("QUOTER CODE       ::   " + quoterCode);
            System.out.println("QUOTER USERNAME   ::   " + quoterUname);
            System.out.println("QUOTER FULLNAME   ::   " + quoterFullName);
            System.out.println("PRI OFFER CODE    ::   " + priOfferCode);
            System.out.println("------------------------------------------------------------------------");

            String templateCode = null;
            Boolean linkExists = false;
            
        /* Check if a link exists between BEG & OFFER */
            Boolean linkBegOffer = QwandaUtils.checkIfLinkExistsForTarget(begCode,  linkCode, offerCode, tokenString );
            System.out.println("LINK EXISTS FOR BEG & OFFER ?  ::    "+ linkBegOffer);        
            
            /* COUNTER OFFER HAPPENING */
                if(linkBegOffer) {     
                    /* Driver is giving counter-offer */
                        if(userCode.equals(quoterCode)) {
                            RulesUtils.println("Driver is giving counter offer");
                            HashMap<String,String> counterContextMap = new HashMap<String, String>();
                            counterContextMap.put("QUOTER",quoterCode);
                            counterContextMap.put("JOB", begCode);  
                            counterContextMap.put("OFFER", priOfferCode); 
                
                            String ownerCode = QwandaUtils.getSourceOrTargetForGroupLink("GRP_NEW_ITEMS", linkCode, begCode, linkOwner, false, tokenString);
                            RulesUtils.println("owner code ::"+ownerCode);
                            String[] counterRecipientArr = {ownerCode};

                            rules.sendMessage("", counterRecipientArr, counterContextMap,"MSG_CH40_COUNTER_OFFER_FROM_DTO", "SMS");
                            rules.sendMessage("", counterRecipientArr, counterContextMap,"MSG_CH40_COUNTER_OFFER_FROM_DTO", "EMAIL");
                        
                            HashMap<String,String> counterContextMapForDriver = new HashMap<String, String>();
                            counterContextMapForDriver.put("JOB", begCode);
                            counterContextMapForDriver.put("OWNER", ownerCode);
                            counterContextMapForDriver.put("OFFER", priOfferCode);
                    
                            String[] counterRecipientArrForDriver = {quoterCode};

                            rules.sendMessage("", counterRecipientArrForDriver, counterContextMapForDriver,"MSG_CH40_COUNTER_OFFER_FROM_DTD", "SMS");
                            rules.sendMessage("", counterRecipientArrForDriver, counterContextMapForDriver,"MSG_CH40_COUNTER_OFFER_FROM_DTD", "EMAIL");

                            /* Update PRI_NEXT_ACTION = OWNER */ 
                                Answer offerActionAnswer1 = new Answer(userCode, offerCode, "PRI_NEXT_ACTION", linkOwner);
                                rules.saveAnswer(offerActionAnswer1);
                        }
                
                    /* Owner is giving counter offer */
                        if(!userCode.equals(quoterCode)) {
                            RulesUtils.println("Owner is giving counter offer");
                            HashMap<String,String> contextMap = new HashMap<String, String>();
                            contextMap.put("QUOTER",quoterCode);
                            contextMap.put("JOB", begCode);  
                            contextMap.put("OFFER", priOfferCode); 
                
                            String ownerCode = QwandaUtils.getSourceOrTargetForGroupLink("GRP_NEW_ITEMS", linkCode, begCode, linkOwner, false, tokenString);
                            RulesUtils.println("Owner sending counter offer! Owner code ::"+ownerCode);
                            String[] recipientArr = {ownerCode};

                            rules.sendMessage("", recipientArr, contextMap,"MSG_CH40_COUNTER_OFFER_OTO", "SMS");
                            rules.sendMessage("", recipientArr, contextMap,"MSG_CH40_COUNTER_OFFER_OTO", "EMAIL");
                        
                            HashMap<String,String> contextMapForDriver = new HashMap<String, String>();
                            contextMapForDriver.put("JOB", begCode);
                            contextMapForDriver.put("OWNER", ownerCode);
                            contextMapForDriver.put("OFFER", priOfferCode);
                    
                            String[] recipientArrForDriver = {quoterCode};
                    
                            rules.sendMessage("", recipientArrForDriver, contextMapForDriver,"MSG_CH40_COUNTER_OFFER_OTD", "SMS"); 
                            rules.sendMessage("", recipientArrForDriver, contextMapForDriver,"MSG_CH40_COUNTER_OFFER_OTD", "EMAIL"); 

                            /* Update PRI_NEXT_ACTION = OWNER */ 
                                Answer offerActionAnswer2 = new Answer(userCode, offerCode, "PRI_NEXT_ACTION", linkQuoter);
                                rules.saveAnswer(offerActionAnswer2);
                        }
                }   
            
            /* SUBMIT OFFER HAPPENING */
                if(!linkBegOffer) {
                    RulesUtils.println("Driver is submiting an offer");
                    linkExists = false;
                    /* link BEG and OFFER BE || OFFER */
                        System.out.println("\nCREATING LINK BETWEEN          ::   " + begCode + "  &  " + offerCode);
                        Link link1 = new Link( begCode, offerCode, linkCode, linkOffer);
                        link1.setWeight(.01);
                        String output1 = QwandaUtils.apiPostEntity(qwandaServiceUrl + "/qwanda/entityentitys", gson.toJson(link1),tokenString);

                    /* link OFFER and QUOTER BE || CREATOR */
                        rules.createLink(offerCode, userCode, "LNK_OFR", linkCreator, 1.0);       

                    /* Update the number of offers for BEG */ 
                        Integer offerCount = 0;
                        String offerCountString= MergeUtil.getAttrValue(begCode, "PRI_OFFER_COUNT", tokenString);
                        if(offerCountString == null) { 
                            offerCount = 1;
                        }else {                 
                            offerCount = Integer.parseInt(offerCountString);
                            offerCount = offerCount + 1;
                            System.out.println("Offer Count is   ::   " + offerCount);
                        }

                        Answer offerCountAnswer = new Answer(begCode, begCode, "PRI_OFFER_COUNT", offerCount.toString());
                        rules.saveAnswer(offerCountAnswer);
                    
                    /* Update PRI_NEXT_ACTION = OWNER */ 
                        Answer offerActionAnswer3 = new Answer(userCode, offerCode, "PRI_NEXT_ACTION", linkOwner);
                        rules.saveAnswer(offerActionAnswer3);

                    /* Driver is making-offer for first time */
                        HashMap<String,String> noLinkContextMap = new HashMap<String, String>();
                        noLinkContextMap.put("QUOTER",quoterCode);
                        noLinkContextMap.put("JOB", begCode); 
                        noLinkContextMap.put("OFFER", offerCode); 
                
                        String ownerCode = QwandaUtils.getSourceOrTargetForGroupLink("GRP_NEW_ITEMS", linkCode, begCode, linkOwner, false, tokenString);
                        RulesUtils.println("owner code ::"+ownerCode);
                        String[] noLinkRecipientArr = {ownerCode};

                        rules.sendMessage("", noLinkRecipientArr, noLinkContextMap,"MSG_CH40_SUBMIT_QUOTE_OWNER", "EMAIL"); 
                        rules.sendMessage("", noLinkRecipientArr, noLinkContextMap,"MSG_CH40_SUBMIT_QUOTE_OWNER", "SMS");  
                        
                        HashMap<String,String> noLinkContextMapForDriver = new HashMap<String, String>();
                        noLinkContextMapForDriver.put("JOB", begCode);
                        noLinkContextMapForDriver.put("OWNER", ownerCode);
                        noLinkContextMapForDriver.put("OFFER", offerCode);
                        noLinkContextMapForDriver.put("QUOTER", quoterCode);
                    
                        String[] noLinkRecipientArrForDriver = {quoterCode};

                        rules.sendMessage("", noLinkRecipientArrForDriver, noLinkContextMapForDriver,"MSG_CH40_SUBMIT_QUOTE_DRIVER", "SMS");
                        rules.sendMessage("", noLinkRecipientArrForDriver, noLinkContextMapForDriver,"MSG_CH40_SUBMIT_QUOTE_DRIVER", "EMAIL");
                }

        /* Save OFFER_DATE as answer */
            Answer offerDateTime = new Answer(userCode, offerCode, "PRI_OFFER_DATE", rules.getCurrentLocalDateTime());
            rules.saveAnswer(offerDateTime);

        /* Check if a link exists between USER & OFFER */
            Boolean linkUserOffer = QwandaUtils.checkIfLinkExistsForTarget(userCode,  linkCode, offerCode, tokenString );
            System.out.println("LINK EXISTS FOR USER & OFFER?  ::    "+ linkUserOffer);

        /* link BEG and QUOTER BE || QUOTER */
            if(!linkUserOffer){
                System.out.println("\nCREATING LINK BETWEEN          ::   " + begCode + "  &  " + quoterCode);
                Link link2 = new Link( begCode, quoterCode, linkCode, linkQuoter);
                link2.setWeight(1.0);
                String output2 = QwandaUtils.apiPostEntity(qwandaServiceUrl + "/qwanda/entityentitys", gson.toJson(link2),tokenString);
            }          

        /* Determine the recipient code */
            String[] recipients = VertxUtils.getSubscribers(rules.realm(),begCode);  

        /* SEND OFFER BE    */
            rules.publishBaseEntityByCode(offerCode, begCode,"LNK_BEG",recipients);
        /* SEND QUOTER BE */
            rules.publishBaseEntityByCode(quoterCode,begCode,"LNK_BEG",recipients);
        
        /* Sending updated link of BEG */
            JsonArray updatedLink = new JsonArray(QwandaUtils.apiGet(qwandaServiceUrl + "/qwanda/entityentitys/" + begCode + "/linkcodes/" + linkCode + "/children", tokenString));
            /* Creating a data msg */
                JsonObject newLink = new JsonObject();
                newLink.put("msg_type", "DATA_MSG");
                newLink.put("data_type", "LINK_CHANGE");
                newLink.put("items", updatedLink);
                System.out.println("------------------------------------------------------------------------");
                System.out.println("Updated Link   ::  "+newLink.toString());
                System.out.println("------------------------------------------------------------------------");
            /* publish new link data */
                newLink.put("token", tokenString );
                rules.publish("cmds", newLink);

        /* Sending message if offer exists*/


        /* Send BUCKETVIEW Cmd */
        drools.setFocus("bucketview");        
        rules.footer();
end
