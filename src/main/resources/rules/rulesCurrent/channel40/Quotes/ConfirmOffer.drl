package life.genny.rules;

import life.genny.rules.RulesUtils;
import life.genny.rules.QRules;
import life.genny.qwandautils.MergeUtil;
import life.genny.qwandautils.QwandaUtils;
import life.genny.qwandautils.MessageUtils;
import life.genny.qwandautils.MergeUtil;
import life.genny.qwandautils.PaymentUtils;
import life.genny.qwandautils.KeycloakUtils;
import org.apache.commons.lang3.StringUtils;

import life.genny.qwanda.Answer;
import life.genny.qwanda.Ask;
import life.genny.qwanda.Link;
import life.genny.qwanda.DateTimeDeserializer;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.entity.User;

import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QMessage.MessageData;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QEventBtnClickMessage;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwanda.message.QMSGMessage;
import life.genny.qwanda.message.QBaseMSGMessageType;

import io.vertx.rxjava.core.eventbus.EventBus;
import io.vertx.core.buffer.Buffer;
import io.vertx.core.json.JsonObject;
import io.vertx.core.json.JsonArray;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializationContext;
import com.google.gson.FieldNamingPolicy;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;

import java.lang.reflect.Type;
import java.time.LocalDateTime;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;

rule "Confirm Offer"
    when
        $m : QEventBtnClickMessage( event_type == "BTN_CLICK" && data.code == "BTN_CONFIRM_OFFER")
        rules: QRules()
    then
		rules.header();
		String tokenString = rules.getToken();

		String linkCode= "LNK_BEG";
		String linkOffer= "OFFER";
		String linkQuoter= "QUOTER";  
		String linkOwner = "OWNER";
		String linkCreator = "CREATOR";
		
		String value = $m.getData().getValue();
		if(value != null) {
			
			JsonObject data = new JsonObject(value);
			if(data != null) {
				
				String offerCode = data.getString("itemCode");
				String begCode = data.getString("hint");
				String userCode = rules.getUser().getCode();
				
				if(offerCode != null && begCode != null && userCode != null) {
					String userRole = MergeUtil.getAttrValue(offerCode, "PRI_NEXT_ACTION", tokenString);
					if(!userRole.equals("QUOTER")){

						rules.showLoading("Loading secure payment gateway...");
						rules.updateBaseEntityAttribute(begCode, begCode, "STT_HOT_OFFER", offerCode);

						/* Call Payment Rule */      
						drools.setFocus("payments");
						
					}
					if(userRole.equals("QUOTER")) {
						
						/* Update PRI_NEXT_ACTION AS OWNER */
						rules.updateBaseEntityAttribute(userCode, offerCode, "PRI_NEXT_ACTION", "OWNER");
						
						/* Messages */
							/* OWNER config */
								HashMap<String,String> contextMap = new HashMap<String, String>();
								contextMap.put("QUOTER",userCode);
								contextMap.put("JOB", begCode); 
								contextMap.put("OFFER", offerCode); 
						
								String ownerCode = QwandaUtils.getSourceOrTargetForGroupLink("GRP_NEW_ITEMS", linkCode, begCode, linkOwner, false, tokenString);
								RulesUtils.println("owner code ::"+ownerCode);
								String[] recipientArr = {ownerCode};

								/* Sending message to BEG OWNER */
								rules.sendMessage("", recipientArr, contextMap,"MSG_CH40_NEGOTIATE_ACCEPT_OWNER", "SMS"); 
								rules.sendMessage("", recipientArr, contextMap,"MSG_CH40_NEGOTIATE_ACCEPT_OWNER", "EMAIL"); 
							
							/* QUOTER config */
								HashMap<String,String> contextMapForDriver = new HashMap<String, String>();
								contextMapForDriver.put("JOB", begCode);
								contextMapForDriver.put("OWNER", ownerCode);
								contextMapForDriver.put("OFFER", offerCode);
								contextMapForDriver.put("QUOTER", userCode);
							
								String[] recipientArrForDriver = {userCode};

								/* Sending message to QUOTER */
								rules.sendMessage("", recipientArrForDriver, contextMapForDriver,"MSG_CH40_NEGOTIATE_ACCEPT_DRIVER", "SMS"); 
								rules.sendMessage("", recipientArrForDriver, contextMapForDriver,"MSG_CH40_NEGOTIATE_ACCEPT_DRIVER", "EMAIL"); 
					}
				}
			}
		}
		
	
rules.footer();
end