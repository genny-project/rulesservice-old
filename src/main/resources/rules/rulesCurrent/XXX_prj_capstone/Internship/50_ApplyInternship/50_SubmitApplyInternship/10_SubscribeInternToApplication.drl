package life.genny.rules;
import life.genny.rules.QRules;

/* Subscribe Intern to APPLICATION */
rule "Submit Apply Internship - Step 1"
	when
		rules: QRules( 	isState("SUBSCRIBE_INTERN_TO_APPLICATION") && 
						isState("SUBMIT_APPLY_INTERNSHIP_READY") && 
						isState("QUE_INTERNSHIP_ADDITIONAL_GRP") && 
						isState("EVENT_FORM_SUBMIT") && 
						isState("SUBMIT") && 
						!isState("LOOP_SUBMIT_APPLY_INTERNSHIP_STEP1")) 

	 then
	 	rules.header();
        rules.setState("LOOP_SUBMIT_APPLY_INTERNSHIP_STEP1");

		/* get application from state map */
        BaseEntity application = rules.getAsBaseEntity("applicationBe");

		if(application != null){
			rules.subscribeUserToBaseEntity(rules.getUser().getCode(), application.getCode());
			rules.setState("SUBSCRIBED_INTERN_TO_APPLICATION");

			/* ========================================================================= */
			BaseEntity eduProvider = rules.getParent(rules.getUser().getCode(), "LNK_EDU");
            if(eduProvider != null){
				rules.println("eduProvider is   ::   " + eduProvider.getCode());
				
				List<BaseEntity> eduProviderStaffs = rules.getChildrens(eduProvider.getCode(), "LNK_EDU", "STAFF");
				rules.println("2. No. of eduProviderStaffs   ::   " + eduProviderStaffs.size());

				if(eduProviderStaffs != null){
					for(BaseEntity eduProviderStaff : eduProviderStaffs){
						rules.subscribeUserToBaseEntity(eduProviderStaff.getCode(), application.getCode());
					}
					rules.setState("SUBSCRIBED_EDU_PROVIDER_STAFFS_TO_APPLICATION");
				}else{
					rules.println("eduProviderStaffs is null");
				}			
            }else{
                rules.println("No staff found for eduProvider");
            }
			/* ========================================================================= */
			
			rules.setState("SUBSCRIBE_HOST_COMPANY_TO_APPLICATION");
		}else{
            rules.println("application BaseEntity is null");			
		}
	 	rules.footer();      
end
