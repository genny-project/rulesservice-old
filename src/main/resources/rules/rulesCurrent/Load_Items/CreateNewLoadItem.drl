package com.sample;

import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QMessage.MessageData;
import io.vertx.rxjava.core.eventbus.EventBus;
import life.genny.qwandautils.QwandaUtils;
import life.genny.qwandautils.JsonUtils;
import com.google.gson.Gson;
import com.sample.*;
import java.util.Map;
import java.util.HashSet;
import java.util.Set;
import life.genny.qwanda.entity.User;
import life.genny.qwanda.Ask;
import life.genny.qwanda.Link;

global java.lang.String REACT_APP_QWANDA_API_URL;

/* Rule handling Next or Button click in the Create Job */
rule "Create New Load Item"
    when
      $m : QEventMessage( event_type == "BTN_CLICK" && data.code == "QUE_CREATE_NEW_LOAD_ITEM" )
      rules : QRules()
      then
  		rules.header();
        
         /* Creating new base-entity BEG for Posting new Job */
        BaseEntity loadItem = QwandaUtils.createBaseEntityByCode(QwandaUtils.getUniqueId(rules.getUser().getCode(), null, "ITM", rules.getToken()), "Load Item", rules.getQwandaServiceUrl(), rules.getToken());
        String loadItemCode = loadItem.getCode();
        rules.println("BaseEntity Load Item created is   ::  "+loadItem.toString());
        rules.println("The Load Item code is   ::  "+loadItemCode);
        /* Get data.value and decode */
        String dataString = $m.data.getValue();
        JsonObject dataJson = new JsonObject(dataString);
        String loadCode = dataJson.getString("targetCode");
        rules.println("The Load code is   ::  "+loadCode);
        
        
        /* link newly created Item to the LOAD */
        QwandaUtils.apiPostEntity(rules.getQwandaServiceUrl() + "/qwanda/entityentitys", JsonUtils.toJson(new Link(loadCode,loadItemCode,"LNK_LOAD_ITEM")),rules.getToken());
        /* Getting Post Load Question GRP */
       JsonObject qCreateLoadItem = new JsonObject( QwandaUtils.apiGet(rules.getQwandaServiceUrl()+"/qwanda/baseentitys/"+rules.getUser().getCode()+"/asks3/QUE_CREATE_LOAD_ITEM_GRP/"+loadItemCode, rules.getToken()));
       qCreateLoadItem.put("aliasCode", $m.data.getCode());
       qCreateLoadItem.put("token", rules.getToken());
       qCreateLoadItem.put("msg_type", "DATA_MSG");
       System.out.println("QName Json: "+qCreateLoadItem.toString());
       rules.publish("cmds",qCreateLoadItem);

       /* sending cmd FORM_VIEW */
       QCmdMessage cmdFormView = new QCmdMessage("CMD_VIEW","FORM_VIEW");
       /* Convert cmd to JSON Obj */
       JsonObject formViewJson = new JsonObject().mapFrom(cmdFormView);
        formViewJson.put("root", "QUE_CREATE_LOAD_ITEM_GRP");
        formViewJson.put("token", rules.getToken());
       System.out.println(" ##################### ");
       System.out.println("CMD VIEW Msg ="+formViewJson.toString());
       System.out.println(" #################### ");
       /* Publish it to the EventBus */
       rules.publish("cmds", formViewJson);        

  		rules.footer();       
end


