package life.genny.rules;

import life.genny.rules.RulesUtils;
import life.genny.rules.QRules;
import life.genny.qwandautils.MergeUtil;
import life.genny.qwandautils.QwandaUtils;
import life.genny.qwandautils.MessageUtils;
import life.genny.qwandautils.MergeUtil;
import life.genny.qwandautils.KeycloakUtils;
import org.apache.commons.lang3.StringUtils;

import life.genny.qwanda.Answer;
import life.genny.qwanda.Ask;
import life.genny.qwanda.Link;
import life.genny.qwanda.DateTimeDeserializer;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.entity.User;

import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QMessage.MessageData;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QCmdViewMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QEventBtnClickMessage;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwanda.message.QMSGMessage;
import life.genny.qwanda.message.QBaseMSGMessageType;

import io.vertx.rxjava.core.eventbus.EventBus;
import io.vertx.core.buffer.Buffer;
import io.vertx.core.json.JsonObject;
import io.vertx.core.json.JsonArray;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializationContext;
import com.google.gson.FieldNamingPolicy;

import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;

import java.lang.reflect.Type;
import java.time.LocalDateTime;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;

rule "Send Message"

    when
	    $m : QEventMessage( event_type == "BTN_CLICK" && data.code == "BTN_SEND_MESSAGE" )
        rules: QRules( ) 
     then
     	
     	rules.header();
     		
	    String data = $m.getData().getValue();
		
  		if(data != null) {
  			
  			JsonObject dataJson = new JsonObject(data);
  		    String text = dataJson.getString("value");
  		    String chatCode = dataJson.getString("itemCode");
  		    
  		    if(text != null && chatCode != null) {
  	            	
  		    		/* creating new message */
  		    		BaseEntity newMessage = QwandaUtils.createBaseEntityByCode(QwandaUtils.getUniqueId(rules.getUser().getCode() , null, "MSG", rules.getToken()), "message", rules.getQwandaServiceUrl(), rules.getToken());
  		    		if(newMessage != null) {  		    			
  		    			
  		    			QwandaUtils.createLink(chatCode, newMessage.getCode(), "LNK_MESSAGES", "message", 1.0, rules.getToken()); 
		    			
		    			List<BaseEntity> stakeholders = rules.getBaseEntitysByParentAndLinkCode(chatCode, "LNK_USER");
		    			String[] recipientCodeArray = new String[stakeholders.size()];
		    			
		    			int counter = 0;
		    			for(BaseEntity stakeholder: stakeholders) {
		    				recipientCodeArray[counter] = stakeholder.getCode();
		    				counter += 1;
		    			}

  		    			Answer textMessage = new Answer(newMessage.getCode(), newMessage.getCode(), "PRI_MESSAGE", text);
		    			Answer creator = new Answer(newMessage.getCode(), newMessage.getCode(), "PRI_CREATOR", rules.getUser().getCode());
		    			Answer items[] = new Answer[2];
		    			items[0] = textMessage;
		    			items[1] = creator;
		    			
		    			QDataAnswerMessage msg = new QDataAnswerMessage(items);
		    			msg.setRecipientCodeArray(recipientCodeArray);
		    			msg.setToken(rules.getToken()); 

		    			String jsonAnswer = RulesUtils.toJson(msg);
		    			QwandaUtils.apiPostEntity(rules.getQwandaServiceUrl() + "/qwanda/answers/bulk", jsonAnswer, rules.getToken()); 
		    			
  		    			
		    			/* QwandaUtils.postAnswer(rules.getQwandaServiceUrl(), rules.getToken(), textMessage); */
		    			/* QwandaUtils.postAnswer(rules.getQwandaServiceUrl(), rules.getToken(), creator); */
  		    			
		    			 rules.publishBaseEntityByCode(newMessage.getCode(), recipientCodeArray);

		       	 	/* rules.publishData(newMessage, recipientCodeArray);	    	 */		
  		    		}
  		    }
  		}
     	
     	rules.footer();
end
