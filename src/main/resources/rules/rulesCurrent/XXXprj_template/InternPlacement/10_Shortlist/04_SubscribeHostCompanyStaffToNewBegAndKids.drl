package life.genny.rules;
import life.genny.rules.QRules;

/* SUBSCRIBE Host Company Staff To New Beg */
rule "Subscribe Host Company Staff To New Beg and Kids"
	when
		rules: QRules( 	isState("SUBSCRIBE_HOST_COMPANY_TO_NEW_BEG_AND_KIDS") && 
		                isState("SHORTLIST_INTERN_READY") && 
						isState("BTN_SHORTLIST_INTERN") && 
						isState("EVENT_BTN_CLICK") && 
						!isState("LOOP_SUBSCRIBE_HOST_COMPANY_TO_NEW_BEG_AND_KIDS")) 
	 then
	 	rules.header();
        rules.setState("LOOP_SUBSCRIBE_HOST_COMPANY_TO_NEW_BEG_AND_KIDS");

        BaseEntity newBeg = rules.getAsBaseEntity("newBegBe");
        BaseEntity company = rules.getAsBaseEntity("companyBe");
        
		if(newBeg == null){
			rules.println("newBeg is null");
			return;
		}
		if(company == null){
			rules.println("company is null");
			return;
		}else{
			BaseEntity companyStaff = rules.getChildren(company.getCode(), "LNK_STAFF", "STAFF");
            if(companyStaff != null){
				rules.println("companyStaff is   ::   " + companyStaff.getCode());
                rules.subscribeUserToBaseEntity(companyStaff.getCode(), newBeg.getCode());

				List<BaseEntity> begKids = rules.getBaseEntitysByParentAndLinkCode(newBeg.getCode(), "LNK_BEG", 0, 500, false);

				if(begKids != null){
					rules.subscribeUserToBaseEntities(companyStaff.getCode(), begKids);
					rules.setState("SUBSCRIBED_HOST_COMPANY_TO_NEW_BEG_AND_KIDS");
					rules.setState("PUBLISH_NEW_BEG_AND_KIDS_TO_HOST_COMPANY");
				}else{
					rules.println("begKids is null");
				}
			}else{
				rules.println("company staff is null");
			}
		}
	 	rules.footer();      
end