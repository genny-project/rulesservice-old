package life.genny.rules;

import life.genny.rules.RulesUtils;
import life.genny.rules.QRules;

import life.genny.qwanda.Answer;
import life.genny.qwanda.message.QEventAttributeValueChangeMessage;

import life.genny.qwandautils.PaymentUtils;
import life.genny.qwandautils.QwandaUtils;


rule "Assembly user updation for attribute change - Postcode"
    when
    	m: QEventAttributeValueChangeMessage( QEventAttributeValueChangeMessage.getData().getCode().equals("PRI_ADDRESS_POSTCODE")  && getAnswer().getTargetCode().startsWith("PER_") ) 
    	rules: QRules( isState("STARTED"))
    then    
		RulesUtils.header(drools.getRule().getName());
        
        BaseEntity userBe = rules.getUser();
		String assemblyAuthToken = PaymentUtils.getAssemblyAuthKey();
		String assemblyId = userBe.getValue("PRI_ASSEMBLY_USER_ID", null);
    	
    	if(assemblyId != null) {
    		 
    	/* extract answers */
      	Answer answer = m.getAnswer();
        
        String targetCode = answer.getTargetCode();
        String sourceCode = answer.getSourceCode();
        String value = answer.getValue();
        String attributeCode = m.data.getCode();

        rules.println("Printing Answer data recieved for Update in Assembly  ::");  
        rules.println("\nSource Code: " +sourceCode + "\nTarget Code: " +targetCode + "\nAttribute Code: " +attributeCode + "\nAttribute Value: " +value);
           
        /* Updates assembly user profile */
        String response = PaymentUtils.updateUserInfo(assemblyId, attributeCode, value, assemblyAuthToken);
        		rules.println("updated payments response ::"+response);
         
    	}
        
        RulesUtils.footer(drools.getRule().getName());
end