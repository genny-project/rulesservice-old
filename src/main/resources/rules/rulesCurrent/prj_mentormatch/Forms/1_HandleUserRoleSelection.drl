package life.genny.rules;

import life.genny.rules.RulesUtils;
import life.genny.rules.QRules;
import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.entity.EntityEntity;
import life.genny.qwanda.Answer;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwanda.message.QEventAttributeValueChangeMessage;
import life.genny.qwandautils.KeycloakUtils;
import life.genny.qwandautils.QwandaUtils;
import life.genny.qwandautils.MergeUtil;
import life.genny.rules.RulesUtils;
import life.genny.qwanda.Link;

import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializationContext;
import java.time.LocalDateTime;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import io.vertx.core.json.JsonArray;

rule "Handle user role mentormatch"
    when
        $m: QEventAttributeValueChangeMessage( event_type == "EVT_ATTRIBUTE_VALUE_CHANGE" && QEventAttributeValueChangeMessage.getData().getCode().equals("LNK_USER_ROLE_LISTS") )
        rules: QRules( isState("STARTED") && !isState("ROLE_SELECTED") )
     then

     	rules.header();

         String userCode = rules.getUser().getCode();

         Answer newAnswer = $m.getAnswer();
         String targetCode = newAnswer.getTargetCode();
         String sourceCode = newAnswer.getSourceCode();

         String booleanValueMentor = "FALSE";
         String booleanValueMentee = "FALSE";

         String answerValue = newAnswer.getValue();

         try {

             // if new answer is a JSON object stringified it means the user is both a mentor AND a mentee
             JsonArray answerJson = new JsonArray(answerValue);
             if(answerJson != null && answerValue.startsWith("[")) {

                rules.println(answerValue);

                Boolean isMentor = false;
                Boolean isMentee = false;

                for (Object role : answerJson) {

                    String roleCode = (String)role;
                    rules.println(roleCode);

                    if(roleCode.equals("SEL_MENTOR")) {
                        isMentor = true;
                    }
                    if(roleCode.equals("SEL_MENTEE")) {
                        isMentee = true;
                    }
         		}

                booleanValueMentor = isMentor ? "TRUE" : "FALSE";
                booleanValueMentee = isMentee ? "TRUE" : "FALSE";
             }
             else {

                 // otherwise it is only one of them
                 if(newAnswer.getValue().equals("SEL_MENTOR"))
                 {
                     booleanValueMentor = "TRUE";
                     booleanValueMentee = "FALSE";
                 }

                 if(newAnswer.getValue().equals("SEL_MENTEE"))
                 {
                    booleanValueMentor = "FALSE";
                    booleanValueMentee = "TRUE";
                 }
             }
         }
         catch(Exception e) {

             rules.println("SINGLE SELECTION");

             // otherwise it is only one of them
             if(newAnswer.getValue().equals("SEL_MENTOR"))
             {
                 booleanValueMentor = "TRUE";
                 booleanValueMentee = "FALSE";
             }

             if(newAnswer.getValue().equals("SEL_MENTEE"))
             {
                booleanValueMentor = "FALSE";
                booleanValueMentee = "TRUE";
             }
         }

         rules.println(booleanValueMentee);
         rules.println(booleanValueMentor);

         rules.updateBaseEntityAttribute(userCode, userCode, "PRI_MENTOR", booleanValueMentor);
         rules.updateBaseEntityAttribute(userCode, userCode, "PRI_MENTEE", booleanValueMentee);
         rules.setState("ROLE_SELECTED");
         rules.footer();

end
