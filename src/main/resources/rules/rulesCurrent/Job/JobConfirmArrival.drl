
import life.genny.rules.QRules;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.message.QEventMessage;
import life.genny.rules.RulesUtils;
import io.vertx.core.json.JsonObject;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

rule "Manually Confirm Arrival"
no-loop true
when
  $m : QEventMessage( event_type == "BTN_CLICK" && data.code == "BTN_CONFIRM_ARRIVAL")
  rules: QRules( !isState("CONFIRMED_ARRIVAL"))
then
    
		RulesUtils.header(drools.getRule().getName());
  		String data = $m.getData().getValue();
  		rules.setState("CONFIRMED_ARRIVAL");
  		
  		if(data != null) {
		
		     JsonObject dataJson = new JsonObject(data);
		     String begCode = dataJson.getString("itemCode");
		     if(begCode != null) {
		    	 	
		    	 	/* mark job as NOT delivered by driver */
			     Answer beAnswer = new Answer(begCode, begCode, "PRI_DRIVER_CONFIRMED_DELIVERY", "FALSE");
		         rules.publishData(beAnswer);  
		            
		    	 	rules.moveBaseEntity(begCode, "GRP_IN_TRANSIT", "GRP_COMPLETED","LNK_CORE");
		    	 	
		    	 	HashMap<String, String> contextMap = new HashMap<String, String>();
		    	    contextMap.put("JOB", begCode);
		    	    
		    	    /* List<BaseEntity> begKids = rules.getBaseEntitysByParentAndLinkCode(begCode,"LNK_BEG", 0, 20, false) ;
		  
		    	    if(begKids != null) {
		    	    		
			    	    	Set<String> recipientSet = new HashSet<String>();
				    	    
			    		for (BaseEntity kid : begKids) {
			    			
			    	    		List<Link> links = rules.getLinks(kid.getCode(), "LNK_BEG");
			    	    		 RulesUtils.println("Got LINKS");
			    	    		 RulesUtils.println(links);
			    	    		if(links != null) {
			    	    			
			    	    			for (Link link : links) {
				    	    				
			    			    	    RulesUtils.println(link.getLinkValue());

			    	    				contextMap.put(link.getLinkValue(), link.getTargetCode());
				    	    			
			    	    				RulesUtils.println("TargetCode: ", link.getTargetCode());
			    	    				RulesUtils.println(link.getTargetCode().startsWith("PER_"));
			    	    				if (link.getTargetCode().startsWith("PER_")) {
				    	    				recipientSet.add(link.getTargetCode());
				    	    			} 
				    	    		}
			    	    		}
			    	    }
			    	    
			    		RulesUtils.println(recipientSet); */
			    		String[] recipients = new String[1];
			    		recipients[0] = rules.getUser().getCode();
			    		rules.sendMessage(begCode, recipients, contextMap, "MSG_CH40_DRIVER_IN_TRANSIT", "SMS");
		    	    }
		     }
		
		RulesUtils.footer(drools.getRule().getName());

end