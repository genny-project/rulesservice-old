package life.genny.rules;

import life.genny.rules.RulesUtils;
import life.genny.rules.QRules;
import life.genny.qwandautils.QwandaUtils;
import life.genny.qwandautils.MergeUtil;
import life.genny.qwanda.Answer;
import life.genny.qwanda.message.QEventAttributeValueChangeMessage;
import life.genny.qwanda.entity.BaseEntity;
import java.lang.Double;
import java.lang.String;
import java.math.BigDecimal;

function Double calculate(String price) {

	Double ownerOriginalPrice = Double.parseDouble(price);
    return ownerOriginalPrice;
}

/*  Calculate Load Price adding service fee  */
rule "Calculate Load Price"
	no-loop true
    when
    	$m: QEventAttributeValueChangeMessage(  QEventAttributeValueChangeMessage.getData().getCode().equals("PRI_PRICE")  && getAnswer().getTargetCode().startsWith("BEG_") || 
												QEventAttributeValueChangeMessage.getData().getCode().equals("PRI_OFFER_PRICE")  && getAnswer().getTargetCode().startsWith("OFR_") )
    	rules : QRules()
    then    
		rules.header();

		Answer newAnswer = $m.getAnswer();

		String beCode = newAnswer.getTargetCode();
		BigDecimal answerPrice = new BigDecimal(Double.parseDouble(newAnswer.getValue()));
		BigDecimal fees = new BigDecimal(0);
		fees = rules.calcFee( answerPrice );
	
		BigDecimal feePriceExcGST = fees;
		BigDecimal feePriceIncGST = rules.includeGST(fees);

		String priceCode = $m.getData().getCode();
		
		String ownerPriceIncGstCode = priceCode.replace("_PRICE", "_OWNER_PRICE_INC_GST");
		String ownerPriceExcGstCode = priceCode.replace("_PRICE", "_OWNER_PRICE_EXC_GST");

		String driverPriceIncGstCode = priceCode.replace("_PRICE", "_DRIVER_PRICE_INC_GST");
		String driverPriceExcGstCode = priceCode.replace("_PRICE", "_DRIVER_PRICE_EXC_GST");


		String feePriceIncGstCode = priceCode.replace("_PRICE", "_FEE_INC_GST");
		String feePriceExcGstCode = priceCode.replace("_PRICE", "_FEE_EXC_GST");
		
		BigDecimal ownerPriceExcGST = new  BigDecimal(1);
		BigDecimal ownerPriceIncGST = new  BigDecimal(2);
		BigDecimal driverPriceExcGST = new BigDecimal(3);
		BigDecimal driverPriceIncGST = new BigDecimal(4);

		/* Get userRole */
		String userRole = null;
		if(newAnswer.getTargetCode().startsWith("OFR_")) {			
			String offerCode = newAnswer.getTargetCode();
			userRole = rules.getBaseEntityValueAsString(offerCode, "PRI_NEXT_ACTION");
		}

		System.out.println(" targetCode " + newAnswer.getTargetCode() );
		System.out.println(" userRole " + userRole );

		if( newAnswer.getTargetCode().startsWith("BEG_") || ( newAnswer.getTargetCode().startsWith("OFR_") && userRole.equals("OWNER")) ) {
			System.out.println("=======================================================================================================");
			System.out.println("OWNER countering   ::   ");
			System.out.println(" targetCode" +newAnswer.getTargetCode() );
			ownerPriceExcGST = answerPrice;
			ownerPriceIncGST = rules.includeGST(answerPrice);
			driverPriceIncGST = ownerPriceIncGST.subtract(feePriceIncGST);
			driverPriceExcGST = ownerPriceExcGST.subtract(feePriceExcGST);
			System.out.println("ownerPriceExcGST   ::   " + ownerPriceExcGST);
			System.out.println("ownerPriceIncGST   ::   " + ownerPriceIncGST);
			System.out.println("driverPriceIncGST   ::   " + driverPriceIncGST);
			System.out.println("driverPriceExcGST   ::   " + driverPriceExcGST);
			System.out.println("=======================================================================================================");
		}
		else if(newAnswer.getTargetCode().startsWith("OFR_") && (userRole.equals("QUOTER") || userRole.equals(null))) {
			System.out.println("=======================================================================================================");
			System.out.println("QUOTER countering   ::   ");
			driverPriceExcGST = answerPrice;
			driverPriceIncGST = rules.includeGST(answerPrice);
			ownerPriceExcGST = driverPriceExcGST.add(feePriceExcGST);
			ownerPriceIncGST = rules.includeGST(ownerPriceExcGST);

			System.out.println("ownerPriceExcGST   ::   " + ownerPriceExcGST);
			System.out.println("ownerPriceIncGST   ::   " + ownerPriceIncGST);
			System.out.println("driverPriceIncGST   ::   " + driverPriceIncGST);
			System.out.println("driverPriceExcGST   ::   " + driverPriceExcGST);
			System.out.println("=======================================================================================================");
		}


		/* Saving  OWNER_PRICE_INC_GST */
			Answer ownerPriceIncGSTAnswer = new Answer(rules.getUser().getCode(), beCode, ownerPriceIncGstCode, String.valueOf(ownerPriceIncGST));          
			rules.publishData(ownerPriceIncGSTAnswer);   

		/* Saving  OWNER_PRICE_EXC_GST */
			Answer ownerPriceExcGSTAnswer = new Answer(rules.getUser().getCode(), beCode, ownerPriceExcGstCode, String.valueOf(ownerPriceExcGST));          
			rules.publishData(ownerPriceExcGSTAnswer); 

		/* Saving  DRIVER_PRICE_INC_GST */
			Answer driverPriceIncGSTAnswer = new Answer(rules.getUser().getCode(), beCode, driverPriceIncGstCode, String.valueOf(driverPriceIncGST));          
			rules.publishData(driverPriceIncGSTAnswer);   

		/* Saving  DRIVER_PRICE_EXC_GST */
			Answer driverPriceExcGSTAnswer = new Answer(rules.getUser().getCode(), beCode, driverPriceExcGstCode, String.valueOf(driverPriceExcGST));          
			rules.publishData(driverPriceExcGSTAnswer); 

		/* Saving  FEE_INC_GST */
			Answer feePriceIncGstCodeAnswer = new Answer(rules.getUser().getCode(), beCode, feePriceIncGstCode, String.valueOf(feePriceIncGST));          
			rules.publishData(feePriceIncGstCodeAnswer);   
			
		/* Saving  FEE_EXC_GST */
			Answer feePriceExcGstCodeAnswer = new Answer(rules.getUser().getCode(), beCode, feePriceExcGstCode, String.valueOf(feePriceExcGST));          
			rules.publishData(feePriceExcGstCodeAnswer); 

		rules.footer();
end