package life.genny.rules;

import life.genny.rules.RulesUtils;
import life.genny.rules.QRules;
import life.genny.qwandautils.QwandaUtils;
import life.genny.qwandautils.MergeUtil;
import life.genny.qwanda.Answer;
import life.genny.qwanda.message.QEventAttributeValueChangeMessage;
import life.genny.qwanda.entity.BaseEntity;
import java.lang.Double;
import java.lang.String;
import java.math.BigDecimal;

import org.javamoney.moneta.Money;
import javax.money.CurrencyUnit;
import javax.money.Monetary;

import org.json.simple.JSONObject;

/*  Calculate Load Price adding service fee  */
rule "Calculate Load Price"
    when
    	$m: QEventAttributeValueChangeMessage(  QEventAttributeValueChangeMessage.getData().getCode().equals("PRI_PRICE")  && getAnswer().getTargetCode().startsWith("BEG_") || 
												QEventAttributeValueChangeMessage.getData().getCode().equals("PRI_OFFER_PRICE")  && getAnswer().getTargetCode().startsWith("OFR_") )
    	rules : QRules()
    then    
		rules.header();
		String tokenString = rules.getToken();
		Answer newAnswer = $m.getAnswer();
		
		/* BaseEntity Code */
			String beCode = newAnswer.getTargetCode();
		
		/* Get amoiunt value */
			JSONObject moneyJson = JsonUtils.fromJson(newAnswer.getValue(), JSONObject.class);
			
			Integer amountValue = Integer.parseInt(moneyJson.get("amount").toString());
			String currencyType = moneyJson.get("currency").toString();
		
		/* Price recieved as an answer */		
			CurrencyUnit DEFAULT_CURRENCY = Monetary.getCurrency(currencyType);		
			Money answerPrice = Money.of(amountValue, DEFAULT_CURRENCY);

		/* Price attributeCode and Other price atrributeCode generation */
			String priceCode = $m.getData().getCode();			
			String ownerPriceIncGstCode = priceCode.replace("_PRICE", "_OWNER_PRICE_INC_GST");
			String ownerPriceExcGstCode = priceCode.replace("_PRICE", "_OWNER_PRICE_EXC_GST");
			String driverPriceIncGstCode = priceCode.replace("_PRICE", "_DRIVER_PRICE_INC_GST");
			String driverPriceExcGstCode = priceCode.replace("_PRICE", "_DRIVER_PRICE_EXC_GST");
			String feePriceIncGstCode = priceCode.replace("_PRICE", "_FEE_INC_GST");
			String feePriceExcGstCode = priceCode.replace("_PRICE", "_FEE_EXC_GST");
		
			Money ownerPriceExcGST = Money.of(0, DEFAULT_CURRENCY);
			Money ownerPriceIncGST = Money.of(0, DEFAULT_CURRENCY);
			Money driverPriceExcGST = Money.of(0, DEFAULT_CURRENCY);
			Money driverPriceIncGST = Money.of(0, DEFAULT_CURRENCY);

			Money fees = Money.of(0, DEFAULT_CURRENCY);
			Money feePriceExcGST = Money.of(0, DEFAULT_CURRENCY);
			Money feePriceIncGST = Money.of(0, DEFAULT_CURRENCY);

		/* Get userRole */
			String userRole = null;
			if(newAnswer.getTargetCode().startsWith("OFR_")) {			
				String offerCode = newAnswer.getTargetCode();
				System.out.println(" offerCode BE "+ offerCode);
				userRole = MergeUtil.getAttrValue(offerCode, "PRI_NEXT_ACTION", tokenString);
			}

			System.out.println(" targetCode " + newAnswer.getTargetCode() );
			System.out.println(" userRole " + userRole );

		if( newAnswer.getTargetCode().startsWith("BEG_") || ( newAnswer.getTargetCode().startsWith("OFR_") && userRole != null && userRole.equals("OWNER")) ) {

			/* Owner Fees */
			fees = rules.calcOwnerFeeInMoney( answerPrice );		
			feePriceExcGST = fees;
			feePriceIncGST = rules.includeGSTMoney(fees);

			System.out.println("=======================================================================================================");
			System.out.println("OWNER countering   ::   ");
			System.out.println(" targetCode" +newAnswer.getTargetCode() );
			ownerPriceExcGST = answerPrice;
			ownerPriceIncGST = rules.includeGSTMoney(answerPrice);
			driverPriceIncGST = ownerPriceIncGST.subtract(feePriceIncGST);
			driverPriceExcGST = ownerPriceExcGST.subtract(feePriceExcGST);
			System.out.println("ownerPriceExcGST   ::   " + ownerPriceExcGST);
			System.out.println("ownerPriceIncGST   ::   " + ownerPriceIncGST);
			System.out.println("driverPriceIncGST   ::   " + driverPriceIncGST);
			System.out.println("driverPriceExcGST   ::   " + driverPriceExcGST);
			System.out.println("=======================================================================================================");
		}
		else if( newAnswer.getTargetCode().startsWith("OFR_") && (userRole == null || userRole.equals("QUOTER"))) {

			/* Driver Fees */
			fees = rules.calcDriverFeeInMoney( answerPrice );		
			feePriceExcGST = fees;
			feePriceIncGST = rules.includeGSTMoney(fees);

			System.out.println("=======================================================================================================");
			System.out.println("QUOTER countering   ::   ");
			driverPriceExcGST = answerPrice;
			driverPriceIncGST = rules.includeGSTMoney(answerPrice);
			ownerPriceExcGST = driverPriceExcGST.add(feePriceExcGST);
			ownerPriceIncGST = rules.includeGSTMoney(ownerPriceExcGST);

			System.out.println("ownerPriceExcGST   ::   " + ownerPriceExcGST);
			System.out.println("ownerPriceIncGST   ::   " + ownerPriceIncGST);
			System.out.println("driverPriceIncGST   ::   " + driverPriceIncGST);
			System.out.println("driverPriceExcGST   ::   " + driverPriceExcGST);
			System.out.println("=======================================================================================================");
		}


		/* Saving  OWNER_PRICE_INC_GST */
			String ownerPriceIncGSTString = "{\"amount\":" + ownerPriceIncGST.getNumber().toString() + ",\"currency\":\""+ownerPriceIncGST.getCurrency().toString()+"\"}";
			Answer ownerPriceIncGSTAnswer = new Answer(rules.getUser().getCode(), beCode, ownerPriceIncGstCode, ownerPriceIncGSTString);          
			rules.publishData(ownerPriceIncGSTAnswer);   

		/* Saving  OWNER_PRICE_EXC_GST */
			String ownerPriceExcGSTString = "{\"amount\":" + ownerPriceExcGST.getNumber().toString() + ",\"currency\":\""+ownerPriceExcGST.getCurrency().toString()+"\"}";
			Answer ownerPriceExcGSTAnswer = new Answer(rules.getUser().getCode(), beCode, ownerPriceExcGstCode, ownerPriceExcGSTString);          
			rules.publishData(ownerPriceExcGSTAnswer); 
		
		/* Saving  DRIVER_PRICE_INC_GST */
			String driverPriceIncGSTString = "{\"amount\":" + driverPriceIncGST.getNumber().toString() + ",\"currency\":\""+driverPriceIncGST.getCurrency().toString()+"\"}";
			Answer driverPriceIncGSTAnswer = new Answer(rules.getUser().getCode(), beCode, driverPriceIncGstCode, driverPriceIncGSTString);          
			rules.publishData(driverPriceIncGSTAnswer);  

		/* Saving  DRIVER_PRICE_EXC_GST */
			String driverPriceExcGSTString = "{\"amount\":" + driverPriceExcGST.getNumber().toString() + ",\"currency\":\""+driverPriceExcGST.getCurrency().toString()+"\"}";
			Answer driverPriceExcGSTAnswer = new Answer(rules.getUser().getCode(), beCode, driverPriceExcGstCode, driverPriceExcGSTString);          
			rules.publishData(driverPriceExcGSTAnswer); 

		/* Saving  FEE_INC_GST */
			String feePriceIncGSTString = "{\"amount\":" + feePriceIncGST.getNumber().toString() + ",\"currency\":\""+feePriceIncGST.getCurrency().toString()+"\"}";
			Answer feePriceIncGSTAnswer = new Answer(rules.getUser().getCode(), beCode, feePriceIncGstCode, feePriceIncGSTString);          
			rules.publishData(feePriceIncGSTAnswer);   

		/* Saving  FEE_EXC_GST */
			String feePriceExcGSTString = "{\"amount\":" + feePriceExcGST.getNumber().toString() + ",\"currency\":\""+feePriceExcGST.getCurrency().toString()+"\"}";
			Answer feePriceExcGSTAnswer = new Answer(rules.getUser().getCode(), beCode, feePriceExcGstCode, feePriceExcGSTString);         
			rules.publishData(feePriceExcGSTAnswer); 

		rules.footer();
end