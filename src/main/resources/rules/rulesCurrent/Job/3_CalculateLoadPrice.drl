package life.genny.rules;

import life.genny.rules.RulesUtils;
import life.genny.rules.QRules;
import life.genny.qwandautils.QwandaUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.message.QEventAttributeValueChangeMessage;
import life.genny.qwanda.entity.BaseEntity;
import java.lang.Double;
import java.lang.String;
import java.math.BigDecimal;


function Double calculate(String price) {

	Double ownerOriginalPrice = Double.parseDouble(price);
    return ownerOriginalPrice;
}

/*  Calculate Load Price adding service fee  */
rule "Calculate Load Price"
	no-loop true
    when
    $m: QEventAttributeValueChangeMessage(  QEventAttributeValueChangeMessage.getData().getCode().equals("PRI_PRICE")  && getAnswer().getTargetCode().startsWith("BEG_") )
    	rules : QRules()
    then    
    	    rules.header();
	   
        Answer newAnswer = $m.getAnswer();
       
         BigDecimal price = new BigDecimal(Double.parseDouble(newAnswer.getValue()));
         String begCode = newAnswer.getTargetCode();
         
        /* Calculating Owner Price - adding GST  */
         BigDecimal ownerPrice = rules.includeGST(price);
         
        /*  Saving OWNER_PRICE attribute to the BEG   */
         Answer jobOwnerPriceAnswer = new Answer(rules.getUser().getCode(),begCode,"PRI_OWNER_PRICE",String.valueOf(ownerPrice));             
         rules.publishData(jobOwnerPriceAnswer);
      
       /*   Calculating  service fee - (Fees(in ex GST Amount- PRI_PRICE)+ GST on total fee amount)   */
         BigDecimal fees = new BigDecimal(0);
 		
 		if (price.compareTo(BigDecimal.valueOf(0)) > 0 && price.compareTo(BigDecimal.valueOf(1000)) <= 0) {
 			
 			/* 15% of price if price less than or equal to 1000 */
 			fees = price.multiply(new BigDecimal("0.15"));
 			
 		} else if (price.compareTo(BigDecimal.valueOf(1000)) > 0 && price.compareTo(BigDecimal.valueOf(3000)) <= 0) {
 			/*
 			 * 15% + 10% of remaining price if price greater than 1000 and less
 			 * than or equal to 3000
 			 */
 			BigDecimal initialFee = new BigDecimal("150");
 			BigDecimal negatedAmount = price.subtract(new BigDecimal("1000"));
 			fees = initialFee.add(negatedAmount.multiply(new BigDecimal("0.1")));
 			
 		} else if (price.compareTo(BigDecimal.valueOf(3000)) > 0 && price.compareTo(BigDecimal.valueOf(5000)) <= 0) {
 			/*
 			 * 15% + 10% + (7.5% of remaining amount) if price is greater than
 			 * 3000 and less than or equal to 5000
 			 */
 			BigDecimal initialFee = new BigDecimal("350");
 			BigDecimal negatedAmount = price.subtract(new BigDecimal("3000"));
 			fees = initialFee.add(negatedAmount.multiply(new BigDecimal("0.075")));
 			
 		} else if (price.compareTo(BigDecimal.valueOf(5000)) > 0) {
 			/*
 			 * 15% + 10% + 7.5% + (5% of remaining amount) if price is greater
 			 * than 5000
 			 */
 			BigDecimal initialFee = new BigDecimal("500");
 			BigDecimal negatedAmount = price.subtract(new BigDecimal("5000"));
 			fees = initialFee.add(negatedAmount.multiply(new BigDecimal("0.05")));
 		}
 		
 		BigDecimal feeWithGST = fees.add(rules.includeGST(fees));
       
       /*  Saving FEE_PRICE attribute to the BEG - Fees in ex GST amount + GST  */
         Answer feePriceAnswer = new Answer(rules.getUser().getCode(),begCode,"PRI_FEE",String.valueOf(feeWithGST));             
         rules.publishData(feePriceAnswer);
         BigDecimal driverPrice = ownerPrice.subtract(feeWithGST);
       
       /*  Saving DRIVER_PRICE attribute to the BEG   */
         Answer driverPriceAnswer = new Answer(rules.getUser().getCode(),begCode,"PRI_DRIVER_PRICE",String.valueOf(driverPrice));             
         rules.publishData(driverPriceAnswer);
       
        rules.footer();
end



