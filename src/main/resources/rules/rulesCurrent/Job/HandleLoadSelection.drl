package life.genny.rules;

import life.genny.rules.RulesUtils;
import life.genny.rules.QRules;
import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QEventLinkChangeMessage;
import life.genny.qwanda.entity.EntityEntity;
import com.google.gson.Gson;
import life.genny.qwanda.Answer;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwanda.message.QEventAttributeValueChangeMessage;
import life.genny.qwandautils.KeycloakUtils;
import life.genny.qwandautils.QwandaUtils;
import life.genny.qwandautils.MergeUtil;
import life.genny.rules.RulesUtils;
import life.genny.qwanda.entity.User;
import life.genny.qwanda.Link;
import life.genny.qwanda.entity.BaseEntity;
import java.util.Map;
import java.util.HashMap; 
import java.time.LocalDateTime;
import java.time.ZonedDateTime;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializationContext;
import com.google.gson.FieldNamingPolicy;
import io.vertx.core.json.JsonObject;
import io.vertx.core.json.JsonArray;
import java.time.format.DateTimeFormatter;
import life.genny.qwanda.DateTimeDeserializer;

/*   Rule to handle load selection   */
rule "Handle Load Selection"
    when
        $m: QEventAttributeValueChangeMessage( event_type == "EVT_ATTRIBUTE_VALUE_CHANGE" && QEventAttributeValueChangeMessage.getData().getCode().equals("LNK_LOAD_LISTS") )
         rules: QRules()
     then
         rules.header();
        
        /* Prepare GSON Deserialization  */
         GsonBuilder gsonBuilder = new GsonBuilder();
         gsonBuilder.registerTypeAdapter(LocalDateTime.class, new DateTimeDeserializer());
         Gson gson = gsonBuilder.create();          
      
        /* Get qwandaServiceUrl & userCode    */
         String qwandaServiceUrl = rules.getQwandaServiceUrl();      
         String userCode =  rules.getUser().getCode();
         rules.println("The user Code is  ::  " +userCode);
         rules.println("Print QEventAttributeValueChangeMessage ::  "+$m.toString());

        /*     Collect load code from answer    */
         Answer newAnswer = $m.getAnswer();
         rules.println("The created value  ::  "+newAnswer.getCreatedDate());
         rules.println("Answer from QEventAttributeValueChangeMessage  ::  "+newAnswer.toString());
         String targetCode = newAnswer.getTargetCode();
         String sourceCode = newAnswer.getSourceCode();
         String loadCode = newAnswer.getValue();
         rules.println("The target BE code is   ::  " +targetCode);
         rules.println("The source BE code is   ::  " +sourceCode);
         rules.println("The load code is   ::  " +loadCode);

        /*  Grab attributes from load and save it to newly load    */
         JsonArray loadBe = new JsonArray(QwandaUtils.apiGet(qwandaServiceUrl + "/qwanda/baseentitys/" + loadCode + "/attributes", rules.getToken()));
         RulesUtils.ruleLogger("Load DATA", loadBe );
         Map<String, String> map = new HashMap<>();
        /* loop to GET attributeCodes and VALUE */
           for(Object obj : loadBe) {
           JsonObject attributeObj = (JsonObject) obj;
           String attributeCode = attributeObj.getString("attributeCode");
           String attributeValue = attributeObj.getString("valueString");
           map.put(attributeCode, attributeValue); /* PUT in map */
            }
          RulesUtils.ruleLogger(" MAP DATA ",map );
          Answer[] newAnswers = new Answer[100];
            try{
                int i = 0;
		    	for (Map.Entry<String, String> entry : map.entrySet())
		    	{	
                    Answer answerObj = new Answer(userCode, targetCode, entry.getKey(), entry.getValue() );
                    newAnswers[i] = answerObj;
                    i++; 
                  }
                                
                }catch (Exception e) {
                }              
            QDataAnswerMessage newLoadAnswers = new QDataAnswerMessage(newAnswers);
            String jsonQDataAnswerMessage = gson.toJson(newLoadAnswers);
		   rules.println("updated answer json string ::"+jsonQDataAnswerMessage);
         /*   Send new answers to api to save it   */ 
		   QwandaUtils.apiPostEntity(qwandaServiceUrl+"/qwanda/answers/bulk", jsonQDataAnswerMessage, rules.getToken());
           rules.println("The new laod with attribute is ::   "+targetCode.toString());
            
         rules.footer();

end
