package life.genny.rules;

import life.genny.rules.RulesUtils;
import life.genny.rules.QRules;
import life.genny.qwandautils.QwandaUtils;
import life.genny.qwandautils.MergeUtil;
import life.genny.qwanda.Answer;
import life.genny.qwanda.message.QEventAttributeValueChangeMessage;
import life.genny.qwanda.entity.BaseEntity;
import java.lang.Double;
import java.lang.String;
import java.math.BigDecimal;
import java.util.List;
import java.util.ArrayList;

function Double calculate(String price) {

	Double ownerOriginalPrice = Double.parseDouble(price);
    return ownerOriginalPrice;
}

/*  Calculate Load Price adding service fee  */
rule "Calculate Load Price"
	no-loop true
    when
    	$m: QEventAttributeValueChangeMessage(  QEventAttributeValueChangeMessage.getData().getCode().equals("PRI_PRICE")  && getAnswer().getTargetCode().startsWith("BEG_") ||
												QEventAttributeValueChangeMessage.getData().getCode().equals("PRI_OFFER_PRICE")  && getAnswer().getTargetCode().startsWith("OFR_") )
    	rules : QRules()
    then
		rules.header();

		Answer newAnswer = $m.getAnswer();

		String beCode = newAnswer.getTargetCode();
		BigDecimal answerPrice = new BigDecimal(Double.parseDouble(newAnswer.getValue()));
		BigDecimal fees = new BigDecimal(0);

		/* Calculate Fees*/
			if (answerPrice.compareTo(BigDecimal.valueOf(0)) > 0 && answerPrice.compareTo(BigDecimal.valueOf(1000)) <= 0) {

				/* 15% of price if price less than or equal to 1000 */
				fees = answerPrice.multiply(new BigDecimal("0.15"));

			} else if (answerPrice.compareTo(BigDecimal.valueOf(1000)) > 0 && answerPrice.compareTo(BigDecimal.valueOf(3000)) <= 0) {
				/*
					* 15% + 10% of remaining price if price greater than 1000 and less
					* than or equal to 3000
					*/
				BigDecimal initialFee = new BigDecimal("150");
				BigDecimal negatedAmount = answerPrice.subtract(new BigDecimal("1000"));
				fees = initialFee.add(negatedAmount.multiply(new BigDecimal("0.1")));

			} else if (answerPrice.compareTo(BigDecimal.valueOf(3000)) > 0 && answerPrice.compareTo(BigDecimal.valueOf(5000)) <= 0) {
				/*
					* 15% + 10% + (7.5% of remaining amount) if price is greater than
					* 3000 and less than or equal to 5000
					*/
				BigDecimal initialFee = new BigDecimal("350");
				BigDecimal negatedAmount = answerPrice.subtract(new BigDecimal("3000"));
				fees = initialFee.add(negatedAmount.multiply(new BigDecimal("0.075")));

			} else if (answerPrice.compareTo(BigDecimal.valueOf(5000)) > 0) {
				/*
					* 15% + 10% + 7.5% + (5% of remaining amount) if price is greater
					* than 5000
					*/
				BigDecimal initialFee = new BigDecimal("500");
				BigDecimal negatedAmount = answerPrice.subtract(new BigDecimal("5000"));
				fees = initialFee.add(negatedAmount.multiply(new BigDecimal("0.05")));
			}
			BigDecimal feePriceExcGST = fees;
			BigDecimal feePriceIncGST = rules.includeGST(fees);

		String priceCode = $m.getData().getCode();

		String ownerPriceIncGstCode = priceCode.replace("_PRICE", "_OWNER_PRICE_INC_GST");
		String ownerPriceExcGstCode = priceCode.replace("_PRICE", "_OWNER_PRICE_EXC_GST");

		String driverPriceIncGstCode = priceCode.replace("_PRICE", "_DRIVER_PRICE_INC_GST");
		String driverPriceExcGstCode = priceCode.replace("_PRICE", "_DRIVER_PRICE_EXC_GST");


		String feePriceIncGstCode = priceCode.replace("_PRICE", "_FEE_INC_GST");
		String feePriceExcGstCode = priceCode.replace("_PRICE", "_FEE_EXC_GST");

		BigDecimal ownerPriceExcGST = new  BigDecimal(0);
		BigDecimal ownerPriceIncGST = new  BigDecimal(0);
		BigDecimal driverPriceExcGST = new BigDecimal(0);
		BigDecimal driverPriceIncGST = new BigDecimal(0);

		/* Get userRole */
		String userRole = null;
		if(newAnswer.getTargetCode().startsWith("OFR_")) {
			String offerCode = newAnswer.getTargetCode();
			userRole = rules.getBaseEntityValueAsString(offerCode, "PRI_NEXT_ACTION");
		}

		if(newAnswer.getTargetCode().startsWith("BEG_") || (newAnswer.getTargetCode().startsWith("OFR_") && userRole == "OWNER")) {
			ownerPriceExcGST = answerPrice;
			ownerPriceIncGST = rules.includeGST(answerPrice);
			driverPriceIncGST = ownerPriceIncGST.subtract(feePriceIncGST);
			driverPriceExcGST = ownerPriceExcGST.subtract(feePriceExcGST);
		}
		else if(newAnswer.getTargetCode().startsWith("OFR_") && (userRole == "QUOTER" || userRole == null)) {
			driverPriceExcGST = answerPrice;
			driverPriceIncGST = rules.includeGST(answerPrice);
			ownerPriceExcGST = driverPriceExcGST.subtract(feePriceExcGST);
			ownerPriceIncGST = rules.includeGST(ownerPriceExcGST);
		}


		List<Answer> answers = new ArrayList<Answer>();
		answers.add(new Answer(rules.getUser().getCode(), begCode, ownerPriceIncGstCode, String.valueOf(ownerPriceIncGST))):
		answers.add(new Answer(rules.getUser().getCode(), begCode, ownerPriceExcGstCode, String.valueOf(ownerPriceExcGST))):
		answers.add(new Answer(rules.getUser().getCode(), begCode, driverPriceIncGstCode, String.valueOf(driverPriceIncGST))):
		answers.add(new Answer(rules.getUser().getCode(), begCode, driverPriceExcGstCode, String.valueOf(driverPriceExcGST))):
		answers.add(new Answer(rules.getUser().getCode(), begCode, feePriceIncGstCode, String.valueOf(feePriceIncGST))):
		answers.add(new Answer(rules.getUser().getCode(), begCode, feePriceExcGstCode, String.valueOf(feePriceExcGST))):
		rules.saveAnswers(answers);

		rules.footer();
end
