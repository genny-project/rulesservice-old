package life.genny.rules;
import life.genny.rules.QRules;

/* Set BEG \ APP \ INTERN To Map */
rule "Offer Intern - Step 0"
	when
		rules: QRules( 	isState("BTN_OFFER_INTERN") && 
						isState("EVENT_BTN_CLICK") && 
						!isState("LOOP_OFFER_INTERN_STEP0") ) 
	 then
	 	rules.header();
        rules.setState("LOOP_OFFER_INTERN_STEP0");

		String begCode = rules.getAsString("itemCode");

		if(begCode == null){
            rules.println("begCode is null");
			return;
        }else{
			BaseEntity beg = rules.getBaseEntityByCode(begCode);
			rules.set("begBe", beg);

			BaseEntity internship = rules.getChildren(beg.getCode(), "LNK_BEG", "INTERNSHIP");
			BaseEntity hostCompany = rules.getChildren(beg.getCode(), "LNK_BEG", "HOSTCOMPANY");
			BaseEntity creator = rules.getChildren(beg.getCode(), "LNK_BEG", "CREATOR");
			BaseEntity application = rules.getChildren(beg.getCode(), "LNK_BEG", "APPLICATION");
			BaseEntity intern = null;
			BaseEntity eduProvider = null;

			if(application !=null){
				intern = rules.getChildren(application.getCode(), "LNK_APP", "APPLICANT");
				if (intern != null) {
					eduProvider = rules.getParent(intern.getCode(), "LNK_EDU");
					if(eduProvider == null){
						rules.println("eduProvider is null");
						return;
					}
				}else{
					rules.println("Intern is null");
					return;
				}
			}else{
				rules.println("Application of oldBeg is null");
				return;
			}
			if (creator == null) {
            	rules.println("Creator of oldBeg is null");
				return;
			} 
			if (hostCompany == null) {
            	rules.println("Host Company of oldBeg is null");
				return;
			} 
			if (internship == null) {
            	rules.println("Internship is null");
				return;
			} 

            rules.println("beg           		::   " + beg.getCode());
            rules.println("application   		::   " + application.getCode());
            rules.println("creator       		::   " + creator.getCode());
            rules.println("hostCompany   		::   " + hostCompany.getCode());
            rules.println("internship    		::   " + internship);
            rules.println("intern        		::   " + intern.getCode());
            rules.println("eduProvider        	::   " + eduProvider.getCode());
			
			rules.set("creatorBe", creator);
			rules.set("hostCompanyBe", hostCompany);
			rules.set("internshipBe", internship);
			rules.set("internBe", intern );
			rules.set("eduProviderBe", eduProvider );
			rules.set("applicationBe", application);
			
			rules.setState("OFFER_INTERN_READY");            
			rules.setState("CHANGE_BEG_STATUS");
        }
	 	rules.footer();      
end
