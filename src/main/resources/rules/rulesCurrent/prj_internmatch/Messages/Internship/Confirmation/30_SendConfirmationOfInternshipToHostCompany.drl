package life.genny.rules;
import life.genny.rules.QRules;
import java.util.HashMap;

rule "Send confirmation of Internship to Host Company Representative"
    when
        rules: QRules(  isState("SEND_CONFIRMATION_OF_INTERNSHIP_MESSAGE_TO_HOSTCOMPANY_REP") &&
                        !isState("LOOP_SEND_CONFIRMATION_OF_INTERNSHIP_MESSAGE_TO_HOSTCOMPANY_REP") )
    then
        rules.header();
        rules.setState("LOOP_SEND_CONFIRMATION_OF_INTERNSHIP_MESSAGE_TO_HOSTCOMPANY_REP");

        BaseEntity beg = rules.getAsBaseEntity("begBe");
        BaseEntity intern = rules.getAsBaseEntity("internBe");
        BaseEntity hostCompany = rules.getAsBaseEntity("hostCompanyBe");
        BaseEntity eduProvider = rules.getAsBaseEntity("eduProviderBe");
        BaseEntity internship = rules.getAsBaseEntity("internshipBe");


        if(beg == null){
            rules.println("beg is null");
            return;
        }else if(intern == null){
            rules.println("intern is null");
            return;
        }else if(hostCompany == null){
            rules.println("hostCompany is null");
            return;
        }else if(eduProvider == null){
            rules.println("eduProvider is null");
            return;
        }else if(internship == null){
            rules.println("internship is null");
            return;
        }else{
            HashMap<String, String> contextMap = new HashMap<String, String>();
            contextMap.put("BEG", beg.getCode());
            contextMap.put("INTERN", intern.getCode());
            contextMap.put("HOSTCOMPANY", hostCompany.getCode());
            contextMap.put("EDU_PROVIDER", eduProvider.getCode());
            contextMap.put("INTERNSHIP", internship.getCode());

            String[] recipients = null;

            /* Get all the HOSTCOMPANY staffs */
            List<BaseEntity> hostCompanyStaffs = rules.getChildrens(hostCompany.getCode(), "LNK_STAFF", "STAFF");
            if(hostCompanyStaffs != null) {
                rules.println("No. of hostCompanyStaffs   ::   " + hostCompanyStaffs.size() );
                recipients = new String[hostCompanyStaffs.size()];
                int i = 0;
                for(BaseEntity hostCompanyStaff : hostCompanyStaffs) {
                    recipients[i] = hostCompanyStaff.getCode();
                    i++;
                }
            }
            rules.sendMessage(null, recipients, contextMap, "MSG_INTERNMATCH_CONFIRMATION_OF_INTERNSHIP_HOSTCOMPANY_REP", "EMAIL");
            rules.setState("SENT_CONFIRMATION_OF_INTERNSHIP_MESSAGE_TO_HOSTCOMPANY_REP");
         }

         rules.footer();
end
