package life.genny.rules;
import life.genny.rules.QRules;

rule "Send Internship added message to Intern"
	when
		rules: QRules(  isState("SEND_INTERNSHIP_ADDED_MESSAGE_TO_INTERN") && 
                        !isState("LOOP_SEND_INTERNSHIP_ADDED_MESSAGE_TO_INTERN") )
	then
	 	rules.header();
		rules.setState("LOOP_SEND_INTERNSHIP_ADDED_MESSAGE_TO_INTERN");
    
        BaseEntity internship = rules.getAsBaseEntity("internshipBe");
        BaseEntity hostcompany = rules.getAsBaseEntity("companyBe");

        if(internship == null){
            rules.println("internship is null");
            return;
        }else if(hostcompany == null){
            rules.println("hostcompany is null");
            return;
        }else {
        
            HashMap<String, String> contextMap = new HashMap<String, String>(); 
            contextMap.put("INTERNSHIP", internship.getCode());
            contextMap.put("HOSTCOMPANY", hostcompany.getCode());


            String[] recipients = null;

            /* Get all the INTERNS */
            List<BaseEntity> interns = rules.getChildrens("GRP_INTERNS", "LNK_INTERN", "INTERN");
            if(interns != null) {
                rules.println("No. of interns   ::   " + interns.size() );
                recipients = new String[interns.size()];
                int i = 0;
                for(BaseEntity intern : interns) {
                    recipients[i] = intern.getCode();
                    i++;
                }
            }


            rules.sendMessage(null, recipients, contextMap, "MSG_INTERNMATCH_NEW_POSITION_ADDED", "TOAST");


            rules.setState("SENT_INTERNSHIP_ADDED_MESSAGE_TO_INTERN");
        }
	 	
	rules.footer();      
end
