package life.genny.rules;
import life.genny.rules.QRules;

rule "Send Applied for Internship Message to Host Company"
	when
		rules: QRules(  isState("SEND_APPLIED_MESSAGE_TO_HOSTCOMPANY") && 
                    !isState("LOOP_SEND_APPLIED_MESSAGE_TO_HOSTCOMPANY") )
	then
	 	rules.header();
		rules.setState("LOOP_SEND_APPLIED_MESSAGE_TO_HOSTCOMPANY");

    BaseEntity beg = rules.getAsBaseEntity("begBe");
    BaseEntity intern = rules.getAsBaseEntity("internBe");
    BaseEntity internship = rules.getAsBaseEntity("internshipBe");
    BaseEntity hostcompany = rules.getAsBaseEntity("companyBe");
    
    /* Get the creator of the beg || host company staff */
    BaseEntity creator = rules.getChildren(beg.getCode(), "LNK_BEG", "CREATOR");
    if(beg == null){
        rules.println("beg is null");
        return;
    }else if(intern == null){
        rules.println("intern is null");
        return;
    }else if(internship == null){
        rules.println("internship is null");
        return;
    }else if(hostcompany == null){
        rules.println("hostcompany is null");
        return;
    }else if(creator == null){
        rules.println("hostCompanyStaff is null");
        return;
    }else {
      if(creator != null) {
          rules.println("creator   ::   " + creator.getCode());
          
          String[] recipients = new String[1];
          recipients[0] = creator.getCode();
      
          HashMap<String, String> contextMap = new HashMap<String, String>(); 
          contextMap.put("BEG", beg.getCode());
          contextMap.put("INTERN", intern.getCode());
          contextMap.put("INTERNSHIP", internship.getCode());
          contextMap.put("HOSTCOMPANY", hostcompany.getCode());

          rules.sendMessage(null, recipients, contextMap, "MSG_INTERNMATCH_APPLIED_FOR_INTERNSHIP_HOSTCOMPANY", "EMAIL");

          rules.setState("SENT_APPLIED_MESSAGE_TO_HOSTCOMPANY");
      }
    }
    rules.footer();      
end
