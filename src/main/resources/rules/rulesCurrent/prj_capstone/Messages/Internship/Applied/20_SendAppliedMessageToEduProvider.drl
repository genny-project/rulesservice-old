package life.genny.rules;
import life.genny.rules.QRules;

rule "Send Applied for Internship Message to Education Provider"
	when
		rules: QRules(  isState("SEND_APPLIED_MESSAGE_TO_EDU_PROVIDER") && 
						        !isState("LOOP_SEND_APPLIED_MESSAGE_TO_EDU_PROVIDER") )
	then
	 	rules.header();
		rules.setState("LOOP_SEND_APPLIED_MESSAGE_TO_EDU_PROVIDER");
    BaseEntity beg = rules.getAsBaseEntity("begBe");
    BaseEntity intern = rules.getAsBaseEntity("internBe");
    BaseEntity internship = rules.getAsBaseEntity("internshipBe");
    BaseEntity hostcompany = rules.getAsBaseEntity("companyBe");
    

    if(beg == null){
        rules.println("beg is null");
        return;
    }else if(intern == null){
        rules.println("intern is null");
        return;
    }else if(internship == null){
        rules.println("internship is null");
        return;
    }else if(hostcompany == null){
        rules.println("hostcompany is null");
        return;
    }else {
              
        BaseEntity eduProvider = rules.getParent(intern.getCode(), "LNK_EDU");
        if(eduProvider != null){
          rules.println("THIS IS THE EDUPROVIDER BE ::" + eduProvider);
          rules.println("THIS IS THE EDUPROVIDER Code ::" + eduProvider.getCode());
        

          String[] recipients = null;

          /* Get all the EDU PROVIDER staffs */
          List<BaseEntity> eduProviderStaffs = rules.getChildrens(eduProvider.getCode(), "LNK_EDU", "STAFF");
          if(eduProviderStaffs != null) {
              rules.println("No. of eduProviderStaffs   ::   " + eduProviderStaffs.size() );
              recipients = new String[eduProviderStaffs.size()];
              int i = 0;
              for(BaseEntity eduProviderStaff : eduProviderStaffs) {
                  recipients[i] = eduProviderStaff.getCode();
                  i++;
              }
          }
        
          HashMap<String, String> contextMap = new HashMap<String, String>(); 
          contextMap.put("BEG", beg.getCode());
          contextMap.put("INTERN", intern.getCode());
          contextMap.put("INTERNSHIP", internship.getCode());
          contextMap.put("HOSTCOMPANY", hostcompany.getCode());

          rules.sendMessage(null, recipients, contextMap, "MSG_INTERNMATCH_CPM_CAPSTONE_PROJECT_APPLIED_LECTURER", "EMAIL");  
          rules.sendMessage(null, recipients, contextMap, "MSG_INTERNMATCH_CPM_CAPSTONE_PROJECT_APPLIED_LECTURER", "TOAST");
          rules.setState("SENT_APPLIED_MESSAGE_TO_EDU_PROVIDER");
        }
 		}
	 	
	 	rules.footer();      
end
