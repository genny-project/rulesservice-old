package life.genny.rules;
import life.genny.rules.QRules;

rule "Send Applied for Internship Message to Intern"
	when
		rules: QRules(  isState("SEND_APPLIED_MESSAGE_TO_INTERN") && 
						        !isState("LOOP_SEND_APPLIED_MESSAGE_TO_INTERN") )
	then
	 	rules.header();
		rules.setState("LOOP_SEND_APPLIED_MESSAGE_TO_INTERN");
    
    BaseEntity intern = rules.getAsBaseEntity("internBe");
    BaseEntity internship = rules.getAsBaseEntity("internshipBe");
    BaseEntity hostcompany = rules.getAsBaseEntity("companyBe");

    if(intern == null){
        rules.println("intern is null");
        return;
    }else if(internship == null){
        rules.println("internship is null");
        return;
    }else if(hostcompany == null){
        rules.println("hostcompany is null");
        return;
    }else {
      
      HashMap<String, String> contextMap = new HashMap<String, String>(); 
      contextMap.put("INTERN", intern.getCode());
      contextMap.put("INTERNSHIP", internship.getCode());
      contextMap.put("HOSTCOMPANY", hostcompany.getCode());

      String[] recipients = new String[1];
      recipients[0] = intern.getCode();

      rules.sendMessage(null, recipients, contextMap, "MSG_INTERNMATCH_CPM_CAPSTONE_PROJECT_APPLIED_STUDENT", "EMAIL");
      rules.sendMessage(null, recipients, contextMap, "MSG_INTERNMATCH_CPM_CAPSTONE_PROJECT_APPLIED_STUDENT", "TOAST");

      rules.setState("SENT_APPLIED_MESSAGE_TO_INTERN");
    }
    rules.footer();      
end
