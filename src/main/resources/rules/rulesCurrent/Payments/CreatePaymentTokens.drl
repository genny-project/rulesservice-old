package life.genny.rules;

import life.genny.rules.QRules;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.Answer;
import io.vertx.core.json.JsonObject;
import life.genny.qwandautils.PaymentUtils;
import life.genny.qwandautils.MergeUtil;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;

rule "Create Assembly Tokens"
	agenda-group "payments"
	no-loop true
	when 
		rules: QRules(isState("IS_ASSEMBLY_USER_CREATED") && !isState("IS_ASSEMBLY_TOKEN_CREATED") ) 
	then
		RulesUtils.header(drools.getRule().getName());
		
		String assemblyAuthKey = PaymentUtils.getAssemblyAuthKey();
       	String assemblyId = MergeUtil.getAttrValue(rules.getUser().getCode(), "PRI_ASSEMBLY_USER_ID", rules.getToken());

		String assemblyCardToken = MergeUtil.getAttrValue(rules.getUser().getCode(), "PRI_ASSEMBLY_CARD_TOKEN", rules.getToken());
		
		if(assemblyId != null && assemblyCardToken == null) {
		
			/* Saving Assembly authentication tokens as user attributes */
 			PaymentUtils.saveTokenAnswers(rules.getQwandaServiceUrl(), rules.getUser().getCode(), rules.getToken(), assemblyId, assemblyAuthKey); 
     	    rules.setState("IS_ASSEMBLY_TOKEN_CREATED");		
		}
		
		if(assemblyId != null && assemblyCardToken != null) {
			rules.setState("IS_ASSEMBLY_TOKEN_CREATED");	
		}
		
		RulesUtils.footer(drools.getRule().getName());
    	
end
 