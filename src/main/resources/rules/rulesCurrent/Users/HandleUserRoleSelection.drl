package life.genny.rules;

import life.genny.rules.RulesUtils;
import life.genny.rules.QRules;
import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.entity.EntityEntity;
import life.genny.qwanda.Answer;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwanda.message.QEventAttributeValueChangeMessage;
import life.genny.qwandautils.KeycloakUtils;
import life.genny.qwandautils.QwandaUtils;
import life.genny.qwandautils.MergeUtil;
import life.genny.rules.RulesUtils;
import life.genny.qwanda.Link;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializationContext;
import java.time.LocalDateTime;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;

rule "Save user role to the link with its Company"
    when
        $m: QEventAttributeValueChangeMessage( event_type == "EVT_ATTRIBUTE_VALUE_CHANGE" && QEventAttributeValueChangeMessage.getData().getCode().equals("LNK_USER_ROLE_LISTS") )
        rules: QRules()
     then
        rules.header();  
         
        /* Prepare GSON Deserialization */
           Gson gson = new GsonBuilder()
            .registerTypeAdapter(LocalDateTime.class, new JsonDeserializer<LocalDateTime>() {
                @Override
                public LocalDateTime deserialize(final JsonElement json, final Type type,
                    final JsonDeserializationContext jsonDeserializationContext)
                    throws JsonParseException {
                return LocalDateTime.parse(json.getAsJsonPrimitive().getAsString(), DateTimeFormatter.ISO_LOCAL_DATE_TIME);
                }

                public JsonElement serialize(final LocalDateTime date, final Type typeOfSrc,
                    final JsonSerializationContext context) {
                return new JsonPrimitive(date.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME)); 
                }
            }).create();      
      
       /*  Prepare Token & qwandaServiceUrl    */
         String qwandaServiceUrl = rules.getQwandaServiceUrl();
         String tokenString = rules.getToken();
         String userCode = rules.getUser().getCode();
         System.out.println("The user Code is  ::  " +userCode);
         System.out.println("Print QEventAttributeValueChangeMessage ::  "+$m.toString());
 
       /*  Collect role code from answer  */
         Answer newAnswer = $m.getAnswer();
         System.out.println("Answer from QEventAttributeValueChangeMessage  ::  "+newAnswer.toString());
         String targetCode = newAnswer.getTargetCode();
         String sourceCode = newAnswer.getSourceCode();
         String roleValue = "";
         if(newAnswer.getValue().equals("SEL_DRIVER"))
         {
             roleValue = "DRIVER";
         }
          if(newAnswer.getValue().equals("SEL_OWNER"))
         {
             roleValue = "OWNER";
         }
         
         String attributeCode = $m.data.getCode();
         System.out.println("The target BE code is   ::  " +targetCode);
         System.out.println("The source BE code is   ::  " +sourceCode);
         System.out.println("The attribute code is   ::  " +attributeCode);
         System.out.println("The role type code is   ::  " +newAnswer.getValue());
         System.out.println("The role type value is   ::  " +roleValue);

           
       /* Get company code for this user */
        BaseEntity company = rules.getParent(userCode, "LNK_STAFF");
        String companyCode = company.getCode();
       /* Update link with the link Value  */
        System.out.println("UPDATING link value OF LINK BETWEEN   ::   " + companyCode + "  &  " + userCode);
        Link updateLink = new Link( companyCode, userCode, "LNK_STAFF", roleValue, (double) 1);
        String result = QwandaUtils.apiPutEntity(qwandaServiceUrl + "/qwanda/links", gson.toJson(updateLink),tokenString);
        
       rules.footer();  

end
