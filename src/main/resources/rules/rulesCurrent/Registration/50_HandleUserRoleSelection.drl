package life.genny.rules;

import life.genny.rules.RulesUtils;
import life.genny.rules.QRules;
import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.entity.EntityEntity;
import life.genny.qwanda.Answer;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwanda.message.QEventAttributeValueChangeMessage;
import life.genny.qwandautils.KeycloakUtils;
import life.genny.qwandautils.QwandaUtils;
import life.genny.qwandautils.MergeUtil;
import life.genny.rules.RulesUtils;
import life.genny.qwanda.Link;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializationContext;
import java.time.LocalDateTime;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;

rule "Save user role to the link with its Company"
    when
        $m: QEventAttributeValueChangeMessage( event_type == "EVT_ATTRIBUTE_VALUE_CHANGE" && QEventAttributeValueChangeMessage.getData().getCode().equals("LNK_USER_ROLE_LISTS") )
        rules: QRules()
     then
        rules.header();  
          rules.println("Before getting user BE");
         String userCode = rules.getUser().getCode();
         rules.println("The user Code is  ::  " +userCode);
         rules.println("Print QEventAttributeValueChangeMessage  LINK_ROLE_LISTS ::  "+$m.toString());
 
       /*  Collect role code from answer  */
         Answer newAnswer = $m.getAnswer();
         rules.println("Answer from QEventAttributeValueChangeMessage  LINK_ROLE_LISTS ::  "+newAnswer.toString());
         String targetCode = newAnswer.getTargetCode();
         String sourceCode = newAnswer.getSourceCode();
         String roleValue = "";
         if(newAnswer.getValue().equals("SEL_DRIVER"))
         {
             roleValue = "DRIVER";
             Answer userRole = new Answer(userCode, userCode, "PRI_DRIVER" , "TRUE");             
             rules.publishData(userRole); 
             Answer userRoleOwner = new Answer(userCode, userCode, "PRI_OWNER" , "FALSE");             
            rules.publishData(userRoleOwner); 
             
         }
          if(newAnswer.getValue().equals("SEL_OWNER"))
         {
             roleValue = "OWNER";
             Answer userRole = new Answer(userCode, userCode, "PRI_OWNER" , "TRUE");             
            rules.publishData(userRole); 
            Answer userRoleDriver = new Answer(userCode, userCode, "PRI_DRIVER" , "FALSE");             
            rules.publishData(userRoleDriver); 
         }
         
         String attributeCode = $m.data.getCode();
         rules.println("The target BE code is   ::  " +targetCode);
         rules.println("The source BE code is   ::  " +sourceCode);
         rules.println("The attribute code is   ::  " +attributeCode);
         rules.println("The role type code is   ::  " +newAnswer.getValue());
         rules.println("The role type value is   ::  " +roleValue);

		/* send updated baseentity for the owner */

           
       /* Get company code for this user */
        BaseEntity company = rules.getParent(userCode, "LNK_STAFF");
        String companyCode = company.getCode();
       /* Update link with the link Value  */
        rules.println("UPDATING link value OF LINK BETWEEN   ::   " + companyCode + "  &  " + userCode);
        Link updateLink = new Link( companyCode, userCode, "LNK_STAFF", roleValue, (double) 1);
        String result = QwandaUtils.apiPutEntity(rules.getQwandaServiceUrl() + "/qwanda/links", JsonUtils.toJson(updateLink),rules.getToken());
        
        rules.publishEA($m.getEa());
       rules.footer();  

end
