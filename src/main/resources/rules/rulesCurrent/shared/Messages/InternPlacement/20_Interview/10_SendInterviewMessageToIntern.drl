package life.genny.rules;
import life.genny.rules.QRules;

rule "Send interview message to Intern"
	when
		rules: QRules(  isState("SEND_INTERVIEW_MESSAGE_TO_INTERN") &&
						!isState("LOOP_SEND_INTERVIEW_MESSAGE_TO_INTERN") )
	then
	 	rules.header();

		rules.setState("LOOP_SEND_INTERVIEW_MESSAGE_TO_INTERN");

        BaseEntity intern = rules.getAsBaseEntity("internBe");
        BaseEntity internship = rules.getAsBaseEntity("internshipBe");
        BaseEntity hostCompany = rules.getAsBaseEntity("hostBeg");

        rules.println("Intern Code  :: " + intern);
		rules.println("Internship    :: " + internship);
        rules.println("hostCompany    :: " + hostCompany);

        if(intern == null){
            rules.println("intern is null");
            return;
        }else if(internship == null){
            rules.println("internship is null");
            return;
        }else if(hostCompany == null){
            rules.println("hostCompany is null");
            return;
        }else{
	 		HashMap<String, String> contextMap = new HashMap<String, String>();
            contextMap.put("INTERN", intern.getCode());
	        contextMap.put("INTERNSHIP", internship.getCode());
	        contextMap.put("HOSTCOMPANY", hostCompany.getCode());

			String[] recipients = new String[1];
			recipients[0] = intern.getCode();

            rules.sendMessage(null, recipients, contextMap, "MSG_INTERNMATCH_REQUEST_FOR_INTERVIEW", "EMAIL");
            rules.sendMessage(null, recipients, contextMap, "MSG_INTERNMATCH_REQUEST_FOR_INTERVIEW", "SMS");
            rules.sendMessage(null, recipients, contextMap, "MSG_INTERNMATCH_REQUEST_FOR_INTERVIEW", "TOAST");
            rules.println("Message Sent");
 		}

	 	rules.footer();
end
