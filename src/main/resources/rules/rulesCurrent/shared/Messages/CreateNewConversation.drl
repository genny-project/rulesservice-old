package life.genny.rules;

import life.genny.rules.RulesUtils;
import life.genny.rules.QRules;
import io.vertx.core.json.JsonObject;
import life.genny.qwanda.message.QEventMessage;



rule "Create Conversation"

    when
	    $m :  QEventMessage( event_type == "BTN_CLICK" && data.code == "BTN_CREATE_CONVERSATION" )
        rules: QRules( ) 
     then
     	
     	rules.header();
     		
	    String data = $m.getData().getValue();
		
  		if(data != null) {
  			
  			JsonObject dataJson = new JsonObject(data);
  		    String receiverCode = dataJson.getString("itemCode");
  		    String hint = dataJson.getString("hint");
  		    String userCode = rules.getUser().getCode();
  		    
  		    if(receiverCode != null) {
  		    	
  		    		rules.showLoading("Creating new conversation...");
  		    		
  		    		/* create new conversation */
  		        BaseEntity newConvo = QwandaUtils.createBaseEntityByCode(QwandaUtils.getUniqueId(userCode , null, "CHT", rules.getToken()), "Chat", rules.getQwandaServiceUrl(), rules.getToken());
  		        	
  		        /* Set convo attributes */
  		        /* title of the convo = name of the load */
  		        String nameLoad = rules.getBaseEntityValueAsString(hint, "PRI_TITLE");
  		        if(nameLoad == null) nameLoad = "New Conversation";
  		        
  		        Answer titleConvo = new Answer(newConvo.getCode(), newConvo.getCode(), "PRI_TITLE", nameLoad);
	  			Answer lastMessageDate = new Answer(newConvo.getCode(), newConvo.getCode(), "PRI_DATE_LAST_MESSAGE", RulesUtils.getTodaysDate("DD/MM/YYYY HH:mm"));
	  			Answer items[] = new Answer[2];
	  			items[0] = titleConvo;
	  			items[1] = lastMessageDate;
	  			
	  			String[] recipientCodeArray = new String[2];
	  			recipientCodeArray[0] = userCode;
	  			recipientCodeArray[1] = receiverCode;

	  			QDataAnswerMessage msg = new QDataAnswerMessage(items);
	  			msg.setRecipientCodeArray(recipientCodeArray);
	  			msg.setToken(rules.getToken());
	  			
	  			String jsonAnswer = RulesUtils.toJson(msg);
	  			QwandaUtils.apiPostEntity(rules.getQwandaServiceUrl() + "/qwanda/answers/bulk", jsonAnswer, rules.getToken());
	  			
  		        /* Link convo to GRP_MESSAGES */
	  			QwandaUtils.createLink("GRP_MESSAGES", newConvo.getCode(), "LNK_CHAT", "list-item-conversation", 1.0, rules.getToken()); 
	  			
	  			/* Link users to chat */
	  			QwandaUtils.createLink(newConvo.getCode(), rules.getUser().getCode(), "LNK_USER", "sender", 1.0, rules.getToken()); 
	  			QwandaUtils.createLink(newConvo.getCode(), receiverCode, "LNK_USER", "receiver", 1.0, rules.getToken()); 
  		        
  		        /* Fetch new conversation and send it to relevant users */
  		        rules.publishBaseEntitysByParentAndLinkCodeWithAttributes("GRP_MESSAGES", "LNK_CHAT", 0, 100, true);
  		        
  		        /* redirect user to messaging screen */
  		        rules.sendSublayout("messages-layout", "layouts/messages-layout.json", newConvo.getCode());
  		    }
  		}
     	
     	rules.footer();
end
