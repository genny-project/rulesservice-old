package life.genny.rules;
import life.genny.rules.QRules;
import life.genny.qwanda.entity.SearchEntity;
import java.io.IOException;
import life.genny.qwanda.message.QDataBaseEntityMessage;

rule "10_SendData_For_BEG_Deselection"
	when
	   rules: QRules( isState("SEND_DATA_FOR_BEG_DESELECTION") && !isState("LOOP_SEND_DATA_FOR_BEG_DESELECTION") )
	then
	    rules.header();
	   
	    rules.setState("LOOP_SEND_DATA_FOR_BEG_DESELECTION");

		/* get buckets */
        List<BaseEntity> buckets = rules.getAsBaseEntitys("buckets");
        
        /* Get the recipients */
		String[] recipients = {rules.getUser().getCode()};
		
		for (BaseEntity bucket : buckets) {

			SearchEntity applicationsOfBucket = new SearchEntity("SBE_ALL_APPLICATIONS", "SBE_ALL_APPLICATIONS")
					.addFilter("PRI_CODE", SearchEntity.StringFilter.LIKE, "APP_%").setSourceCode(bucket.getCode())
					.setPageStart(0).setPageSize(10000);

			try {
				List<BaseEntity> searchEntityResults = rules.getSearchResultsAsList(applicationsOfBucket, true);
				if (searchEntityResults != null && searchEntityResults.size() > 0) {
						rules.println("bucket name ::"+bucket.getCode()+", number of applications ::"+searchEntityResults.size());

						rules.publishBaseEntityByCode(searchEntityResults, bucket.getCode(), "LNK_APPLICATION", recipients, "APPLICATION", false, true, 2);		
				}

			} catch (IOException e) {
				e.printStackTrace();
			}
		}
       
		rules.setState("SENT_DATA_FOR_BEG_DESELECTION");
	    rules.footer();
end
