package life.genny.rules;

import life.genny.rules.QRules;

rule "Pagination"
    when
        rules: QRules( isState("EVENT_PAGINATION") && !isState("DID_PAGINATION") )
     then
     
     	rules.header();
		
		rules.setState("DID_PAGINATION");
		
		rules.println("======= PAGINATING =========");
		
		String rootCode = rules.getAsString("rootCode");
		String beCode = rules.getAsString("beCode");
		Integer pageStart = rules.getAsInteger("pageStart");
		Integer pageSize = rules.getAsInteger("pageSize");
		
		rules.println(rootCode);
		rules.println(beCode);
		rules.println(pageStart);
		rules.println(pageSize);
		
		/* we fetch the next page for the given root code */
		if(rootCode != null && pageStart != null && pageSize != null) {
			
			/*String searchEntityCode = rootCode;
			if(beCode != null) {
				searchEntityCode = rootCode + "_" + beCode;
			}
						
			SearchEntity searchEntity = rules.baseEntity.getSearchEntityByCode(searchEntityCode);
			if(searchEntity != null) {
				
				searchEntity.setPageStart(pageStart + pageSize);
				searchEntity.setPageSize(pageSize);
				rules.sendSearchResults(searchEntity, rootCode);				 
			} */
			
			SearchEntity paginatedSearch = new SearchEntity("SBE_PAGINATED_SEARCH", "SBE_PAGINATED_SEARCH")
            .addSort("PRI_CREATED", "Created", SearchEntity.Sort.DESC)
            .setSourceCode(rootCode)
            .addFilter("PRI_CODE", SearchEntity.StringFilter.LIKE, beCode + "%")
            .setPageStart(pageStart)
            .setPageSize(pageSize);

            /* we publish the units */
            rules.sendSearchResults(paginatedSearch, rootCode);
		}
		
		rules.footer();
end
