package life.genny.rules;

import life.genny.utils.RulesUtils;
import life.genny.rules.QRules;
import io.vertx.core.json.JsonObject;
import life.genny.qwanda.message.QEventMessage;
import java.util.ArrayList;
import java.util.List;

rule "Create Conversation"

when
    $m :  QEventMessage( event_type == "BTN_CLICK" && data.code == "BTN_CREATE_CONVERSATION" )
    rules: QRules( !isState("CREATE_CONVERATION_MESSAGE") )
then

    rules.header();
    rules.setState("CREATE_CONVERATION_MESSAGE");

    String data = $m.getData().getValue();

    if(data != null) {

      JsonObject dataJson = new JsonObject(data);
      String itemCode = dataJson.getString("itemCode");
      // String offerCode = dataJson.getString("itemCode");
      String hint = dataJson.getString("hint");
      String userCode = rules.getUser().getCode();


      if(itemCode != null) {

        String receiverCode = null;
        String chatCode = "";

        /* Get the Receiver User Code */
        if(itemCode.startsWith("PER_")){   /* This is Owners user code, msg initiated by Driver */
          receiverCode = itemCode;
        }
        else {
          BaseEntity receiver = rules.baseEntity.getLinkedBaseEntities(itemCode, "LNK_OFR", "CREATOR").get(0);
          receiverCode = receiver.getCode();
        }

        String[] recipientCodeArray = new String[2];
        recipientCodeArray[0] = userCode;
        recipientCodeArray[1] = receiverCode;

        rules.sendAllChats(0,1000); //Need to send all old chat, because the old chats are not being sent at AUTH_INIT.
        //Won't be required if we can check if Chats have been already sent

        rules.println("If chat already exists between users :: "+rules.checkIfChatAlreadyExists( userCode, receiverCode ));

        //Check if conversation already exists
        if(rules.checkIfChatAlreadyExists( userCode,receiverCode )){

          rules.showLoading("Loading Message...");
          BaseEntity oldChat = rules.getOldChatForSenderReceiver( userCode,receiverCode );
          chatCode = oldChat.getCode();
          VertxUtils.subscribe(rules.realm(), oldChat, recipientCodeArray);
          rules.println("The old chat code is :: "+chatCode);
          rules.publishData(oldChat, recipientCodeArray);
        }
        else
        {
          rules.showLoading("Creating new conversation...");

          /* create new conversation */
          BaseEntity newConvo = rules.baseEntity.create(rules.getUser().getCode(), "CHT", "Chat");

          if(newConvo != null) {

            chatCode = newConvo.getCode();

            VertxUtils.subscribe(rules.realm(), newConvo, recipientCodeArray);

            Answer titleConvo = new Answer(newConvo.getCode(), newConvo.getCode(), "PRI_TITLE", "New chat");
            Answer lastMessageDate = new Answer(newConvo.getCode(), newConvo.getCode(), "PRI_DATE_LAST_MESSAGE", RulesUtils.getTodaysDate("DD/MM/YYYY HH:mm"));
            List<Answer> answers = new ArrayList<Answer>();
            answers.add(titleConvo);
            answers.add(lastMessageDate);
            rules.baseEntity.saveAnswers(answers);

            /* Link convo to GRP_MESSAGES */
            rules.baseEntity.createLink("GRP_MESSAGES", newConvo.getCode(), "LNK_CHAT",  "CHAT", 1.0);

            /* Link users to chat */
            rules.baseEntity.createLink(newConvo.getCode(), rules.getUser().getCode(), "LNK_USER", "sender", 1.0);
            rules.baseEntity.createLink(newConvo.getCode(), receiverCode, "LNK_USER",  "receiver", 1.0);

            /* Fetch new conversation and send it to relevant users */
            // rules.publishData(newConvo, recipientCodeArray);
          }
        }

        /* redirect user to messaging screen */
        /* Send sender BE to receiver and receiver BE to sender  */
        String[] receiverCodeInArray = {receiverCode};
        String[] senderCodeInArray = {userCode};
        rules.publishData(rules.baseEntity.getBaseEntityByCode(userCode), receiverCodeInArray );
        rules.publishData(rules.baseEntity.getBaseEntityByCode(receiverCode), senderCodeInArray );
        rules.sendChatMessages(chatCode, 0, 500);
        rules.publishData(rules.baseEntity.getBaseEntityByCode("GRP_MESSAGES"), receiverCodeInArray );
        // rules.sendSublayout("messages-layout", "messages-layout.json", chatCode);
        rules.sendCmdSplitView("GRP_MESSAGES", chatCode);
        rules.navigateTo("/chat/" + chatCode);
      }

    }

    rules.footer();
end
