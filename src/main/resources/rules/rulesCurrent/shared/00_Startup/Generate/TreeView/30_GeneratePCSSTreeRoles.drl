package life.genny.rules;

import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QBulkMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QEventMessage;
import life.genny.rules.QRules;
import io.vertx.core.json.JsonObject;
import java.util.List;
import java.util.ArrayList;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.utils.VertxUtils;

rule "Generate Tree Roles PCSS"

    ruleflow-group 'GenerateTree'
    salience 690

     when
       rules: QRules( realm() == "pcss" && isState("GENERATE_TREE") && !isState("LOOP_GENERATE_TREE_PCSS") )
     then
		rules.header();
		rules.setState("LOOP_GENERATE_TREE_PCSS");

		rules.println("Generating Base Tree Rules for "+rules.realm());

			//		rules.baseEntity.saveAnswer( new Answer("GRP_REPORTS", "GRP_REPORTS", "GRP_REPORTS_ADMIN", "PRI_IS_ADMIN") );		



		rules.baseEntity.saveAnswer(new Answer("GRP_ROOT", "GRP_ROOT", "GRP_BEGS", "PRI_IS_BUYER"));
		rules.baseEntity.saveAnswer(new Answer("GRP_ROOT", "GRP_ROOT", "GRP_REPORTS", "PRI_IS_BUYER"));
		rules.baseEntity.saveAnswer(new Answer("GRP_ROOT", "GRP_ROOT", "GRP_APPLICATIONS", "PRI_IS_BUYER"));
		rules.baseEntity.saveAnswer(new Answer("GRP_ROOT", "GRP_ROOT", "GRP_STAFFS", "PRI_IS_BUYER"));
		rules.baseEntity.saveAnswer(new Answer("GRP_ROOT", "GRP_ROOT", "GRP_LEGAL", "PRI_IS_BUYER"));

		rules.setState("GENERATE_TREE_RULES");
     	rules.footer();
end
