package life.genny.rules;

import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QBulkMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QEventMessage;
import life.genny.rules.QRules;
import io.vertx.core.json.JsonObject;
import java.util.List;
import java.util.ArrayList;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.utils.VertxUtils;

rule "GenerateCh40Roles"

    ruleflow-group 'GenerateCh40Roles'
    salience 200

     when
       rules: QRules( isState("GENERATE_STARTUP") && (isRealm("channel40")) && isState("GENERATE_CAPABILITIES") && !isState("LOOP_GENERATE_CH40_ROLES"))
     then

    rules.header();

    rules.setState("LOOP_GENERATE_CH40_ROLES");
	rules.println("Generating Channel40 Roles for "+rules.realm());
	
	/* we grab the capabilities for the buyer role */
	List<BaseEntity> capabilitiesBuyer = rules.getAvailableCapabilities("BUYER");
	if(capabilitiesBuyer != null) {
		
		/* we create an array of capability codes */
		String[] capabilityCodes = capabilitiesBuyer.stream().map(capability -> capability.getCode()).collect(Collectors.toList()).toArray(new String[0]);
		
		/* we create the freight owner role */
		rules.baseEntity.createRole("BUYER", "Freight Owner", capabilityCodes); 
	}
	
	/* we grab the capabilities for the seller role */
	List<BaseEntity> capabilitiesSeller = rules.getAvailableCapabilities("SELLER");
	if(capabilitiesSeller != null) {
		
		/* we create an array of capability codes */
		String[] capabilityCodes = capabilitiesSeller.stream().map(capability -> capability.getCode()).collect(Collectors.toList()).toArray(new String[0]);
		
		/* we create the transport operator role */
		rules.baseEntity.createRole("SELLER", "Transport Operator", capabilityCodes); 
	}
	 
    rules.footer();

end
