package life.genny.rules;


import life.genny.rules.QRules;
import life.genny.qwanda.Link;

import life.genny.qwandautils.QwandaUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwanda.message.QEventLinkChangeMessage;

import java.util.Arrays;

rule "Listen Link Change"
ruleflow-group 'LinkChange'
    when
        $m: QEventLinkChangeMessage( event_type == "EVT_LINK_CHANGE" && link != null )
        rules : QRules( isState("STARTED") && (!isState("LINK_CHANGE")) )
     then
      	rules.header();
     		rules.setState("LINK_CHANGE");

     		Link link = $m.getLink();
     		String[] recipientCodes = rules.getRecipientCodes($m);
    		rules.println(Arrays.toString(recipientCodes));
     		rules.println("Link "+link);

    		rules.publishData($m, recipientCodes);

				String sourceCode = null;
				String targetCode = link.getSourceCode();
				
				Link oldLink = $m.getOldLink();
				if(oldLink != null) {
					sourceCode = oldLink.getSourceCode();
				}

        	/* if the base entity being moved is a BE we reload the cache */
    		if(link.getTargetCode().startsWith("BEG_")) {
    			
    			rules.println("====== BEG LINK CHANGE =========");
    			/* rules.cacheUtils.refresh(rules.realm(), "GRP_APPLICATIONS"); */
    			/* rules.cacheUtils.refresh(rules.realm(), "GRP_DASHBOARD"); */
    			
    			rules.cacheUtils.moveBaseEntity(link.getTargetCode(), sourceCode, targetCode);
    		}

				/* we publish the source and the target again */
				if(sourceCode != null) {
					BaseEntity sourceBe = rules.getBaseEntityByCode(sourceCode);
					if(sourceBe != null) {
						rules.publishBaseEntityByCode(sourceBe);
					}
				}

				if(targetCode != null) {
					BaseEntity targetBe = rules.getBaseEntityByCode(targetCode);
					if(targetBe != null) {
						rules.publishBaseEntityByCode(targetBe);
					}
				}

   	    rules.footer();

end
