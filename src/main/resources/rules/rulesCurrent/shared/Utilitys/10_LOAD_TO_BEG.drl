package life.genny.rules;

import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QBulkMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QEventMessage;
import life.genny.rules.QRules;
import io.vertx.core.json.JsonObject;
import java.util.List;
import java.util.ArrayList;
import life.genny.qwanda.Answer;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.entity.EntityEntity;
import life.genny.qwanda.entity.SearchEntity;
import life.genny.utils.VertxUtils;

rule "LoadToBeg"

    ruleflow-group 'LoadToBeg'
     when
       rules: QRules( !isState("LOAD_TO_BEG"))
     then
	 rules.setDrools(drools);
     rules.header();
        rules.setState("LOAD_TO_BEG");
		rules.println("Processing LOAD TO BEG for "+rules.realm());

        SearchEntity searchBE = new SearchEntity("SBE_GET_ALL_BEGS","All Jobs")
  	     .addSort("PRI_CREATED","Created",SearchEntity.Sort.DESC)
  	     .addFilter("PRI_CODE",SearchEntity.StringFilter.LIKE,"BEG_%")
  	     .setPageStart(0)
  	     .setPageSize(10000);


		QDataBaseEntityMessage msg = rules.getSearchResults(searchBE);
			rules.println("Got "+msg.getItems().length+" items");

		Integer count = 0;
		
		for (BaseEntity be : msg.getItems()) {
			rules.println("Processing "+count+" of "+msg.getItems().length+" "+be.getCode()+" ");
			
			/* find the load */
			BaseEntity load = null;
			for (EntityEntity ee : be.getLinks()) {
				if (ee.getLink().getTargetCode().startsWith("LOD_")) {
					load = rules.baseEntity.getBaseEntityByCode(ee.getLink().getTargetCode());
					break;
				}
			}
			if (load != null) {
			rules.println("LOAD FOUND FOR "+be.getCode()+" = "+load.getCode());
			String loadValue = load.getValue("LNK_LOAD_CATEGORY_LISTS",null);
			rules.println("The value is :: "+loadValue);
			Answer ans1 = new Answer(be.getCode(),be.getCode(),"LNK_PRODUCT_CATEGORY_TAG",loadValue);
			List<Answer> answers = new ArrayList<Answer>();
			answers.add(ans1);
			rules.baseEntity.saveAnswers(answers);
			} else {
				rules.println("ERROR! NO LOAD FOUND FOR "+be.getCode());
			}
			count++;
		}	

     rules.footer();
end
