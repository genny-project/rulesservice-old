package life.genny.rules;

import life.genny.rules.RulesUtils;
import life.genny.rules.QRules;
import life.genny.qwanda.Answer;
import life.genny.payments.QPaymentsProvider;


rule "Payment creation failure - Check for existing payment user in payments-service"
	agenda-group "payments"
	no-loop true
    when
    	rules: QRules( isState("PAYMENTS_CREATION_FAILURE_CHECK_USER_EXISTS") && !isState("IS_ASSEMBLY_USER_CREATED") && !isState("LOOP_CHECK_PAYMENTS_USER_EXISTS"))
    then
     
     rules.header();
     
	     rules.setState("LOOP_CHECK_PAYMENTS_USER_EXISTS");
	     	     
	     /* get assembly authKey   */
	     QPaymentsProvider paymentsProvider = rules.getPaymentsServiceProvider();
		String assemblyAuthToken = paymentsProvider.getPaymentsAuthKey();
	
		/* Creation of assembly user will fail if user-email already exists in assembly! So fetching the existing assembly user ID here */     	
	     String existingAssemblyId = paymentsProvider.findExistingPaymentsUserAndSetAttribute(assemblyAuthToken);
	  		
	  	if(existingAssemblyId != null) {
	  		Answer assemblyIdAnswer = new Answer(rules.getUser().getCode(), rules.getUser().getCode(), "PRI_ASSEMBLY_USER_ID", existingAssemblyId);
	     	rules.baseEntity.saveAnswer(assemblyIdAnswer);
	     	rules.println("assembly ID created in our system ::"+existingAssemblyId); 
	     	rules.setState("IS_ASSEMBLY_USER_CREATED");
	     	rules.setState("ASSEMBLY_USER_AVAILABLE");
	     	drools.setFocus("payments");
	  	 }
     	
     
     rules.footer();      		      
end