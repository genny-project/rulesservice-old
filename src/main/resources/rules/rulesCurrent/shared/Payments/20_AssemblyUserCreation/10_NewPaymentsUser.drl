package life.genny.rules;

import life.genny.rules.RulesUtils;
import life.genny.rules.QRules;
import life.genny.qwanda.Answer;
import life.genny.utils.PaymentUtils;
import life.genny.payments.QPaymentsProvider;


rule "New Payments User"
	agenda-group "payments"
	no-loop true
    when
    	rules: QRules( isState("NEW_ASSEMBLY_USER_CREATION") && !isState("IS_ASSEMBLY_USER_CREATED") && !isState("LOOP_ASSEMBLY_USER_CREATION") )
    then

     rules.header();

	     rules.setState("LOOP_ASSEMBLY_USER_CREATION");
	
	    /* get assembly authKey   */
	    QPaymentsProvider paymentsProvider = rules.getPaymentsServiceProvider();
		String assemblyAuthToken = paymentsProvider.getPaymentsAuthKey();
	
	     /*  Creates assembly userId */
	     String assemblyId = PaymentUtils.getAssemblyId(rules.getToken());
	
	
	     /* logic to create assembly user & set the payments userProfileExists flag  */
	     assemblyId = paymentsProvider.paymentUserCreation(assemblyId, assemblyAuthToken);
	
	     if(assemblyId != null) {
	      /* Creates a new attribute for assembly user ID */
			Answer assemblyIdAnswer = new Answer(rules.getUser().getCode(), rules.getUser().getCode() , "PRI_ASSEMBLY_USER_ID", assemblyId);
			rules.baseEntity.saveAnswer(assemblyIdAnswer);
			rules.println("assembly ID created in our system ::"+assemblyId);
			rules.setState("IS_ASSEMBLY_USER_CREATED");
			rules.setState("ASSEMBLY_USER_AVAILABLE");
		 	drools.setFocus("payments");
	     }

	 rules.footer();
end
