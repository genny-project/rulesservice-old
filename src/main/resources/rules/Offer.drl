package com.sample;

import org.apache.commons.lang3.StringUtils;

import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QMessage.MessageData;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import io.vertx.rxjava.core.eventbus.EventBus;
import io.vertx.core.buffer.Buffer;
import com.google.gson.Gson;
import life.genny.qwanda.Answer;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwandautils.KeycloakUtils;
import life.genny.qwandautils.QwandaUtils;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.Ask;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.message.QMSGMessage;
import life.genny.qwanda.message.QBaseMSGMessageType;

import java.lang.reflect.Type;
import java.util.Map;
import java.util.Set;
import java.time.LocalDateTime;
import java.time.ZonedDateTime;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializationContext;
import com.google.gson.FieldNamingPolicy;
import io.vertx.core.json.JsonObject;
import io.vertx.core.json.JsonArray;
import java.time.format.DateTimeFormatter;
import life.genny.qwanda.DateTimeDeserializer;
import life.genny.qwanda.entity.User;
import life.genny.qwanda.Link;

// global variables for color logs
global java.lang.String LOG_RESET;
global java.lang.String LOG_RED;
global java.lang.String LOG_GREEN;
global java.lang.String LOG_YELLOW;
global java.lang.String LOG_BLUE;
global java.lang.String LOG_PURPLE;
global java.lang.String LOG_CYAN;
global java.lang.String LOG_WHITE;
global java.lang.String LOG_BOLD;

rule "Accept Job"

    when
        $m : QEventMessage( event_type == "BTN_CLICK" && data.code == "BTN_ACCEPT_JOB")
        bus: EventBus()
        $user: User(realm != null )
        $map : Map($value: this["token"] != null)
        $map1 : Map($value1: this["realm"] != null)
    then

        System.out.println(LOG_YELLOW + "================================================================================================================================================" + LOG_RESET);
        System.out.println(LOG_GREEN + "RULE EXECUTED      ::   Accept Job" + LOG_RESET);

         // Prepare GSON Deserialization
        Gson gson = new GsonBuilder()
            .registerTypeAdapter(LocalDateTime.class, new JsonDeserializer<LocalDateTime>() {
                @Override
                public LocalDateTime deserialize(final JsonElement json, final Type type,
                    final JsonDeserializationContext jsonDeserializationContext)
                    throws JsonParseException {
                return LocalDateTime.parse(json.getAsJsonPrimitive().getAsString(), DateTimeFormatter.ISO_LOCAL_DATE_TIME);
                }

                public JsonElement serialize(final LocalDateTime date, final Type typeOfSrc,
                    final JsonSerializationContext context) {
                return new JsonPrimitive(date.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME)); 
                }
            }).create();

        Gson gson1 = new Gson();
        GsonBuilder gsonBuilder = new GsonBuilder();
        gsonBuilder.registerTypeAdapter(LocalDateTime.class, new DateTimeDeserializer());
        gson1 = gsonBuilder.create();
        //Prepare Token & qwandaServiceUrl
        String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
        String tokenString = (String)$map.get("token");   

        
        // retrieve jsonObj's values sent on data.value
        String data = $m.getData().getValue();
        if(data != null) {
            JsonObject dataJson = new JsonObject(data);
            String hint = dataJson.getString("hint");
            String begCode = dataJson.getString("itemCode"); // BEG_X ....
            String userCode = $user.getuCode();
            String userName = $user.getUname();
                     
            String linkCode= "LNK_BEG";
            String linkOffer= "OFFER";
            String linkQuoter= "QUOTER";

            //get BEG PRICE           
                String begPrice = MergeUtil.getAttrValue(begCode, "PRI_PRICE", tokenString);       
                System.out.println("BEG PRICE   ::   "+begPrice);
            // Create Offer BE
                BaseEntity offer = QwandaUtils.createBaseEntityByCode(QwandaUtils.getUniqueId( userCode, null, "OFR", tokenString ), "Offer", qwandaServiceUrl, tokenString);
                System.out.println("------------------------------------------------------------------------\n");
                System.out.println("OFFER BASE ENTITY   ::   "+offer.toString());  
                System.out.println("------------------------------------------------------------------------");

                String offerCode= offer.getCode();
                System.out.println("OFFER CODE   ::   "+offerCode);
            
            // Save attributes for OFFER as answer          
                Answer price = new Answer(userCode, offerCode, "PRI_PRICE", begPrice);
                Answer offercode = new Answer(userCode, offerCode, "PRI_OFFER_CODE", offerCode);
                Answer quoterCode = new Answer(userCode, offerCode, "PRI_QUOTER_CODE", userCode);
                Answer quoterUname = new Answer(userCode, offerCode, "PRI_QUOTER_USERNAME", userName);
                Answer jobCode = new Answer(userCode, offerCode, "PRI_BEG_CODE", begCode);
                
                List<Answer> answerList = new ArrayList<Answer>();	
                answerList.add(price);
                answerList.add(offercode);
                answerList.add(quoterCode);
                answerList.add(quoterUname);
                answerList.add(jobCode);

                // save attributes
                int i=1;
                for (Answer answer : answerList) {
                    System.out.println("Answer      " + i + "::   " + answer.toString());               
                    String result= QwandaUtils.apiPostEntity(qwandaServiceUrl + "/qwanda/answers",
                            gson1.toJson(answer), tokenString);
                            System.out.println("Result      " + i + "::   " + result );
                    i++;
                    
                }         
            // link BEG and OFFER BE || OFFER
                System.out.println("\nCREATING LINK BETWEEN          ::   " + begCode + "  &  " + offerCode);
                Link link1 = new Link( begCode, offerCode, linkCode, linkOffer);
                link1.setWeight(1.0);
                String output1 = QwandaUtils.apiPostEntity(qwandaServiceUrl + "/qwanda/entityentitys", gson.toJson(link1),tokenString);
            // link BEG and QUOTER BE || QUOTER
                System.out.println("\nCREATING LINK BETWEEN          ::   " + begCode + "  &  " + userCode);
                Link link2 = new Link( begCode, userCode, linkCode, linkQuoter);
                link2.setWeight(1.0);
                String output2 = QwandaUtils.apiPostEntity(qwandaServiceUrl + "/qwanda/entityentitys", gson.toJson(link2),tokenString);
            //Sending updated link of BEG
                JsonArray updatedLink = new JsonArray(QwandaUtils.apiGet(qwandaServiceUrl + "/qwanda/entityentitys/" + begCode + "/linkcodes/" + linkCode + "/children", tokenString));
                //Creating a data msg
                JsonObject newLink = new JsonObject();
                newLink.put("msg_type", "DATA_MSG");
                newLink.put("data_type", "LINK_CHANGE");
                newLink.put("items", updatedLink);

                System.out.println("------------------------------------------------------------------------");
                System.out.println("Updated Link   ::  "+newLink.toString());
                System.out.println("------------------------------------------------------------------------");
                //publish new link data
                newLink.put("token", tokenString );
                bus.publish("cmds", newLink);
            
            //SEND OFFER BE AGAIN FOR UPDATE   
                JsonObject offerObj = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/"+ begCode +"/linkcodes/"+ linkCode +"/attributes?PRI_OFFER_CODE=" + offerCode, tokenString));
                System.out.println("------------------------------------------------------------------------");
                System.out.println("UPDATED OFFER BE   ::  " + offerObj.toString());
                System.out.println("------------------------------------------------------------------------");
                offerObj.put("token", tokenString);      
                bus.publish("cmds", offerObj);
  


            //SEND QUOTER BE AGAIN FOR UPDATE
                JsonObject quoterObj = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/"+ begCode +"/linkcodes/"+ linkCode +"/attributes?PRI_USERNAME=" + userCode, tokenString));
                System.out.println("------------------------------------------------------------------------");
                System.out.println("QUOTER BE   ::  " + quoterObj.toString());
                System.out.println("------------------------------------------------------------------------");
                quoterObj.put("token", tokenString);      
                bus.publish("cmds", quoterObj);

            //Sending message to BEG OWNER
                String code= "code:" + begCode ;
                String recipient = "recipient:OWNER";
                String[] msgMessageData = {code, recipient};
                String templateCode = "MSG_CH40_ACCEPT_OFFER";
                String[] attachments = {};           
                QBaseMSGMessageType method = QBaseMSGMessageType.SMS;

                System.out.println("------------------------------------------------------------------------");
                System.out.println("msgMessageData Array   ::   " + msgMessageData.toString());
                
                //Creating messageData MSG_MESSAGE
                QMSGMessage msgMessage = new QMSGMessage("MSG_MESSAGE", templateCode, msgMessageData, method, attachments);
                JsonObject jsonMessage = new JsonObject().mapFrom(msgMessage);

                System.out.println("------------------------------------------------------------------------");
                System.out.println("MESSAGE TO OWNER   ::   " + jsonMessage.toString());
                System.out.println("------------------------------------------------------------------------");
                
                jsonMessage.put("token",tokenString);
                bus.publish("messages", jsonMessage);
            
        }

        //sending cmd BUCKETVIEW
            QCmdMessage cmdBucketView = new QCmdMessage("CMD_VIEW","BUCKET_VIEW");
            JsonObject bucketViewJson = new JsonObject().mapFrom(cmdBucketView);
            bucketViewJson.put("root", "GRP_DRIVER_VIEW");
            
            System.out.println("------------------------------------------------------------------------");
            System.out.println("BUCKETVIEW DATA   ::   " + bucketViewJson.toString());
            System.out.println("------------------------------------------------------------------------");
            
            bucketViewJson.put("token", tokenString);
            bus.publish("cmds", bucketViewJson);

        System.out.println( "\n" + LOG_RED + "RULE TERMINATED    ::   Accept Job" + LOG_RESET);
        System.out.println(LOG_YELLOW + "------------------------------------------------------------------------------------------------------------------------------------------------" + LOG_RESET);
end

rule "Confirm Offer"

    when
        $m : QEventMessage( event_type == "BTN_CLICK" && data.code == "BTN_CONFIRM_OFFER")
        bus: EventBus()
        $user: User(realm != null )
        $map : Map($value: this["token"] != null)
        $map1 : Map($value1: this["realm"] != null)
    then

        System.out.println(LOG_YELLOW + "================================================================================================================================================" + LOG_RESET);
        System.out.println(LOG_GREEN + "RULE EXECUTED      ::   Confirm Offer" + LOG_RESET);

         // Prepare GSON Deserialization
        Gson gson = new GsonBuilder()
            .registerTypeAdapter(LocalDateTime.class, new JsonDeserializer<LocalDateTime>() {
                @Override
                public LocalDateTime deserialize(final JsonElement json, final Type type,
                    final JsonDeserializationContext jsonDeserializationContext)
                    throws JsonParseException {
                return LocalDateTime.parse(json.getAsJsonPrimitive().getAsString(), DateTimeFormatter.ISO_LOCAL_DATE_TIME);
                }

                public JsonElement serialize(final LocalDateTime date, final Type typeOfSrc,
                    final JsonSerializationContext context) {
                return new JsonPrimitive(date.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME)); 
                }
            }).create();
        
        
        //Prepare Token & qwandaServiceUrl
        String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
        String tokenString = (String)$map.get("token");   
        
        // retrieve jsonObj's values sent on data.value
        String data = $m.getData().getValue();
        if(data != null) {

            JsonObject dataJson = new JsonObject(data);
            String offerCode = dataJson.getString("itemCode"); // COMPANY who quoted
            String userCode = $user.getuCode();
            String linkCode= "LNK_BEG";
            String linkValue= "OFFER";

            // GET  attributes of the OFFER that's being accepted
            JsonArray offerBe = new JsonArray(QwandaUtils.apiGet(qwandaServiceUrl + "/qwanda/baseentitys/" + offerCode + "/attributes", tokenString));
            System.out.println("------------------------------------------------------------------------");
            System.out.println("OFEER DATA   ::   " + offerBe.toString());
            System.out.println("------------------------------------------------------------------------");
            
            Map<String, String> map = new HashMap<>();
            // loop to GET attributeCodes and VALUE
            for(Object obj : offerBe) {
                JsonObject offerObj = (JsonObject) obj;
                String attributeCode = offerObj.getString("attributeCode");
                String attributeValue = offerObj.getString("valueString");
                map.put(attributeCode, attributeValue); /* PUT in map */

            }
            System.out.println("------------------------------------------------------------------------");
            System.out.println("MAP DATA   ::   " + map);
            System.out.println("------------------------------------------------------------------------");
            
            String begCode= map.get("PRI_BEG_CODE");
            String begPrice= map.get("PRI_PRICE");
            String quoterCode= map.get("PRI_QUOTER_CODE");
            String quoterUname= map.get("PRI_QUOTER_USERNAME");

            System.out.println("------------------------------------------------------------------------");
            System.out.println("BEG CODE          ::   " + begCode);
            System.out.println("BEG PRICE         ::   " + begPrice);
            System.out.println("QUOTER CODE       ::   " + quoterCode);
            System.out.println("QUOTER USERNAME   ::   " + quoterUname);
            System.out.println("------------------------------------------------------------------------");

            // Create a link between BEG and selected QUOTER as  D R I V E R
                System.out.println("\nCREATING DRIVER LINK BETWEEN          ::   " + begCode + "  &  " + quoterCode);
                Link link = new Link( begCode, quoterCode, linkCode, "DRIVER");
                link.setWeight(1.0);
                String output1 = QwandaUtils.apiPutEntity(qwandaServiceUrl + "/qwanda/links", gson.toJson(link),tokenString);
            
            //SEND QUOTER BE AGAIN FOR UPDATE
                JsonObject quoterObj = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/"+ begCode +"/linkcodes/"+ linkCode +"/attributes?PRI_USERNAME=" + quoterUname, tokenString));
                System.out.println("------------------------------------------------------------------------");
                System.out.println("QUOTER BE   ::  " + quoterObj.toString());
                System.out.println("------------------------------------------------------------------------");
                quoterObj.put("token", tokenString);      
                bus.publish("cmds", quoterObj);
            
            //Sending updated link of BEG
                JsonArray updatedLink1 = new JsonArray(QwandaUtils.apiGet(qwandaServiceUrl + "/qwanda/entityentitys/" + begCode + "/linkcodes/" + linkCode + "/children", tokenString));
                //Creating a data msg
                JsonObject newLink1 = new JsonObject();
                newLink1.put("msg_type", "DATA_MSG");
                newLink1.put("data_type", "LINK_CHANGE");
                newLink1.put("items", updatedLink1);

                System.out.println("------------------------------------------------------------------------");
                System.out.println("Updated Link   ::  "+newLink1.toString());
                System.out.println("------------------------------------------------------------------------");
                //publish new link data
                newLink1.put("token", tokenString );
                bus.publish("cmds", newLink1);

                
            // Move BEG to GRP_APPROVED
                String oldGroup = "GRP_NEW_ITEMS";
                String newGroup = "GRP_APPROVED";
                String linkCode2 = "LNK_CORE";
                //Moving the BEG
                JsonObject begEntity = new JsonObject();
                begEntity.put("sourceCode", oldGroup);
                begEntity.put("targetCode", begCode);
                begEntity.put("attributeCode", linkCode2);
            
            System.out.println("------------------------------------------------------------------------");
            System.out.println("EntityLink   ::   "+begEntity.toString());
            System.out.println("------------------------------------------------------------------------");

            String output2= QwandaUtils.apiPostEntity(qwandaServiceUrl+"/qwanda/baseentitys/move/" + newGroup, begEntity.toString(), tokenString);
            System.out.println("The Output after POST: "+output2);

            //Fectching updated link of BEG
            JsonArray updatedLink2 = new JsonArray(QwandaUtils.apiGet(qwandaServiceUrl + "/qwanda/entityentitys/" + newGroup + "/linkcodes/" + linkCode2, tokenString));
            
            //Creating a data msg
            JsonObject newLink = new JsonObject();
            newLink.put("msg_type", "DATA_MSG");
            newLink.put("data_type", "LINK_CHANGE");
            newLink.put("items", updatedLink2);

            System.out.println("------------------------------------------------------------------------");
            System.out.println("Updated Link   ::  "+newLink.toString());
            System.out.println("------------------------------------------------------------------------");
            //publish new link data
            newLink.put("token", tokenString );
            bus.publish("cmds", newLink);


            //Sending message to QUOTER | COMPANY
                // String code= "code:" + begCode ;
                // String recipient = "recipient:OWNER";
                // String[] msgMessageData = {code, recipient};
                // String templateCode = "MSG_CH40_CONFIRM_OFFER";
                // String[] attachments = {};           
                // QBaseMSGMessageType method = QBaseMSGMessageType.SMS;

                // System.out.println("------------------------------------------------------------------------");
                // System.out.println("msgMessageData Array   ::   " + msgMessageData.toString());
                
                // //Creating messageData MSG_MESSAGE
                // QMSGMessage msgMessage = new QMSGMessage("MSG_MESSAGE", templateCode, msgMessageData, method, attachments);
                // JsonObject jsonMessage = new JsonObject().mapFrom(msgMessage);

                // System.out.println("------------------------------------------------------------------------");
                // System.out.println("MESSAGE TO COMPANY   ::   " + jsonMessage.toString());
                // System.out.println("------------------------------------------------------------------------");
                
                // jsonMessage.put("token",tokenString);
                // bus.publish("messages", jsonMessage);
        }

        //sending cmd BUCKETVIEW
            QCmdMessage cmdBucketView = new QCmdMessage("CMD_VIEW","BUCKET_VIEW");
            JsonObject bucketViewJson = new JsonObject().mapFrom(cmdBucketView);
            bucketViewJson.put("root", "GRP_DRIVER_VIEW");
            
            System.out.println("------------------------------------------------------------------------");
            System.out.println("BUCKETVIEW DATA   ::   " + bucketViewJson.toString());
            System.out.println("------------------------------------------------------------------------");
            
            bucketViewJson.put("token", tokenString);
            bus.publish("cmds", bucketViewJson);

        System.out.println( "\n" + LOG_RED + "RULE TERMINATED    ::   Confirm Offer" + LOG_RESET);
        System.out.println(LOG_YELLOW + "------------------------------------------------------------------------------------------------------------------------------------------------" + LOG_RESET);
end

rule "Accept Offer"

    when
        $m : QEventMessage( event_type == "BTN_CLICK" && data.code == "BTN_ACCEPT_OFFER")
        bus: EventBus()
        $user: User(realm != null )
        $map : Map($value: this["token"] != null)
        $map1 : Map($value1: this["realm"] != null)
    then

        System.out.println(LOG_YELLOW + "================================================================================================================================================" + LOG_RESET);
        System.out.println(LOG_GREEN + "RULE EXECUTED      ::   Accept Offer" + LOG_RESET);

         // Prepare GSON Deserialization
        Gson gson = new GsonBuilder()
            .registerTypeAdapter(LocalDateTime.class, new JsonDeserializer<LocalDateTime>() {
                @Override
                public LocalDateTime deserialize(final JsonElement json, final Type type,
                    final JsonDeserializationContext jsonDeserializationContext)
                    throws JsonParseException {
                return LocalDateTime.parse(json.getAsJsonPrimitive().getAsString(), DateTimeFormatter.ISO_LOCAL_DATE_TIME);
                }

                public JsonElement serialize(final LocalDateTime date, final Type typeOfSrc,
                    final JsonSerializationContext context) {
                return new JsonPrimitive(date.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME)); 
                }
            }).create();
        
        
        //Prepare Token & qwandaServiceUrl
        String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
        String tokenString = (String)$map.get("token");   
        
        // retrieve jsonObj's values sent on data.value
        String data = $m.getData().getValue();
        if(data != null) {

            JsonObject dataJson = new JsonObject(data);
            String hint = dataJson.getString("hint");
            String offerCode = dataJson.getString("itemCode"); // BEG_X ....
            String userCode = $user.getuCode();
            String linkCode= "LNK_BEG";
            String linkValue= "OFFER";
            String begCode= null;

            // base entity code is the job quote will be quoting on
            if(offerCode != null) {                
                //get OFFER BE's parent BEG code
                JsonArray offerArray = new JsonArray(QwandaUtils.apiGet(qwandaServiceUrl + "/qwanda/entityentitys/" + offerCode + "/linkcodes/" + linkCode + "/parents", tokenString));
                System.out.println("------------------------------------------------------------------------");
                System.out.println("OFFER BE   ::   "+ offerArray.toString());	
                System.out.println("------------------------------------------------------------------------");	

                for(Object obj : offerArray) {
                    JsonObject offerObj = JsonObject.mapFrom(obj);
                    begCode= offerObj.getString("sourceCode");  
                    System.out.println("BEG CODE   ::   "+ begCode);	                  
                }

                //Sending message to BEG OWNER
                String code= "code:" + begCode ;
                String recipient = "recipient:OWNER";
                String[] msgMessageData = {code, recipient};
                String templateCode = "MSG_CH40_ACCEPT_OFFER";
                String[] attachments = {};           
                QBaseMSGMessageType method = QBaseMSGMessageType.SMS;

                System.out.println("------------------------------------------------------------------------");
                System.out.println("msgMessageData Array   ::   " + msgMessageData.toString());
                
                //Creating messageData MSG_MESSAGE
                QMSGMessage msgMessage = new QMSGMessage("MSG_MESSAGE", templateCode, msgMessageData, method, attachments);
                JsonObject jsonMessage = new JsonObject().mapFrom(msgMessage);

                System.out.println("------------------------------------------------------------------------");
                System.out.println("MESSAGE TO OWNER   ::   " + jsonMessage.toString());
                System.out.println("------------------------------------------------------------------------");
                
                jsonMessage.put("token",tokenString);
                bus.publish("messages", jsonMessage);


                // Check if a link exists between BEG & COMPANY
                Boolean linkExists = QwandaUtils.checkIfLinkExistsForTarget(begCode, linkCode, userCode, tokenString );
                System.out.println("LINK EXISTS ?  ::    "+ linkExists);

                // Creating a link between BEG & COMPANY  || LINKVALUE = "QUOTER"
                if(!linkExists){
                    System.out.println("\nCREATING LINK BETWEEN          ::   " + begCode + "  &  " + userCode);
                    Link link = new Link( begCode, userCode, linkCode, "QUOTER");
                    link.setWeight(0.0);
                    String output = QwandaUtils.apiPostEntity(qwandaServiceUrl + "/qwanda/entityentitys", gson.toJson(link),tokenString);
                }
            

                //Fectching updated link of BEG
                JsonArray updatedLink = new JsonArray(QwandaUtils.apiGet(qwandaServiceUrl + "/qwanda/entityentitys/" + begCode + "/linkcodes/" + linkCode + "/children", tokenString));
                
                //Creating a data msg
                JsonObject newLink = new JsonObject();
                newLink.put("msg_type", "DATA_MSG");
                newLink.put("data_type", "LINK_CHANGE");
                newLink.put("items", updatedLink);

                System.out.println("------------------------------------------------------------------------");
                System.out.println("Updated Link   ::  "+newLink.toString());
                System.out.println("------------------------------------------------------------------------");
                //publish new link data
                newLink.put("token", tokenString );
                bus.publish("cmds", newLink);


                //SEND QUOTER BE AGAIN FOR UPDATE
                JsonObject quoterObj = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_PEOPLE/linkcodes/LNK_CORE/attributes?PRI_USERNAME=" + userCode, tokenString));
                quoterObj.put("aliasCode", "USER"); 
                System.out.println("------------------------------------------------------------------------");
                System.out.println("QUOTER BE   ::  " + quoterObj.toString());
                System.out.println("------------------------------------------------------------------------");
                quoterObj.put("token", tokenString);      
                bus.publish("cmds", quoterObj);

            }
        }

        //sending cmd BUCKETVIEW
        // QCmdMessage cmdBucketView = new QCmdMessage("CMD_VIEW","BUCKET_VIEW");
        // JsonObject bucketViewJson = new JsonObject().mapFrom(cmdBucketView);
        // bucketViewJson.put("root", "GRP_DRIVER_VIEW");
        
        // System.out.println("------------------------------------------------------------------------");
        // System.out.println("BUCKETVIEW DATA   ::   " + bucketViewJson.toString());
        // System.out.println("------------------------------------------------------------------------");
        
        // bucketViewJson.put("token", tokenString);
        // bus.publish("cmds", bucketViewJson);

        System.out.println( "\n" + LOG_RED + "RULE TERMINATED    ::   Accept Offer" + LOG_RESET);
        System.out.println(LOG_YELLOW + "------------------------------------------------------------------------------------------------------------------------------------------------" + LOG_RESET);
end


rule "Make Offer"

    when
        $m : QEventMessage( event_type == "BTN_CLICK" && data.code == "BTN_MAKE_OFFER")
        bus: EventBus()
        $user: User(realm != null )
        $map : Map($value: this["token"] != null)
        $map1 : Map($value1: this["realm"] != null)
    then

        System.out.println(LOG_YELLOW + "================================================================================================================================================" + LOG_RESET);
        System.out.println(LOG_GREEN + "RULE EXECUTED      ::   Make Offer" + LOG_RESET);

         // Prepare GSON Deserialization
        Gson gson = new GsonBuilder()
            .registerTypeAdapter(LocalDateTime.class, new JsonDeserializer<LocalDateTime>() {
                @Override
                public LocalDateTime deserialize(final JsonElement json, final Type type,
                    final JsonDeserializationContext jsonDeserializationContext)
                    throws JsonParseException {
                return LocalDateTime.parse(json.getAsJsonPrimitive().getAsString(), DateTimeFormatter.ISO_LOCAL_DATE_TIME);
                }

                public JsonElement serialize(final LocalDateTime date, final Type typeOfSrc,
                    final JsonSerializationContext context) {
                return new JsonPrimitive(date.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME)); 
                }
            }).create();
        
        
        //Prepare Token & qwandaServiceUrl
        String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
        String tokenString = (String)$map.get("token");   
        
        // retrieve jsonObj's values sent on data.value
        String data = $m.getData().getValue();
        if(data != null) {

            JsonObject dataJson = new JsonObject(data);
            String hint = dataJson.getString("hint");
            String baseEntityCode = dataJson.getString("itemCode"); // BEG_X ....
            String userCode = $user.getuCode();
            String linkCode= "LNK_BEG";

            // base entity code is the job quote will be quoting on
            if(baseEntityCode != null) {
                // Create Offer BE
                BaseEntity offer = QwandaUtils.createBaseEntityByCode(QwandaUtils.getUniqueId( userCode, null, "OFR", tokenString ), "Offer", qwandaServiceUrl, tokenString);
                System.out.println("------------------------------------------------------------------------\n");
                System.out.println("OFFER BASE ENTITY   ::   "+offer.toString());  
                System.out.println("------------------------------------------------------------------------");

                String offerCode= offer.getCode();
                System.out.println("OFFER CODE   ::   "+offerCode);
                 
                // Check if a link exists between BEG & OFFER
                Boolean linkExists = QwandaUtils.checkIfLinkExistsForTarget(baseEntityCode, linkCode, offerCode, tokenString );
                System.out.println("LINK EXISTS ?  ::    "+ linkExists);

                // Creating a link between BEG & OFFER
                if(!linkExists){
                    System.out.println("\nCREATING LINK BETWEEN          ::   " + baseEntityCode + "  &  " + offerCode);
                    String output = QwandaUtils.apiPostEntity(qwandaServiceUrl + "/qwanda/entityentitys", gson.toJson( new Link( baseEntityCode, offerCode, linkCode, "OFFER" )),tokenString);
                }
                
                if(offer != null) {
                    //get OFFER QUESTION GROUP
                    JsonObject offerGrp = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl + "/qwanda/baseentitys/" + $user.getuCode() + "/asks2/QUE_OFFER_DETAILS_GRP/" + offerCode, tokenString));
                    System.out.println("------------------------------------------------------------------------");
                    System.out.println("OFFER QUESTION GROUP   ::   "+ offerGrp.toString());	
                    System.out.println("------------------------------------------------------------------------");	
                    
                    // publish QUESTIONS
                    offerGrp.put("token", tokenString);					
                    bus.publish("cmds",  offerGrp);
                }
            }
        }

        //sending cmd FORM_VIEW
        QCmdMessage cmdFormView = new QCmdMessage("CMD_VIEW","FORM_VIEW");
        JsonObject formViewJson = new JsonObject().mapFrom(cmdFormView);
        formViewJson.put("root", "QUE_OFFER_DETAILS_GRP");
        
        System.out.println("------------------------------------------------------------------------");
        System.out.println("FORM VIEW   ::   " + formViewJson.toString());
        System.out.println("------------------------------------------------------------------------");
        
        formViewJson.put("token", tokenString);
        bus.publish("cmds", formViewJson);

        System.out.println( "\n" + LOG_RED + "RULE TERMINATED    ::   Make Offer" + LOG_RESET);
        System.out.println(LOG_YELLOW + "------------------------------------------------------------------------------------------------------------------------------------------------" + LOG_RESET);
end

rule "Counter Offer"

    when
        $m : QEventMessage( event_type == "BTN_CLICK" && data.code == "BTN_COUNTER_OFFER")
        bus: EventBus()
        $user: User(realm != null )
        $map : Map($value: this["token"] != null)
        $map1 : Map($value1: this["realm"] != null)
    then

        System.out.println(LOG_YELLOW + "================================================================================================================================================" + LOG_RESET);
        System.out.println(LOG_GREEN + "RULE EXECUTED      ::   Counter Offer" + LOG_RESET);

        //Prepare Token & qwandaServiceUrl
        String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
        String tokenString = (String)$map.get("token");   
        
        // retrieve jsonObj's values sent on data.value
        String data = $m.getData().getValue();
        if(data != null) {

            JsonObject dataJson = new JsonObject(data);
            String offerCode = dataJson.getString("itemCode"); // OFR_X ....
            String hint = dataJson.getString("hint");
            
            System.out.println("OFFER CODE   ::   "+offerCode);
            System.out.println("HINT         ::   "+hint);
            
            //get OFFER QUESTION GROUP
            JsonObject offerGrp = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl + "/qwanda/baseentitys/" + $user.getuCode() + "/asks2/QUE_OFFER_DETAILS_GRP/" + offerCode, tokenString));
            System.out.println("------------------------------------------------------------------------");
            System.out.println("OFFER QUESTION GROUP   ::   "+ offerGrp.toString());	
            System.out.println("------------------------------------------------------------------------");	
            
            // publish QUESTIONS
            offerGrp.put("token", tokenString);					
            bus.publish("cmds",  offerGrp);              
            
        }
        System.out.println( "\n" + LOG_RED + "RULE TERMINATED    ::   Counter Offer" + LOG_RESET);
        System.out.println(LOG_YELLOW + "------------------------------------------------------------------------------------------------------------------------------------------------" + LOG_RESET);
end
   
rule "Submit Offer"
    when
       $m : QEventMessage( event_type == "FORM_SUBMIT" && data.code == "QUE_OFFER_DETAILS_GRP" ) 
       bus:EventBus()
       $user: User(realm != null)
       $map : Map($value: this["token"] != null)
    then
        System.out.println(LOG_YELLOW + "================================================================================================================================================" + LOG_RESET);
        System.out.println(LOG_GREEN + "RULE EXECUTED      ::   Submit Offer" + LOG_RESET);
       
        // Prepare GSON Deserialization
        Gson gson = new GsonBuilder()
            .registerTypeAdapter(LocalDateTime.class, new JsonDeserializer<LocalDateTime>() {
                @Override
                public LocalDateTime deserialize(final JsonElement json, final Type type,
                    final JsonDeserializationContext jsonDeserializationContext)
                    throws JsonParseException {
                return LocalDateTime.parse(json.getAsJsonPrimitive().getAsString(), DateTimeFormatter.ISO_LOCAL_DATE_TIME);
                }

                public JsonElement serialize(final LocalDateTime date, final Type typeOfSrc,
                    final JsonSerializationContext context) {
                return new JsonPrimitive(date.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME)); 
                }
            }).create();

       //Prepare Token & qwandaServiceUrl
        String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
        String tokenString = (String)$map.get("token");   

        System.out.println("\nToken   ::   " + StringUtils.abbreviateMiddle(tokenString,"...",40));
        System.out.println("------------------------------------------------------------------------");
        
        String userCode = $user.getuCode();
        String dataString = $m.getData().getValue();
        JsonObject dataJson = new JsonObject(dataString);
        String offerCode = dataJson.getString("targetCode");
        String baseEntityCode = "BEG_XXXX";
        String linkCode= "LNK_BEG";

        System.out.println("OFFER CODE     ::    "+ offerCode);
        System.out.println("USER CODE      ::    "+ userCode);

        // Check if a link exists between USER & OFFER
        Boolean linkUserOffer = QwandaUtils.checkIfLinkExistsForTarget(userCode,  linkCode, offerCode, tokenString );
        System.out.println("LINK EXISTS ?  ::    "+ linkUserOffer);
        // Creating a link between USER & OFFER
        if(!linkUserOffer){
            String linkValue= "OFFER";
            System.out.println("\nCREATING LINK BETWEEN          ::   " + userCode + "  &  " + offerCode);
            String output = QwandaUtils.apiPostEntity(qwandaServiceUrl + "/qwanda/entityentitys", gson.toJson(new Link(userCode,offerCode, linkCode, linkValue)),tokenString);
        }

         // Check if a link exists between BEG & USER
        Boolean linkBegUser = QwandaUtils.checkIfLinkExistsForTarget(baseEntityCode,  linkCode, userCode, tokenString );
        System.out.println("LINK EXISTS ?  ::    "+ linkBegUser);
        // Creating a link between BEG & USER
        if(!linkBegUser){
            String linkValue= "DRIVER";
            System.out.println("\nCREATING LINK BETWEEN          ::   " + baseEntityCode + "  &  " + userCode);
            String output = QwandaUtils.apiPostEntity(qwandaServiceUrl + "/qwanda/entityentitys", gson.toJson(new Link(baseEntityCode,userCode, linkCode, linkValue)),tokenString);
        }
        
        System.out.println( "\n" + LOG_RED + "RULE TERMINATED    ::   Submit Offer" + LOG_RESET);
        System.out.println(LOG_YELLOW + "------------------------------------------------------------------------------------------------------------------------------------------------" + LOG_RESET);
end

rule "Show Offer Details"
	when
		$m : QEventMessage( event_type == "BTN_CLICK" && data.code == "BTN_SHOW_OFFER")
        bus: EventBus()
        $user: User(realm != null )
        $map : Map($value: this["token"] != null)
        $map1 : Map($value1: this["realm"] != null)
	then
		System.out.println(LOG_YELLOW + "================================================================================================================================================" + LOG_RESET);
        System.out.println(LOG_GREEN + "RULE EXECUTED      ::   Show Offer Details" + LOG_RESET);
       
        //Prepare Token & qwandaServiceUrl
        String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
        String tokenString = (String)$map.get("token");   

	    String data = $m.getData().getValue();
		if(data != null) {
	
			JsonObject dataJson = new JsonObject(data);	
			String hint = dataJson.getString("hint"); //BEG_XXX
			String baseEntityCode = dataJson.getString("itemCode"); // OFR_XXX ....

			if(baseEntityCode != null) {
			
				// we send the BE
				JsonObject be = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/" + baseEntityCode, tokenString));
				JsonArray array = new JsonArray();
				array.add(be);
				
		        JsonObject cmdBe = new JsonObject();
		        cmdBe.put("token", $value);
		        cmdBe.put("msg_type", "DATA_MSG");
		        cmdBe.put("data_type", "BaseEntity");
		        cmdBe.put("items", array);
		        bus.publish("cmds", cmdBe); 
				
				// we grab the layout and send it to FE
				JsonObject sublayout = new JsonObject(QwandaUtils.apiGet("https://raw.githubusercontent.com/genny-project/layouts/master/accept_offer.json", null));
			    	QCmdMessage messageSublayout = new QCmdMessage("CMD_SUBLAYOUT","accept-offer");
			    JsonObject cmdSubLayout = new JsonObject().mapFrom(messageSublayout);
			    cmdSubLayout.put("items", sublayout);
			    cmdSubLayout.put("root", baseEntityCode);
			    cmdSubLayout.put("token", $value);
			    //Publish it to the EventBus
			    bus.publish("cmds", cmdSubLayout);
			}	
		}

        System.out.println( "\n" + LOG_RED + "RULE TERMINATED    ::   Show Offer Details" + LOG_RESET);
        System.out.println(LOG_YELLOW + "------------------------------------------------------------------------------------------------------------------------------------------------" + LOG_RESET);
	
end
