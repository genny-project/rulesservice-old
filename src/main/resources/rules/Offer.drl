package com.sample

import org.apache.commons.lang3.StringUtils;

import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QMessage.MessageData;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import io.vertx.rxjava.core.eventbus.EventBus;
import io.vertx.core.buffer.Buffer;
import com.google.gson.Gson;
import life.genny.qwanda.Answer;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwandautils.KeycloakUtils;
import life.genny.qwandautils.QwandaUtils;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.Ask;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.message.QMSGMessage;
import life.genny.qwanda.message.QBaseMSGMessageType;

import java.lang.reflect.Type;
import java.util.Map;
import java.util.Set;
import java.time.LocalDateTime;
import java.time.ZonedDateTime;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializationContext;
import com.google.gson.FieldNamingPolicy;
import io.vertx.core.json.JsonObject;
import io.vertx.core.json.JsonArray;
import java.time.format.DateTimeFormatter;
import life.genny.qwanda.DateTimeDeserializer;
import life.genny.qwanda.entity.User;
import life.genny.qwanda.Link;

// global variables for color logs
global java.lang.String LOG_RESET;
global java.lang.String LOG_RED;
global java.lang.String LOG_GREEN;
global java.lang.String LOG_YELLOW;
global java.lang.String LOG_BLUE;
global java.lang.String LOG_PURPLE;
global java.lang.String LOG_CYAN;
global java.lang.String LOG_WHITE;
global java.lang.String LOG_BOLD;

rule "Accept Offer"

    when
        $m : QEventMessage( event_type == "BTN_CLICK" && data.code == "BTN_ACCEPT_OFFER")
        bus: EventBus()
        $user: User(realm != null )
        $map : Map($value: this["token"] != null)
        $map1 : Map($value1: this["realm"] != null)
    then

        System.out.println(LOG_YELLOW + "================================================================================================================================================" + LOG_RESET);
        System.out.println(LOG_GREEN + "RULE EXECUTED      ::   Accept Offer" + LOG_RESET);

         // Prepare GSON Deserialization
        Gson gson = new GsonBuilder()
            .registerTypeAdapter(LocalDateTime.class, new JsonDeserializer<LocalDateTime>() {
                @Override
                public LocalDateTime deserialize(final JsonElement json, final Type type,
                    final JsonDeserializationContext jsonDeserializationContext)
                    throws JsonParseException {
                return LocalDateTime.parse(json.getAsJsonPrimitive().getAsString(), DateTimeFormatter.ISO_LOCAL_DATE_TIME);
                }

                public JsonElement serialize(final LocalDateTime date, final Type typeOfSrc,
                    final JsonSerializationContext context) {
                return new JsonPrimitive(date.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME)); 
                }
            }).create();
        
        
        //Prepare Token & qwandaServiceUrl
        String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
        String tokenString = (String)$map.get("token");   
        
        // retrieve jsonObj's values sent on data.value
        String data = $m.getData().getValue();
        if(data != null) {

            JsonObject dataJson = new JsonObject(data);
            String hint = dataJson.getString("hint");
            String offerCode = dataJson.getString("itemCode"); // BEG_X ....
            String userCode = $user.getuCode();
            String linkCode= "LNK_BEG";
            String linkValue= "OFFER";
            String begCode= null;

            // base entity code is the job quote will be quoting on
            if(offerCode != null) {
                // Grab BEG code
                
                //get OFFER BE's parent BEG code
                JsonArray offerArray = new JsonArray(QwandaUtils.apiGet(qwandaServiceUrl + "/qwanda/entityentitys/" + offerCode + "/linkcodes/" + linkCode + "/parents", tokenString));
                System.out.println("------------------------------------------------------------------------");
                System.out.println("OFFER BE   ::   "+ offerArray.toString());	
                System.out.println("------------------------------------------------------------------------");	

                for(Object obj : offerArray) {
                    JsonObject offerObj = JsonObject.mapFrom(obj);
                    begCode= offerObj.getString("sourceCode");  
                    System.out.println("BEG CODE   ::   "+ begCode);	                  
                }

                String code= "code:" + begCode ;
                String recipient = "recipient:OWNER";
                String[] msgMessageData = {code, recipient};

                //Sending message to BEG OWNER
                String templateCode = "MSG_CH40_ACCEPT_OFFER";
                String[] attachments = {};           
                QBaseMSGMessageType method = QBaseMSGMessageType.SMS;

                System.out.println("------------------------------------------------------------------------");
                System.out.println("msgMessageData Array   ::   " + msgMessageData.toString());
                
                //Creating messageData MSG_MESSAGE
                QMSGMessage msgMessage = new QMSGMessage("MSG_MESSAGE", templateCode, msgMessageData, method, attachments);
                JsonObject jsonMessage = new JsonObject().mapFrom(msgMessage);

                System.out.println("------------------------------------------------------------------------");
                System.out.println("MESSAGE TO OWNER   ::   " + jsonMessage.toString());
                System.out.println("------------------------------------------------------------------------");
                
                jsonMessage.put("token",tokenString);
                bus.publish("messages", jsonMessage);
            }
        }

        //sending cmd FORM_VIEW
        QCmdMessage cmdBucketView = new QCmdMessage("CMD_VIEW","BUCKET_VIEW");
        JsonObject bucketViewJson = new JsonObject().mapFrom(cmdBucketView);
        bucketViewJson.put("root", "GRP_DRIVER_VIEW");
        
        System.out.println("------------------------------------------------------------------------");
        System.out.println("BUCKETVIEW DATA   ::   " + bucketViewJson.toString());
        System.out.println("------------------------------------------------------------------------");
        
        bucketViewJson.put("token", tokenString);
        bus.publish("cmds", bucketViewJson);

        System.out.println( "\n" + LOG_RED + "RULE TERMINATED    ::   Accept Offer" + LOG_RESET);
        System.out.println(LOG_YELLOW + "------------------------------------------------------------------------------------------------------------------------------------------------" + LOG_RESET);
end

rule "Make Offer"

    when
        $m : QEventMessage( event_type == "BTN_CLICK" && data.code == "BTN_MAKE_OFFER")
        bus: EventBus()
        $user: User(realm != null )
        $map : Map($value: this["token"] != null)
        $map1 : Map($value1: this["realm"] != null)
    then

        System.out.println(LOG_YELLOW + "================================================================================================================================================" + LOG_RESET);
        System.out.println(LOG_GREEN + "RULE EXECUTED      ::   Make Offer" + LOG_RESET);

         // Prepare GSON Deserialization
        Gson gson = new GsonBuilder()
            .registerTypeAdapter(LocalDateTime.class, new JsonDeserializer<LocalDateTime>() {
                @Override
                public LocalDateTime deserialize(final JsonElement json, final Type type,
                    final JsonDeserializationContext jsonDeserializationContext)
                    throws JsonParseException {
                return LocalDateTime.parse(json.getAsJsonPrimitive().getAsString(), DateTimeFormatter.ISO_LOCAL_DATE_TIME);
                }

                public JsonElement serialize(final LocalDateTime date, final Type typeOfSrc,
                    final JsonSerializationContext context) {
                return new JsonPrimitive(date.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME)); 
                }
            }).create();
        
        
        //Prepare Token & qwandaServiceUrl
        String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
        String tokenString = (String)$map.get("token");   
        
        // retrieve jsonObj's values sent on data.value
        String data = $m.getData().getValue();
        if(data != null) {

            JsonObject dataJson = new JsonObject(data);
            String hint = dataJson.getString("hint");
            String baseEntityCode = dataJson.getString("itemCode"); // BEG_X ....
            String userCode = $user.getuCode();
            String linkCode= "LNK_BEG";

            // base entity code is the job quote will be quoting on
            if(baseEntityCode != null) {
                // Create Offer BE
                BaseEntity offer = QwandaUtils.createBaseEntityByCode(QwandaUtils.getUniqueId( userCode, null, "OFR", tokenString ), "Offer", qwandaServiceUrl, tokenString);
                System.out.println("------------------------------------------------------------------------\n");
                System.out.println("OFFER BASE ENTITY   ::   "+offer.toString());  
                System.out.println("------------------------------------------------------------------------");

                String offerCode= offer.getCode();
                System.out.println("OFFER CODE   ::   "+offerCode);
                 
                // Check if a link exists between BEG & OFFER
                Boolean linkExists = QwandaUtils.checkIfLinkExistsForTarget(baseEntityCode, linkCode, offerCode, tokenString );
                System.out.println("LINK EXISTS ?  ::    "+ linkExists);

                // Creating a link between BEG & OFFER
                if(!linkExists){
                    System.out.println("\nCREATING LINK BETWEEN          ::   " + baseEntityCode + "  &  " + offerCode);
                    String output = QwandaUtils.apiPostEntity(qwandaServiceUrl + "/qwanda/entityentitys", gson.toJson( new Link( baseEntityCode, offerCode, linkCode, "OFFER" )),tokenString);
                }
                
                if(offer != null) {
                    //get OFFER QUESTION GROUP
                    JsonObject offerGrp = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl + "/qwanda/baseentitys/" + $user.getuCode() + "/asks2/QUE_OFFER_DETAILS_GRP/" + offerCode, tokenString));
                    System.out.println("------------------------------------------------------------------------");
                    System.out.println("OFFER QUESTION GROUP   ::   "+ offerGrp.toString());	
                    System.out.println("------------------------------------------------------------------------");	
                    
                    // publish QUESTIONS
                    offerGrp.put("token", tokenString);					
                    bus.publish("cmds",  offerGrp);
                }
            }
        }

        //sending cmd FORM_VIEW
        QCmdMessage cmdFormView = new QCmdMessage("CMD_VIEW","FORM_VIEW");
        JsonObject formViewJson = new JsonObject().mapFrom(cmdFormView);
        formViewJson.put("root", "QUE_OFFER_DETAILS_GRP");
        
        System.out.println("------------------------------------------------------------------------");
        System.out.println("FORM VIEW   ::   " + formViewJson.toString());
        System.out.println("------------------------------------------------------------------------");
        
        formViewJson.put("token", tokenString);
        bus.publish("cmds", formViewJson);

        System.out.println( "\n" + LOG_RED + "RULE TERMINATED    ::   Make Offer" + LOG_RESET);
        System.out.println(LOG_YELLOW + "------------------------------------------------------------------------------------------------------------------------------------------------" + LOG_RESET);
end

rule "Counter Offer"

    when
        $m : QEventMessage( event_type == "BTN_CLICK" && data.code == "BTN_COUNTER_OFFER")
        bus: EventBus()
        $user: User(realm != null )
        $map : Map($value: this["token"] != null)
        $map1 : Map($value1: this["realm"] != null)
    then

        System.out.println(LOG_YELLOW + "================================================================================================================================================" + LOG_RESET);
        System.out.println(LOG_GREEN + "RULE EXECUTED      ::   Counter Offer" + LOG_RESET);

        //Prepare Token & qwandaServiceUrl
        String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
        String tokenString = (String)$map.get("token");   
        
        // retrieve jsonObj's values sent on data.value
        String data = $m.getData().getValue();
        if(data != null) {

            JsonObject dataJson = new JsonObject(data);
            String offerCode = dataJson.getString("itemCode"); // OFR_X ....
            String hint = dataJson.getString("hint");
            
            System.out.println("OFFER CODE   ::   "+offerCode);
            System.out.println("HINT         ::   "+hint);
            
            //get OFFER QUESTION GROUP
            JsonObject offerGrp = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl + "/qwanda/baseentitys/" + $user.getuCode() + "/asks2/QUE_OFFER_DETAILS_GRP/" + offerCode, tokenString));
            System.out.println("------------------------------------------------------------------------");
            System.out.println("OFFER QUESTION GROUP   ::   "+ offerGrp.toString());	
            System.out.println("------------------------------------------------------------------------");	
            
            // publish QUESTIONS
            offerGrp.put("token", tokenString);					
            bus.publish("cmds",  offerGrp);              
            
        }
        System.out.println( "\n" + LOG_RED + "RULE TERMINATED    ::   Counter Offer" + LOG_RESET);
        System.out.println(LOG_YELLOW + "------------------------------------------------------------------------------------------------------------------------------------------------" + LOG_RESET);
end
   
rule "Submit Offer"
    when
       $m : QEventMessage( event_type == "FORM_SUBMIT" && data.code == "QUE_OFFER_DETAILS_GRP" ) 
       bus:EventBus()
       $user: User(realm != null)
       $map : Map($value: this["token"] != null)
    then
        System.out.println(LOG_YELLOW + "================================================================================================================================================" + LOG_RESET);
        System.out.println(LOG_GREEN + "RULE EXECUTED      ::   Submit Offer" + LOG_RESET);
       
        // Prepare GSON Deserialization
        Gson gson = new GsonBuilder()
            .registerTypeAdapter(LocalDateTime.class, new JsonDeserializer<LocalDateTime>() {
                @Override
                public LocalDateTime deserialize(final JsonElement json, final Type type,
                    final JsonDeserializationContext jsonDeserializationContext)
                    throws JsonParseException {
                return LocalDateTime.parse(json.getAsJsonPrimitive().getAsString(), DateTimeFormatter.ISO_LOCAL_DATE_TIME);
                }

                public JsonElement serialize(final LocalDateTime date, final Type typeOfSrc,
                    final JsonSerializationContext context) {
                return new JsonPrimitive(date.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME)); 
                }
            }).create();

       //Prepare Token & qwandaServiceUrl
        String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
        String tokenString = (String)$map.get("token");   

        System.out.println("\nToken   ::   " + StringUtils.abbreviateMiddle(tokenString,"...",40));
        System.out.println("------------------------------------------------------------------------");
        
        String userCode = $user.getuCode();
        String offerCode = $m.getData().getValue();
        String baseEntityCode = "BEG_XXXX";
        String linkCode= "LNK_BEG";

        System.out.println("OFFER CODE     ::    "+ offerCode);
        System.out.println("USER CODE      ::    "+ userCode);

        // Check if a link exists between USER & OFFER
        Boolean linkUserOffer = QwandaUtils.checkIfLinkExistsForTarget(userCode,  linkCode, offerCode, tokenString );
        System.out.println("LINK EXISTS ?  ::    "+ linkUserOffer);
        // Creating a link between USER & OFFER
        if(!linkUserOffer){
            String linkValue= "OFFER";
            System.out.println("\nCREATING LINK BETWEEN          ::   " + userCode + "  &  " + offerCode);
            String output = QwandaUtils.apiPostEntity(qwandaServiceUrl + "/qwanda/entityentitys", gson.toJson(new Link(userCode,offerCode, linkCode, linkValue)),tokenString);
        }

         // Check if a link exists between BEG & USER
        Boolean linkBegUser = QwandaUtils.checkIfLinkExistsForTarget(baseEntityCode,  linkCode, userCode, tokenString );
        System.out.println("LINK EXISTS ?  ::    "+ linkBegUser);
        // Creating a link between BEG & USER
        if(!linkBegUser){
            String linkValue= "DRIVER";
            System.out.println("\nCREATING LINK BETWEEN          ::   " + baseEntityCode + "  &  " + userCode);
            String output = QwandaUtils.apiPostEntity(qwandaServiceUrl + "/qwanda/entityentitys", gson.toJson(new Link(baseEntityCode,userCode, linkCode, linkValue)),tokenString);
        }
        
        System.out.println( "\n" + LOG_RED + "RULE TERMINATED    ::   Submit Offer" + LOG_RESET);
        System.out.println(LOG_YELLOW + "------------------------------------------------------------------------------------------------------------------------------------------------" + LOG_RESET);
end

rule "Show Offer Details"
	when
		$m : QEventMessage( event_type == "BTN_CLICK" && data.code == "BTN_SHOW_OFFER")
        bus: EventBus()
        $user: User(realm != null )
        $map : Map($value: this["token"] != null)
        $map1 : Map($value1: this["realm"] != null)
	then
		System.out.println(LOG_YELLOW + "================================================================================================================================================" + LOG_RESET);
        System.out.println(LOG_GREEN + "RULE EXECUTED      ::   Show Offer Details" + LOG_RESET);
       
        //Prepare Token & qwandaServiceUrl
        String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
        String tokenString = (String)$map.get("token");   

	    String data = $m.getData().getValue();
		if(data != null) {
	
			JsonObject dataJson = new JsonObject(data);	
			String hint = dataJson.getString("hint"); //BEG_XXX
			String baseEntityCode = dataJson.getString("itemCode"); // OFR_XXX ....

			if(baseEntityCode != null) {
			
				// we send the BE
				JsonObject be = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/" + baseEntityCode, tokenString));
				JsonArray array = new JsonArray();
				array.add(be);
				
		        JsonObject cmdBe = new JsonObject();
		        cmdBe.put("token", $value);
		        cmdBe.put("msg_type", "DATA_MSG");
		        cmdBe.put("data_type", "BaseEntity");
		        cmdBe.put("items", array);
		        bus.publish("cmds", cmdBe); 
				
				// we grab the layout and send it to FE
				JsonObject sublayout = new JsonObject(QwandaUtils.apiGet("https://raw.githubusercontent.com/genny-project/layouts/master/accept_offer.json", null));
			    	QCmdMessage messageSublayout = new QCmdMessage("CMD_SUBLAYOUT","accept-offer");
			    JsonObject cmdSubLayout = new JsonObject().mapFrom(messageSublayout);
			    cmdSubLayout.put("items", sublayout);
			    cmdSubLayout.put("root", baseEntityCode);
			    cmdSubLayout.put("token", $value);
			    //Publish it to the EventBus
			    bus.publish("cmds", cmdSubLayout);
			}	
		}

        System.out.println( "\n" + LOG_RED + "RULE TERMINATED    ::   Show Offer Details" + LOG_RESET);
        System.out.println(LOG_YELLOW + "------------------------------------------------------------------------------------------------------------------------------------------------" + LOG_RESET);
	
end
