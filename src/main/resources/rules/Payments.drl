package com.sample

import life.genny.qwanda.message.QEventMessage;
import io.vertx.rxjava.core.eventbus.EventBus;
//import com.google.gson.Gson;
//import org.json.JSONObject;

import life.genny.qwandautils.PaymentUtils;
import life.genny.qwandautils.KeycloakUtils;
import life.genny.qwandautils.QwandaUtils;

global java.lang.String LOG_RESET;
global java.lang.String LOG_RED;
global java.lang.String LOG_GREEN;
global java.lang.String LOG_YELLOW;
global java.lang.String LOG_BLUE;
global java.lang.String LOG_PURPLE;
global java.lang.String LOG_CYAN;
global java.lang.String LOG_WHITE;
global java.lang.String LOG_BOLD;

rule "Payments"
 when
     m : QEventMessage( QEventMessage.getData().getCode().equals("PAYMENTS") )
     bus: EventBus()
     $map : Map($value: this["token"] != null) 
   then
     System.out.println(LOG_YELLOW + "================================================================================================================================================" + LOG_RESET);
     System.out.println(LOG_GREEN + "RULE EXECUTED      ::   Payments Rule  " + LOG_RESET);
    
     //Prepare Token & qwandaServiceUrl
     String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
     String paymentServiceUrl = System.getenv("PAYMENT_SERVICE_API_URL");
     String paymentProvider = System.getenv("PAYMENT_PROVIDER");
     
     String tokenString = (String)$map.get("token"); 
     System.out.println("token ::"+tokenString);
     
     org.json.JSONObject decodedToken = KeycloakUtils.getDecodedToken(tokenString);
     System.out.println("decoded token ::"+decodedToken);
     
     String username = decodedToken.getString("preferred_username");
	 String uname = QwandaUtils.getNormalisedUsername(username);
	 String code = "PER_" + uname.toUpperCase();
     
     String id = PaymentUtils.base64Encoder(code);
     String authString = PaymentUtils.createAuthKey("test","YzQ2MzY4NTQ3ZThiNDc5ZTg4MTg3OTQ0NWFmYTUxOTI=","UdZ5fx63LyJUBpfKw0EEkHXF7FD60FxO");
     
     org.json.simple.JSONObject userobj = new org.json.simple.JSONObject();
     org.json.simple.JSONObject personalInfoObj = new org.json.simple.JSONObject();
     org.json.simple.JSONObject contactInfoObj = new org.json.simple.JSONObject();
     org.json.simple.JSONObject locationObj = new org.json.simple.JSONObject();
     
     personalInfoObj.put("firstName","abc");
     personalInfoObj.put("lastName","def");
     personalInfoObj.put("dob","27/12/1970");
     personalInfoObj.put("governmentNumber","123456789");
      
     contactInfoObj.put("email","abcdef@gmail.com");
     contactInfoObj.put("mobile","61444333222");
     
     locationObj.put("addressLine1","street");
     locationObj.put("addressLine2","beena");
     locationObj.put("city","Melbourne");
     locationObj.put("state","Victoria");
     locationObj.put("country","AUS");
     locationObj.put("postcode","1212");
     
     userobj.put("personalInfo",personalInfoObj);
     userobj.put("contactInfo",contactInfoObj);
     userobj.put("location",locationObj);
     userobj.put("id",id);
     
     System.out.println("userobj ::"+userobj);
     
     Gson gson = new Gson();
     String objString = gson.toJson(userobj);
     
     System.out.println("user object string ::"+objString);
     
     //Create user
     String paymentsResponse = PaymentUtils.apiPostPaymentEntity(paymentServiceUrl+"/" + paymentProvider + "/users", objString, authString);
     System.out.println("create users - payments response ::"+paymentsResponse);
     
     //Get all users from Assembly
     String paymentsResponse1 = PaymentUtils.apiGetPaymentResponse(paymentServiceUrl+"/" + paymentProvider + "/users", authString);
     System.out.println("get all user - payments response ::"+paymentsResponse1);
     
     
     
   	 System.out.println("\n \u001B[31m RULE TERMINATED    ::   Payments \u001B[0m ");
     System.out.println( "\u001B[33m ------------------------------------------------------------------------------------------------------------------------------------------------  \u001B[0m");
    
     
     
end     

