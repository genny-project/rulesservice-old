package com.sample;

import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.entity.User;
import io.vertx.rxjava.core.eventbus.EventBus;
import life.genny.qwanda.Answer;
import life.genny.qwanda.message.QDataAnswerMessage;

import life.genny.qwandautils.PaymentUtils;
import life.genny.qwandautils.KeycloakUtils;
import life.genny.qwandautils.QwandaUtils;

import java.util.Map;


rule "New assembly user creation on profile submit"
 when
     /* $m : QEventMessage( event_type == "FORM_SUBMIT" && data.code == "QUE_NEW_USER_PROFILE_GRP" ) */
     $user: User(realm != "memberhub" && (isAvailable == true && isProfileCompleted == true && ($user.getIsAssemblyUserProfileExists() == null || $user.getIsAssemblyUserProfileExists() == false)) )
     $map : Map($value: this["token"] != null)
   then
    
     System.out.println(QwandaUtils.executeRuleLogger("Payments Rule"));
     
     String tokenString = (String)$map.get("token"); 
     
     /* get assembly authKey   */
     String assemblyAuthToken = PaymentUtils.getAssemblyAuthKey();
     
     /*  Creates assembly userId */
     String assemblyId = PaymentUtils.getAssemblyId(tokenString);
          
     /* Check If user already exists in Assembly    */  
      Boolean isAssemblyUserExists = PaymentUtils.checkIfAssemblyUserExists(assemblyId, assemblyAuthToken);
     System.out.println("is assembly user exists ::"+isAssemblyUserExists);
     
     if (isAssemblyUserExists == false) {
     	modify($user){
     		setIsAssemblyUserProfileExists(false);
     	}
     } 
     System.out.println("Value set in User isAssemblyUserProfileExists::"+$user.getIsAssemblyUserProfileExists());
     
     if(!isAssemblyUserExists) {
     	/* logic to create assembly user & set the payments userProfileExists flag  */
     	PaymentUtils.createAssemblyUser(assemblyId, assemblyAuthToken, tokenString); 
     	Boolean isUserExists = PaymentUtils.checkIfAssemblyUserExists(assemblyId, assemblyAuthToken);
     	System.out.println("isAssemblyUserExists::"+isUserExists);
     	
     	if(isUserExists == true) {
     		modify($user) {
     			setIsAssemblyUserProfileExists(true);
     		}
     	}
     	
      }

	 if(isAssemblyUserExists) {
		modify($user) {
     			setIsAssemblyUserProfileExists(true);
     		}
	 }
     
     System.out.println("is assembly user exists, after setting to true ::"+$user.getIsAssemblyUserProfileExists());
     /* System.out.println("is assembly user exists, after setting to true ::"+isAssemblyUserProfileExists); */
   
   	System.out.println(QwandaUtils.terminateRuleLogger("Payment rule"));
end


 rule "Assembly user updation for attribute change"
    when
    	m : QDataAnswerMessage( QDataAnswerMessage.getData_type().equals(Answer.class.getSimpleName()) )
    	$user: User(realm != "memberhub" && (isAvailable == true && isProfileCompleted == true && getIsAssemblyUserProfileExists() == true) )
        $map : Map($value: this["token"] != null)
    then    

		System.out.println(QwandaUtils.executeRuleLogger("Payments User Update Rule"));
        
        /* Prepare Token & qwandaServiceUrl */
        String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
        String tokenString = (String)$map.get("token");   
        
        /* get assembly authKey   */
    	 String assemblyAuthToken = PaymentUtils.getAssemblyAuthKey();
     
    	 /*  Creates assembly userId */
    	 String assemblyId = PaymentUtils.getAssemblyId(tokenString);

        System.out.println("------------------------------------------------------------------------");

        /* extract answers */
        Answer[] answers = m.getItems();
        for (Answer answer : answers) {
        
            Long askId = answer.getAskId();
            String sourceCode = answer.getSourceCode();
            String targetCode = answer.getTargetCode();
            answer.setSourceCode(answer.getTargetCode());
            String attributeCode = answer.getAttributeCode();
            String value = answer.getValue();

            System.out.println("Printing Answer data recieved   ::");  
            System.out.println("\nAskId: " +askId + "\nSource Code: " +sourceCode + "\nTarget Code: " +targetCode + "\nAttribute Code: " +attributeCode + "\nAttribute Value: " +value);
           
        	String response = PaymentUtils.updateUserPersonalInfo(assemblyId, attributeCode, value, assemblyAuthToken);
        	System.out.println("updated payments response ::"+response);
         } 
        
        System.out.println(QwandaUtils.terminateRuleLogger("Payment update rule"));
end     



