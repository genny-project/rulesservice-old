package com.sample
import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QMessage.MessageData;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import io.vertx.rxjava.core.eventbus.EventBus;
import io.vertx.core.buffer.Buffer;
import com.google.gson.Gson;
import life.genny.qwanda.Answer;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwandautils.KeycloakUtils;
import life.genny.qwandautils.QwandaUtils;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.Ask;

import java.lang.reflect.Type;
import java.util.Map;
import java.util.Set;
import java.time.LocalDateTime;
import java.time.ZonedDateTime;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializationContext;
import com.google.gson.FieldNamingPolicy;
import io.vertx.core.json.JsonObject;
import io.vertx.core.json.JsonArray;
import java.time.format.DateTimeFormatter;
import life.genny.qwanda.DateTimeDeserializer;

global java.lang.String REACT_APP_QWANDA_API_URL;
global java.lang.String REACT_APP_VERTX_URL;
global java.lang.String KEYCLOAKIP;

declare User1
    uname : String
    name : String
    realm : String
    roles :  String
end
    

rule "Init"

    when
        m : QEventMessage( QEventMessage.getData().getCode().equals("AUTH_INIT") )
        bus: EventBus()
        $map : Map($value: this["token"] != null)
        $map1 : Map($value1: this["realm"] != null)
        $roles : Set(!isEmpty())
        not User1() 
    then
        System.out.println("$$$$ Alyson AUTH_INIT RULE : "+$map1.get("realm") +" Project  $$$$");
        //creating user fact
        User1 newUser = new User1();
        newUser.setUname($map1.get("preferred_username").toString());
        newUser.setName($map1.get("name").toString());
        newUser.setRealm($map1.get("realm").toString());
        newUser.setRoles($map1.get("realm_access").toString());
        System.out.println("Name   : " +newUser.getName());
        System.out.println("Role   : " +$roles.toString());
        insert(newUser);
        
		String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL")==null?System.getenv("REACT_APP_QWANDA_API_URL"):REACT_APP_QWANDA_API_URL;
       //Get and print the token
        String tokenString = (String)$map.get("token");
        System.out.println("tokenstr="+StringUtils.abbreviateMiddle(tokenString, "...", 40));
      
        //Getting the User BE and sending it as ALIAS
        //Get User BE for USER ALIAS based on the user's username
        JsonObject userObj = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_PEOPLE/linkcodes/LNK_CORE/attributes?PRI_USERNAME="+newUser.getUname(), tokenString));
          userObj.put("aliasCode", "USER");      
        //Publish USER BaseEntity ALIAS to EventBus
        bus.publish("cmds", userObj);
           
        //Getting the Project BE and sending it as ALIAS
        //Get Project BaseEntity for PROJECT ALIAS based on the user's keycloak realm name
        JsonObject prjObj = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_PROJECTS/linkcodes/LNK_CORE/attributes?PRI_REALM="+newUser.getRealm(), tokenString));
         prjObj.put("aliasCode", "PROJECT");     
        //Publish PRJ BaseEntity ALIAS to EventBus
        bus.publish("cmds", prjObj);
     
       //Calling the rule group to send cmd layout  
       drools.setFocus("layout"); 
       
     
       //Get BaseEntity for the TreeView  
//        JsonObject obj = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_ROOT/linkcodes/LNK_CORE", tokenString));
       //Print the json Object     
//        System.out.println("*******************");
//        System.out.println("Json="+obj.toString()); 
//        System.out.println("*******************");  
        //Publish it to the EventBus            
//        bus.publish("cmds", obj);
        
        //Get BaseEntity with attributes
        JsonObject objWithAttr = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_ROOT/linkcodes/LNK_CORE/attributes", tokenString));
        //Print the json Object     
        System.out.println("*******************");
        System.out.println("Json="+objWithAttr.toString()); 
        System.out.println("*******************");  
        //Publish it to the EventBus            
        bus.publish("cmds", objWithAttr);   
       		      
end

//Rules to Send layout based on the realm name
rule "Send Memberhub Layout"
   agenda-group "layout"
   when
     bus: EventBus()
     $user: User1(realm == "memberhub")
     $map : Map($value: this["token"] != null)
   then
      System.out.println("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
      System.out.println("@@@                                                               @@@");
      System.out.println("@@@                    MEMBERHUB LAYOUT                           @@@");
      System.out.println("@@@                                                               @@@");
      System.out.println("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
      // Get Token
      String tokenString = (String)$map.get("token");
      System.out.println("tokenstr="+StringUtils.abbreviateMiddle(tokenString, "...", 40));

      // Declare Qwanda URL
      String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL")==null?System.getenv("REACT_APP_QWANDA_API_URL"):REACT_APP_QWANDA_API_URL;
       //Get Memberhub Layout
      String layout = QwandaUtils.apiGet("https://raw.githubusercontent.com/genny-project/layouts/master/layouts/memberhub.json", null);

      QCmdMessage cmd = new QCmdMessage("CMD_LAYOUT","layout1");
      JsonObject layoutObj = new JsonObject().mapFrom(cmd);
      layoutObj.put("msg_type", "CMD_MSG");
      layoutObj.put("cmd_type", "CMD_LAYOUT");
      layoutObj.put("code", "layout1");
      layoutObj.put("data", new JsonObject(layout));

      System.out.println(" ##################### ");
      System.out.println("Layout Data ="+layoutObj.toString());
      System.out.println(" #################### ");

      bus.publish("cmds", layoutObj);

      JsonObject quesGrp = new JsonObject( QwandaUtils.apiGet("https://raw.githubusercontent.com/genny-project/layouts/master/memberhub-questions.json", null));
	//PRINT QUESTIONS
	System.out.println("------------------------------------------------------------------------\n");
	System.out.println("QUESTION GROUP   ::   "+quesGrp.toString());
	System.out.println("\n------------------------------------------------------------------------");

	bus.publish("cmds", quesGrp);

	//Getting all BaseEntity and their attributes
	JsonObject homeLoan = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl +"/qwanda/baseentitys/PER_USER1/linkcodes/LNK_SCORE/attributes", tokenString));
	System.out.println("------------------------------------------------------------------------\n");
	System.out.println("HOMELOAN & HOLIDAY BE   ::   "+homeLoan.toString());  
	System.out.println("------------------------------------------------------------------------\n");

	bus.publish("cmds", homeLoan);
        
end




rule "Send layout1"
     salience 10
     agenda-group "layout"
     when
       bus: EventBus()
       $user: User1(realm != "memberhub")
       $map : Map($value: this["token"] != null)
     then
        System.out.println("Sending Project Layout for project: "+$user.getRealm());
        
        // Get Token
        String tokenString = (String)$map.get("token");
        System.out.println("tokenstr="+StringUtils.abbreviateMiddle(tokenString, "...", 40));

        // Declare Qwanda URL
        String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL")==null?System.getenv("REACT_APP_QWANDA_API_URL"):REACT_APP_QWANDA_API_URL;
        //sending cmd layout1 
        QCmdMessage cmd = new QCmdMessage("CMD_LAYOUT","layout1");
        //Convert cmd to JSON Obj
        JsonObject obj1 = new JsonObject().mapFrom(cmd);
        obj1.put("msg_type", "CMD_MSG");
        obj1.put("cmd_type", "CMD_LAYOUT");
        obj1.put("code", "layout1");
        //Get Layout from the Github
        String layout = QwandaUtils.apiGet("https://raw.githubusercontent.com/genny-project/layouts/master/layouts/layout1.json", null);
        //put layout as data in the JsonObject
        obj1.put("data", new JsonObject(layout));
        System.out.println(" ##################### ");
        System.out.println("Layout Data ="+obj1.toString()); 
        System.out.println(" #################### ");
        //Publish it to the EventBus
        bus.publish("cmds", obj1);

         //Get Asks from Genny Config
    //   JsonObject asks = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/asksmsg", tokenString));   
        //Print Asks
     //   System.out.println("||||||||||||||||||||||||||||||||||||||||||||||||||||||||||");
     //   System.out.println("Google Asks="+asks.toString()); 
     //   System.out.println("||||||||||||||||||||||||||||||||||||||||||||||||||||||||||");
        //Publish Asks              
      //  bus.publish("cmds", asks);
end

rule "Send BucketView"
    salience -10
    agenda-group "layout"
    when
       bus:EventBus()
       $user: User1(realm != "memberhub")
       $map : Map($value: this["token"] != null)
    then
       System.out.println("Sending Bucket View for project: "+$user.getRealm()); 
       String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL")==null?System.getenv("REACT_APP_QWANDA_API_URL"):REACT_APP_QWANDA_API_URL;
       //Get and print the token
        String tokenString = (String)$map.get("token");
        System.out.println("tokenstr="+StringUtils.abbreviateMiddle(tokenString, "...", 40));
        //For the links and their weight
       JsonObject grpLinks = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_DASHBOARD/linkcodes/LNK_CORE/attributes", tokenString));
        //Getting B.E. to display in Bucket View
	    JsonObject headerGrps = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_DRIVER_VIEW/linkcodes/LNK_CORE/attributes", tokenString));	
        JsonObject noQuotesBEG = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_NO_QUOTES/linkcodes/LNK_CORE/attributes", tokenString));
        JsonObject quotesBEG = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_QUOTES/linkcodes/LNK_CORE/attributes", tokenString));
        JsonObject approvedBEG = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_APPROVED/linkcodes/LNK_CORE/attributes", tokenString));
        JsonObject inTransitBEG = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_IN_TRANSIT/linkcodes/LNK_CORE/attributes", tokenString));
        JsonObject completedBEG = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_COMPLETED/linkcodes/LNK_CORE/attributes", tokenString));
        JsonObject paidBEG = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_PAID/linkcodes/LNK_CORE/attributes", tokenString));  
        //Getting Load data for each BEG's
        JsonObject noQuotes = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/BEG_0000001/linkcodes/LNK_BEG/attributes", tokenString));
        JsonObject quotes1 = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/BEG_0000002/linkcodes/LNK_BEG/attributes", tokenString));
   		JsonObject quotes2 = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/BEG_0000003/linkcodes/LNK_BEG/attributes", tokenString)); 
   		JsonObject approved = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/BEG_0000004/linkcodes/LNK_BEG/attributes", tokenString));
   		JsonObject inTransit = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/BEG_0000005/linkcodes/LNK_BEG/attributes", tokenString)); 

        //Publish GRP_DASHBOARD
        bus.publish("cmds", grpLinks);	
	 	//Publish Header Grp
		bus.publish("cmds", headerGrps);	
		//Publish noQuotes BEG
		 bus.publish("cmds", noQuotesBEG);
		//Publish Quotes BEG
		 bus.publish("cmds", quotesBEG);
		 //Publish Approved BEG
		 bus.publish("cmds", approvedBEG);
		 //Publish In Transit BEG
		 bus.publish("cmds", inTransitBEG);
		 //Publish Completed BEG
		 bus.publish("cmds", completedBEG);
		 //Publish Paiod BEG
		 bus.publish("cmds", paidBEG);
		
		//Publish noQuotes load            
        bus.publish("cmds", noQuotes);
        //Publish Quotes load
        bus.publish("cmds", quotes1);
        //Publish Quotes load
        bus.publish("cmds", quotes2);
		//Publish approved loads  
        bus.publish("cmds", approved);
        //Publish In-Transit loads 
        bus.publish("cmds", inTransit);
        
        //sending cmd SUB_LAYOUT  
        //Get Sub-Layout from the Github
        String subLayout = QwandaUtils.apiGet("https://raw.githubusercontent.com/genny-project/layouts/master/card.json", null);    
       //Creating subLayout DATA_MSG
       JsonObject sublayoutJson = new JsonObject();
        sublayoutJson.put("msg_type", "DATA_MSG");
        sublayoutJson.put("data_type", "SUB_LAYOUT");
        sublayoutJson.put("code", "cardLayout");
        sublayoutJson.put("items", new JsonObject(subLayout));        
        System.out.println(" ----------------------------------- ");
        System.out.println("SubLayout Data ="+sublayoutJson.toString()); 
        System.out.println(" ----------------------------------- ");
        //Publish DATA_MSG to the EventBus
        bus.publish("cmds", sublayoutJson); 

        //sending cmd BUCKET_VIEW
        QCmdMessage cmdBucketView = new QCmdMessage("CMD_VIEW","BUCKET_VIEW");
        //Convert cmd to JSON Obj
        JsonObject bucketViewJson = new JsonObject().mapFrom(cmdBucketView);
        bucketViewJson.put("root", "GRP_DRIVER_VIEW");
        System.out.println(" ##################### ");
        System.out.println("Layout Data ="+bucketViewJson.toString()); 
        System.out.println(" #################### ");
        //Publish it to the EventBus
        bus.publish("cmds", bucketViewJson); 
end

