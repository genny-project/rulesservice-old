package com.sample

import org.apache.commons.lang3.StringUtils;

import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QMessage.MessageData;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import io.vertx.rxjava.core.eventbus.EventBus;
import io.vertx.core.buffer.Buffer;
import com.google.gson.Gson;
import life.genny.qwanda.Answer;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwandautils.KeycloakUtils;
import life.genny.qwandautils.QwandaUtils;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.Ask;
import life.genny.qwanda.entity.BaseEntity;

import java.lang.reflect.Type;
import java.util.Map;
import java.util.Set;
import java.time.LocalDateTime;
import java.time.ZonedDateTime;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializationContext;
import com.google.gson.FieldNamingPolicy;
import io.vertx.core.json.JsonObject;
import io.vertx.core.json.JsonArray;
import java.time.format.DateTimeFormatter;
import life.genny.qwanda.DateTimeDeserializer;

// global java.lang.String REACT_APP_QWANDA_API_URL;
// global java.lang.String REACT_APP_VERTX_URL;
// global java.lang.String KEYCLOAKIP;

// global variables for color logs
global java.lang.String LOG_RESET;
global java.lang.String LOG_RED;
global java.lang.String LOG_GREEN;
global java.lang.String LOG_YELLOW;
global java.lang.String LOG_BLUE;
global java.lang.String LOG_PURPLE;
global java.lang.String LOG_CYAN;
global java.lang.String LOG_WHITE;
global java.lang.String LOG_BOLD;

declare User1
    uname : String
    name : String
    realm : String
    roles :  String
    available : Boolean
end
    

rule "Init"

    when
        m : QEventMessage( QEventMessage.getData().getCode().equals("AUTH_INIT") )
        bus: EventBus()
        $map : Map($value: this["token"] != null)
        $map1 : Map($value1: this["realm"] != null)
        $roles : Set(!isEmpty())
        not User1() 
    then
        System.out.println("\n\n");
        System.out.println(LOG_YELLOW + "================================================================================================================================================" + LOG_RESET);
        System.out.println(LOG_GREEN + "RULE EXECUTED      ::   Init" + LOG_RESET);
        
        //Prepare Token & qwandaServiceUrl
        String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
        String tokenString = (String)$map.get("token");   

        System.out.println("\nToken          ::   " + StringUtils.abbreviateMiddle(tokenString,"...",40));
        System.out.println("Project Name   ::   " + $map1.get("realm") );       
        System.out.println("keycloak ID    ::   " +$map1.get("sub"));
		
        //Create user fact
        User1 newUser = new User1();
        newUser.setUname($map1.get("preferred_username").toString());
        newUser.setName($map1.get("name").toString());
        newUser.setRealm($map1.get("realm").toString());
        newUser.setRoles($map1.get("realm_access").toString());
        System.out.println("value from qwandautils  ::   "+QwandaUtils.checkUserTokenExists(qwandaServiceUrl,tokenString).toString());
        newUser.setAvailable(QwandaUtils.checkUserTokenExists(qwandaServiceUrl,tokenString));
        //newUser.setAvailable(false);
        System.out.println("User Name      ::    " +newUser.getName());
        System.out.println("User Role      ::    " +$roles.toString());
        insert(newUser);
        
        
        System.out.println("------------------------------------------------------------------------");
      
        //Getting the User BE and sending it as ALIAS
        //Get User BE for USER ALIAS based on the user's username
       // JsonObject userObj = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_PEOPLE/linkcodes/LNK_CORE/attributes?PRI_USERNAME="+newUser.getUname(), tokenString));
        //userObj.put("aliasCode", "USER"); 
       // userObj.put("token", $value);      
       // bus.publish("cmds", userObj);
           
        //Getting the Project BE and sending it as ALIAS
        //Get Project BaseEntity for PROJECT ALIAS based on the user's keycloak realm name
       // JsonObject prjObj = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_PROJECTS/linkcodes/LNK_CORE/attributes?PRI_REALM="+newUser.getRealm(), tokenString));
      //  prjObj.put("aliasCode", "PROJECT");   
      //  prjObj.put("token", $value);    
      //  bus.publish("cmds", prjObj);
     
        //Calling the rule group : layout
        drools.setFocus("layout"); 
        
        //Get BaseEntity with attributes
        JsonObject objWithAttr = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_ROOT/linkcodes/LNK_CORE/attributes", tokenString));
        //Print the json Object  
        objWithAttr.put("token", $value);     
        System.out.println("------------------------------------------------------------------------");
        System.out.println("BE with ATTRIBUTE   ::   "+objWithAttr.toString()); 
        System.out.println("------------------------------------------------------------------------");            
        bus.publish("cmds", objWithAttr);   
       		      
end


rule "Create new User"
   when
      bus: EventBus()
      $user: User1(available == false)
      $map : Map($value: this["token"] != null)
      $map1 : Map($value1: this["realm"] != null)
   then
      System.out.println(LOG_YELLOW + "================================================================================================================================================" + LOG_RESET);
      System.out.println(LOG_GREEN + "RULE EXECUTED      ::   Create New User" + LOG_RESET);
      System.out.println("User Already Exists? true/false   ::   "+$user.getAvailable());
      //Prepare Token & qwandaServiceUrl
      String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
      String tokenString = (String)$map.get("token");      
      //Creating new user based ion keycloak info
      BaseEntity person = QwandaUtils.createUser(qwandaServiceUrl, tokenString, $map1.get("preferred_username").toString(), $map1.get("given_name").toString(), $map1.get("family_name").toString(), $map1.get("email").toString() );      
      //Update the available fact value
      $user.setAvailable(QwandaUtils.checkUserTokenExists(qwandaServiceUrl,tokenString)); 
      //Calling the rule group : UserRegistration
      drools.setFocus("UserRegistration");
           
      System.out.println( "\n" + LOG_RED + "RULE TERMINATED    ::  Create New User" + LOG_RESET);
      System.out.println(LOG_YELLOW + "------------------------------------------------------------------------------------------------------------------------------------------------" + LOG_RESET);
end 

rule "Send ALIAS first login"
   salience 20
   agenda-group "UserRegistration"
    when
       bus: EventBus()
       $user: User1(realm != null )
       $map : Map($value: this["token"] != null)
     then
        System.out.println(LOG_YELLOW + "================================================================================================================================================" + LOG_RESET);
        System.out.println(LOG_GREEN + "RULE EXECUTED      ::   Send ALIAS" + LOG_RESET);
        //Prepare Token & qwandaServiceUrl
        String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
        String tokenString = (String)$map.get("token");  
        //Getting the User BE and sending it as ALIAS
        //Get User BE for USER ALIAS based on the user's username
        JsonObject userObj = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_PEOPLE/linkcodes/LNK_CORE/attributes?PRI_USERNAME="+ $user.getUname(), tokenString));
        userObj.put("aliasCode", "USER"); 
        userObj.put("token", $value);      
        bus.publish("cmds", userObj);
        
        //Getting the Project BE and sending it as ALIAS
        //Get Project BaseEntity for PROJECT ALIAS based on the user's keycloak realm name
        JsonObject prjObj = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_PROJECTS/linkcodes/LNK_CORE/attributes?PRI_REALM="+$user.getRealm(), tokenString));
        prjObj.put("aliasCode", "PROJECT");   
        prjObj.put("token", $value);    
        bus.publish("cmds", prjObj);
        
        System.out.println( "\n" + LOG_RED + "RULE TERMINATED    ::   Send ALIAS" + LOG_RESET);
        System.out.println(LOG_YELLOW + "------------------------------------------------------------------------------------------------------------------------------------------------" + LOG_RESET);
end


rule "Send initial-profile-update layout"
    salience 19
    agenda-group "UserRegistration"
    when
      bus: EventBus()
      $user: User1(available == false)
      $map : Map($value: this["token"] != null)
      //$map1 : Map($value1: this["realm"] != null)
     then
       System.out.println(LOG_YELLOW + "================================================================================================================================================" + LOG_RESET);
       System.out.println(LOG_GREEN + "RULE EXECUTED      ::   Send Initial Profile Update Layout" + LOG_RESET);
        //Prepare Token & qwandaServiceUrl
        String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
        String tokenString = (String)$map.get("token"); 
       //Sending USER Profile Asks
      JsonObject obj = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/PER_"+$user.getUname()+"/asks2/QUE_NEW_USER_PROFILE_GRP/PER_"+$user.getUname(), tokenString));
      System.out.println("*******************");
      System.out.println("Json="+obj.toString());	
      System.out.println("*******************");	
	  obj.put("token", $value);					
	  bus.publish("cmds", obj);
           
      //Get initial-profile-update sub layout
      String layout = QwandaUtils.apiGet("https://raw.githubusercontent.com/genny-project/layouts/master/layouts/initial-profile-update", null);
      QCmdMessage cmdLayout = new QCmdMessage("CMD_LAYOUT","profile-update");
      JsonObject layoutObj = new JsonObject().mapFrom(cmdLayout);
      layoutObj.put("data", new JsonObject(layout));
      layoutObj.put("token", $value);
      System.out.println("------------------------------------------------------------------------\n");
      System.out.println("PROFILE UPDATE LAYOUT   ::   "+layoutObj.toString());
      System.out.println("------------------------------------------------------------------------");
      bus.publish("cmds", layoutObj);
      
      //sending cmd form view 
      String subLayout = QwandaUtils.apiGet("https://raw.githubusercontent.com/genny-project/layouts/master/welcome-new-user", null);
      QCmdMessage cmdSublayout = new QCmdMessage("CMD_SUBLAYOUT","welcomeNewUser");
      //Convert cmd to JSON Obj
      JsonObject cmdSubLayout = new JsonObject().mapFrom(cmdSublayout);
      cmdSubLayout.put("items", new JsonObject(subLayout));
      //cmdObj.put("root", "QUE_USER_PROFILE_GRP");
      //cmdObj.put("data", "itemsPerPage:8");        
      System.out.println(" ##################### ");
      System.out.println("Sub-layout  = "+cmdSubLayout.toString()); 
      System.out.println(" #################### ");
      cmdSubLayout.put("token", $value);
      //Publish it to the EventBus
      bus.publish("cmds", cmdSubLayout);
       
       
       System.out.println( "\n" + LOG_RED + "RULE TERMINATED    ::   Send Initial Profile Update Layout" + LOG_RESET);
       System.out.println(LOG_YELLOW + "------------------------------------------------------------------------------------------------------------------------------------------------" + LOG_RESET);
       
end


rule "Send ALIAS"
   salience 20
   agenda-group "layout"
    when
       bus: EventBus()
       $user: User1(realm != null )
       $map : Map($value: this["token"] != null)
     then
        System.out.println(LOG_YELLOW + "================================================================================================================================================" + LOG_RESET);
        System.out.println(LOG_GREEN + "RULE EXECUTED      ::   Send ALIAS" + LOG_RESET);
        //Prepare Token & qwandaServiceUrl
        String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
        String tokenString = (String)$map.get("token");  
        //Getting the User BE and sending it as ALIAS
        //Get User BE for USER ALIAS based on the user's username
        JsonObject userObj = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_PEOPLE/linkcodes/LNK_CORE/attributes?PRI_USERNAME="+ $user.getUname(), tokenString));
        userObj.put("aliasCode", "USER"); 
        userObj.put("token", $value);      
        bus.publish("cmds", userObj);
        
        //Getting the Project BE and sending it as ALIAS
        //Get Project BaseEntity for PROJECT ALIAS based on the user's keycloak realm name
        JsonObject prjObj = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_PROJECTS/linkcodes/LNK_CORE/attributes?PRI_REALM="+$user.getRealm(), tokenString));
        prjObj.put("aliasCode", "PROJECT");   
        prjObj.put("token", $value);    
        bus.publish("cmds", prjObj);
        
        System.out.println( "\n" + LOG_RED + "RULE TERMINATED    ::   Send ALIAS" + LOG_RESET);
        System.out.println(LOG_YELLOW + "------------------------------------------------------------------------------------------------------------------------------------------------" + LOG_RESET);
end

//Rules to Send layout based on the realm name
rule "Send Memberhub Layout"
   agenda-group "layout"
   when
        bus: EventBus()
        $user: User1(realm == "memberhub")
        $map : Map($value: this["token"] != null)
   then
        System.out.println(LOG_YELLOW + "================================================================================================================================================" + LOG_RESET);
        System.out.println(LOG_GREEN + "RULE EXECUTED      ::   Memberhub Layout" + LOG_RESET);
        System.out.println(LOG_GREEN+ "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@" + LOG_RESET);
        System.out.println(LOG_GREEN+ "@@@                                                               @@@" + LOG_RESET);
        System.out.println(LOG_GREEN+ "@@@                    MEMBERHUB LAYOUT                           @@@" + LOG_RESET);
        System.out.println(LOG_GREEN+ "@@@                                                               @@@" + LOG_RESET);
        System.out.println(LOG_GREEN+ "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@" + LOG_RESET);

         //Prepare Token & qwandaServiceUrl
        String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
        String tokenString = (String)$map.get("token");   
        System.out.println("\nToken   ::   " + StringUtils.abbreviateMiddle(tokenString,"...",40));
        //Get Memberhub Layout
        String layout = QwandaUtils.apiGet("https://raw.githubusercontent.com/genny-project/layouts/master/layouts/memberhub.json", null);

        QCmdMessage cmd = new QCmdMessage("CMD_LAYOUT","layout1");
        JsonObject layoutObj = new JsonObject().mapFrom(cmd);
        layoutObj.put("data", new JsonObject(layout));
		layoutObj.put("token", $value);
        System.out.println("------------------------------------------------------------------------\n");
        System.out.println("MEMBERHUB LAYOUT   ::   "+layoutObj.toString());
        System.out.println("------------------------------------------------------------------------");
        bus.publish("cmds", layoutObj);

        //JsonObject quesGrp = new JsonObject( QwandaUtils.apiGet("https://raw.githubusercontent.com/genny-project/layouts/master/memberhub-questions.json", null));
        JsonObject quesGrp = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl +"/qwanda/baseentitys/PER_USER1/asks2/QUE_MEMBERHUB_GRP/PER_USER1", tokenString));
        //PRINT QUESTIONS
        quesGrp.put("token", $value);
        System.out.println("------------------------------------------------------------------------\n");
        System.out.println("QUESTION GROUP   ::   "+quesGrp.toString());
        System.out.println("------------------------------------------------------------------------");
        bus.publish("cmds", quesGrp);

        //Getting all BaseEntity and their attributes
        JsonObject homeLoan = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl +"/qwanda/baseentitys/PER_USER1/linkcodes/LNK_SCORE/attributes", tokenString));
        System.out.println("------------------------------------------------------------------------\n");
        System.out.println("HOMELOAN & HOLIDAY BE   ::   "+homeLoan.toString());  
        System.out.println("------------------------------------------------------------------------");
        homeLoan.put("token", $value);
        bus.publish("cmds", homeLoan);

        System.out.println( "\n" + LOG_RED + "RULE TERMINATED    ::   Memberhub Layout" + LOG_RESET);
        System.out.println(LOG_YELLOW + "------------------------------------------------------------------------------------------------------------------------------------------------" + LOG_RESET);
        
end


rule "Send layout1"
     salience 10
     agenda-group "layout"
     when
       bus: EventBus()
       $user: User1(realm != "memberhub" && available == true )
       $map : Map($value: this["token"] != null)
     then
        System.out.println(LOG_YELLOW + "================================================================================================================================================" + LOG_RESET);
        System.out.println(LOG_GREEN + "RULE EXECUTED      ::   Genny Layout" + LOG_RESET);
        System.out.println(LOG_GREEN+ "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@" + LOG_RESET);
        System.out.println(LOG_GREEN+ "@@@                                                               @@@" + LOG_RESET);
        System.out.println(LOG_GREEN+ "@@@                    GENNY LAYOUT                               @@@" + LOG_RESET);
        System.out.println(LOG_GREEN+ "@@@                                                               @@@" + LOG_RESET);
        System.out.println(LOG_GREEN+ "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@" + LOG_RESET);

         //Prepare Token & qwandaServiceUrl
        String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
        String tokenString = (String)$map.get("token");   
        System.out.println("\nToken   ::   " + StringUtils.abbreviateMiddle(tokenString,"...",40));
        //Get Genny Layout
        String layout = QwandaUtils.apiGet("https://raw.githubusercontent.com/genny-project/layouts/master/layouts/layout1.json", null);
        
        QCmdMessage cmd = new QCmdMessage("CMD_LAYOUT","layout1");
        JsonObject layoutObj = new JsonObject().mapFrom(cmd);
        layoutObj.put("msg_type", "CMD_MSG");
        layoutObj.put("cmd_type", "CMD_LAYOUT");
        layoutObj.put("code", "layout1");
        layoutObj.put("data", new JsonObject(layout));
		layoutObj.put("token", $value);
        System.out.println("------------------------------------------------------------------------\n");
        System.out.println("GENNY LAYOUT   ::   "+layoutObj.toString());
        System.out.println("------------------------------------------------------------------------");
        bus.publish("cmds", layoutObj);

        System.out.println( "\n" + LOG_RED + "RULE TERMINATED    ::   Genny Layout" + LOG_RESET);
        System.out.println(LOG_YELLOW + "------------------------------------------------------------------------------------------------------------------------------------------------" + LOG_RESET);
end

rule "Send BucketView"
    salience -10
    agenda-group "layout"
    when
       bus:EventBus()
       $user: User1(realm != "memberhub" && available == true )
       $map : Map($value: this["token"] != null)
    then
        System.out.println(LOG_YELLOW + "================================================================================================================================================" + LOG_RESET);
        System.out.println(LOG_GREEN + "RULE EXECUTED      ::   Send BucketView" + LOG_RESET);
       
       //Prepare Token & qwandaServiceUrl
        String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
        String tokenString = (String)$map.get("token");   

        System.out.println("\nToken   ::   " + StringUtils.abbreviateMiddle(tokenString,"...",40));
        System.out.println("Project Name   ::   " + $user.getRealm() );
         System.out.println("------------------------------------------------------------------------");

        // System.out.println("Sending Bucket View for project: "+$user.getRealm()); 

        //For the links and their weight
        JsonObject grpLinks = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_DASHBOARD/linkcodes/LNK_CORE/attributes", tokenString));
        //Getting B.E. to display in Bucket View
        JsonObject headerGrps = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_DRIVER_VIEW/linkcodes/LNK_CORE/attributes", tokenString));	
        JsonObject noQuotesBEG = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_NO_QUOTES/linkcodes/LNK_CORE/attributes", tokenString));
        JsonObject quotesBEG = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_QUOTES/linkcodes/LNK_CORE/attributes", tokenString));
        JsonObject approvedBEG = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_APPROVED/linkcodes/LNK_CORE/attributes", tokenString));
        JsonObject inTransitBEG = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_IN_TRANSIT/linkcodes/LNK_CORE/attributes", tokenString));
        JsonObject completedBEG = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_COMPLETED/linkcodes/LNK_CORE/attributes", tokenString));
        JsonObject paidBEG = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_PAID/linkcodes/LNK_CORE/attributes", tokenString));  
        //Getting Load data for each BEG's
        JsonObject noQuotes = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/BEG_0000001/linkcodes/LNK_BEG/attributes", tokenString));
        JsonObject quotes1 = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/BEG_0000002/linkcodes/LNK_BEG/attributes", tokenString));
        JsonObject quotes2 = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/BEG_0000003/linkcodes/LNK_BEG/attributes", tokenString)); 
        JsonObject approved = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/BEG_0000004/linkcodes/LNK_BEG/attributes", tokenString));
        JsonObject inTransit = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/BEG_0000005/linkcodes/LNK_BEG/attributes", tokenString)); 
		
		grpLinks.put("token", $value);
		headerGrps.put("token", $value);
		noQuotesBEG.put("token", $value);
		quotesBEG.put("token", $value);
		approvedBEG.put("token", $value);
		inTransitBEG.put("token", $value);
		completedBEG.put("token", $value);
		paidBEG.put("token", $value);
		noQuotes.put("token", $value);
		quotes1.put("token", $value);
		quotes2.put("token", $value);
		inTransit.put("token", $value);
		approved.put("token",$value);
		
        //Publish GRP_DASHBOARD
        bus.publish("cmds", grpLinks);	
        //Publish Header Grp
        bus.publish("cmds", headerGrps);	
        //Publish noQuotes BEG
        bus.publish("cmds", noQuotesBEG);
        //Publish Quotes BEG
        bus.publish("cmds", quotesBEG);
        //Publish Approved BEG
        bus.publish("cmds", approvedBEG);
        //Publish In Transit BEG
        bus.publish("cmds", inTransitBEG);
        //Publish Completed BEG
        bus.publish("cmds", completedBEG);
        //Publish Paiod BEG
        bus.publish("cmds", paidBEG);

        //Publish noQuotes load            
        bus.publish("cmds", noQuotes);
        //Publish Quotes load
        bus.publish("cmds", quotes1);
        //Publish Quotes load
        bus.publish("cmds", quotes2);
        //Publish approved loads  
        bus.publish("cmds", approved);
        //Publish In-Transit loads 
        bus.publish("cmds", inTransit);
        
        //Get Sub-Layout 
        String subLayout = QwandaUtils.apiGet("https://raw.githubusercontent.com/genny-project/layouts/master/card.json", null);    
       //Creating subLayout DATA_MSG
        JsonObject subLayoutObj = new JsonObject();
        subLayoutObj.put("msg_type", "DATA_MSG");
        subLayoutObj.put("data_type", "SUB_LAYOUT");
        subLayoutObj.put("code", "cardLayout");
        subLayoutObj.put("items", new JsonObject(subLayout));      
		subLayoutObj.put("token", $value);
		
        System.out.println("------------------------------------------------------------------------\n");
        System.out.println("SUBLAYOUT DATA   ::   " + subLayoutObj.toString()); 
        System.out.println("------------------------------------------------------------------------");
        bus.publish("cmds", subLayoutObj); 

        //sending cmd BUCKET_VIEW
        QCmdMessage cmdBucketView = new QCmdMessage("CMD_VIEW","BUCKET_VIEW");
        JsonObject bucketViewJson = new JsonObject().mapFrom(cmdBucketView);
        bucketViewJson.put("root", "GRP_DRIVER_VIEW");
        
		bucketViewJson.put("token", $value);
        System.out.println("BUCKETVIEW DATA   ::    "+bucketViewJson.toString()); 
        bus.publish("cmds", bucketViewJson); 

        System.out.println( "\n" + LOG_RED + "RULE TERMINATED    ::   Send BucketView" + LOG_RESET);
        System.out.println(LOG_YELLOW + "------------------------------------------------------------------------------------------------------------------------------------------------" + LOG_RESET);
end

