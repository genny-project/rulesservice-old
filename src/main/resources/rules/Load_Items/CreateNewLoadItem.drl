package com.sample;

import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QMessage.MessageData;
import io.vertx.rxjava.core.eventbus.EventBus;
import life.genny.qwandautils.QwandaUtils;
import com.google.gson.Gson;
import com.sample.*;
import java.util.Map;
import java.util.HashSet;
import java.util.Set;
import life.genny.qwanda.entity.User;

import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;


global java.lang.String REACT_APP_QWANDA_API_URL;

//Rule handling Next or Button click in the Create Job
rule "Create New Load Item"
    when
      $m : QEventMessage( event_type == "BTN_CLICK" && data.code == "QUE_CREATE_NEW_LOAD_ITEM" )
      bus: EventBus()
      $user: User(realm != null)
      $map : Map($value: this["token"] != null)    
    then
        System.out.println(LOG_YELLOW + "================================================================================================================================================" + LOG_RESET);
        System.out.println(LOG_GREEN + "RULE EXECUTED      ::    Create New Load Item  " + LOG_RESET);
        
        // Prepare GSON Deserialization
        GsonBuilder gsonBuilder = new GsonBuilder();
        gsonBuilder.registerTypeAdapter(LocalDateTime.class, new DateTimeDeserializer());
        Gson gson = gsonBuilder.create();
        
        //Prepare Token & qwandaServiceUrl
        String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
        String tokenString = (String)$map.get("token"); 
    
        //Creating new base-entity BEG for Posting new Job
        BaseEntity loadItem = QwandaUtils.createBaseEntityByCode(QwandaUtils.getUniqueId($user.getuCode(), null, "ITM", tokenString), "Load Item", qwandaServiceUrl, tokenString);
        String loadItemCode = loadItem.getCode();
        System.out.println("BaseEntity Load Item created is   ::  "+loadItem.toString());
        System.out.println("The Load Item code is   ::  "+loadItemCode);
        //Get data.value and decode
        String dataString = $m.data.getValue();
        JsonObject dataJson = new JsonObject(dataString);
        String loadCode = dataJson.getString("targetCode");
        System.out.println("The Load code is   ::  "+loadCode);
        
        
        //link newly created Item to the LOAD
        QwandaUtils.apiPostEntity(qwandaServiceUrl + "/qwanda/entityentitys", gson.toJson(new Link(loadCode,loadItemCode,"LNK_LOAD_ITEM")),tokenString);
        //Getting Post Load Question GRP
       JsonObject qCreateLoadItem = new JsonObject( QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/"+$user.getuCode()+"/asks3/QUE_CREATE_LOAD_ITEM_GRP/"+loadItemCode, tokenString));
       qCreateLoadItem.put("aliasCode", $m.data.getCode());
       qCreateLoadItem.put("token", tokenString);
       qCreateLoadItem.put("msg_type", "DATA_MSG");
       System.out.println("QName Json: "+qCreateLoadItem.toString());
       bus.publish("cmds",qCreateLoadItem);

       //sending cmd FORM_VIEW
       QCmdMessage cmdFormView = new QCmdMessage("CMD_VIEW","FORM_VIEW");
       //Convert cmd to JSON Obj
       JsonObject formViewJson = new JsonObject().mapFrom(cmdFormView);
        formViewJson.put("root", "QUE_CREATE_LOAD_ITEM_GRP");
        formViewJson.put("token", tokenString);
       System.out.println(" ##################### ");
       System.out.println("CMD VIEW Msg ="+formViewJson.toString());
       System.out.println(" #################### ");
       //Publish it to the EventBus
       bus.publish("cmds", formViewJson);        

       System.out.println( "\n" + LOG_RED + "RULE TERMINATED    ::  Create New Load Item   " + LOG_RESET);
       System.out.println(LOG_YELLOW + "------------------------------------------------------------------------------------------------------------------------------------------------" + LOG_RESET);
        
end


