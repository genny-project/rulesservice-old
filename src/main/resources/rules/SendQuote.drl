// package com.sample

// import org.apache.commons.lang3.StringUtils;

// import life.genny.qwanda.message.QEventMessage;
// import life.genny.qwanda.message.QMessage.MessageData;
// import life.genny.qwanda.message.QCmdMessage;
// import life.genny.qwanda.message.QDataBaseEntityMessage;
// import io.vertx.rxjava.core.eventbus.EventBus;
// import io.vertx.core.buffer.Buffer;
// import com.google.gson.Gson;
// import life.genny.qwanda.Answer;
// import life.genny.qwanda.message.QDataAnswerMessage;
// import life.genny.qwandautils.QwandaUtils;
// import life.genny.qwanda.message.QDataAskMessage;
// import life.genny.qwanda.message.QCmdMessage;
// import life.genny.qwanda.Ask;
// import life.genny.qwanda.entity.BaseEntity;

// import java.lang.reflect.Type;
// import java.util.Map;
// import java.util.Set;
// import java.time.LocalDateTime;
// import java.time.ZonedDateTime;
// import com.google.gson.GsonBuilder;
// import com.google.gson.JsonDeserializationContext;
// import com.google.gson.JsonDeserializer;
// import com.google.gson.JsonElement;
// import com.google.gson.JsonParseException;
// import com.google.gson.JsonPrimitive;
// import com.google.gson.JsonSerializationContext;
// import com.google.gson.FieldNamingPolicy;
// import io.vertx.core.json.JsonObject;
// import io.vertx.core.json.JsonArray;
// import java.time.format.DateTimeFormatter;
// import life.genny.qwanda.DateTimeDeserializer;
// import life.genny.qwanda.entity.User;
// import life.genny.qwanda.Link;

// // global variables for color logs
// global java.lang.String LOG_RESET;
// global java.lang.String LOG_RED;
// global java.lang.String LOG_GREEN;
// global java.lang.String LOG_YELLOW;
// global java.lang.String LOG_BLUE;
// global java.lang.String LOG_PURPLE;
// global java.lang.String LOG_CYAN;
// global java.lang.String LOG_WHITE;
// global java.lang.String LOG_BOLD;

// rule "Make Offer"

//     when
//         $m : QEventMessage( event_type == "BTN_CLICK" && data.code == "BTN_MAKE_OFFER")
//         bus: EventBus()
//         $user: User(realm != null )
//         $map : Map($value: this["token"] != null)
//         $map1 : Map($value1: this["realm"] != null)
//     then

//         System.out.println(LOG_YELLOW + "================================================================================================================================================" + LOG_RESET);
//         System.out.println(LOG_GREEN + "RULE EXECUTED      ::   Make Offer" + LOG_RESET);

//         //Prepare Token & qwandaServiceUrl
//         String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
//         String tokenString = (String)$map.get("token");   
        
//         // retrieve jsonObj's values sent on data.value
//         String data = $m.getData().getValue();
//         if(data != null) {

//             JsonObject dataJson = new JsonObject(data);
//             String hint = dataJson.getString("hint");
//             String baseEntityCode = dataJson.getString("itemCode"); // BEG_X ....

//             // base entity code is the job quote will be quoting on
//             if(baseEntityCode != null) {
//                 // Create Offer BE
//                 BaseEntity offer = QwandaUtils.createBaseEntityByCode(QwandaUtils.getUniqueId($user.getuCode(), null, "OFR", tokenString), "Offer", qwandaServiceUrl, tokenString);
//                 System.out.println("------------------------------------------------------------------------\n");
//                 System.out.println("OFFER BASE ENTITY   ::   "+offer.toString());  
//                 System.out.println("------------------------------------------------------------------------");
                
//                 if(offer != null) {
                   
//                     String offerCode = offer.getCode();
//                     System.out.println("OFFER CODE   ::   "+offerCode);
//                     //get questions for making a QUOTE
//                     JsonObject offerGrp = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl + "/qwanda/baseentitys/" + $user.getuCode() + "/asks2/QUE_OFFER_DETAILS_GRP/" + offerCode, tokenString));
//                     System.out.println("------------------------------------------------------------------------");
//                     System.out.println("MAKE OFFER QUES   ::   "+ offerGrp.toString());	
//                     System.out.println("------------------------------------------------------------------------");	
                    
//                     offerGrp.put("token", tokenString);					
//                     bus.publish("cmds",  offerGrp);
//                 }
//             }
//         }
//         System.out.println( "\n" + LOG_RED + "RULE TERMINATED    ::   Make Offer" + LOG_RESET);
//         System.out.println(LOG_YELLOW + "------------------------------------------------------------------------------------------------------------------------------------------------" + LOG_RESET);
//     end

// rule "Send Quote"
//     when
//        $m : QEventMessage( event_type == "FORM_SUBMIT" && data.code == "QUE_OFFER_DETAILS_GRP" ) 
//        bus:EventBus()
//        $user: User(realm != null)
//        $map : Map($value: this["token"] != null)
//     then
//         System.out.println(LOG_YELLOW + "================================================================================================================================================" + LOG_RESET);
//         System.out.println(LOG_GREEN + "RULE EXECUTED      ::   Send Quote" + LOG_RESET);
       
//         // Prepare GSON Deserialization
//         Gson gson = new GsonBuilder()
//             .registerTypeAdapter(LocalDateTime.class, new JsonDeserializer<LocalDateTime>() {
//                 @Override
//                 public LocalDateTime deserialize(final JsonElement json, final Type type,
//                     final JsonDeserializationContext jsonDeserializationContext)
//                     throws JsonParseException {
//                 return LocalDateTime.parse(json.getAsJsonPrimitive().getAsString(), DateTimeFormatter.ISO_LOCAL_DATE_TIME);
//                 }

//                 public JsonElement serialize(final LocalDateTime date, final Type typeOfSrc,
//                     final JsonSerializationContext context) {
//                 return new JsonPrimitive(date.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME)); 
//                 }
//             }).create();

//        //Prepare Token & qwandaServiceUrl
//         String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
//         String tokenString = (String)$map.get("token");   

//         System.out.println("\nToken   ::   " + StringUtils.abbreviateMiddle(tokenString,"...",40));
//         System.out.println("------------------------------------------------------------------------");
//         String userCode = $user.getuCode();
//         String offerCode = $m.getData().getValue();

//         System.out.println("OFFER CODE     ::    "+ offerCode);
//         System.out.println("USER CODE      ::    "+ userCode);

//         // Creating a link between USER & OFFER
//         System.out.println(QwandaUtils.apiPostEntity(qwandaServiceUrl + "/qwanda/entityentitys", gson.toJson(new Link(userCode,offerCode,"LNK_BEG","OFFER")),tokenString));
       
//         // String output = QwandaUtils.apiPostEntity(qwandaServiceUrl + "/qwanda/entityentitys", gson.toJson(new Link(userCode,offerCode,"LNK_BEG","OFFER")),tokenString);
//         // System.out.println("OUTPUT         ::    "+ output);
//         // if( output != "hello" ){
//         //     System.out.println(LOG_GREEN + "\nLINK CREATED BETWEEN          ::   " + userCode + "  &  " + offerCode  + LOG_RESET);
//         // }else{
//         //     System.out.println(LOG_GREEN + "\nLINK NOT CREATED BETWEEN      ::   " + userCode + "  &  " + offerCode  + LOG_RESET);
//         // }

//         System.out.println( "\n" + LOG_RED + "RULE TERMINATED    ::   Send Quote" + LOG_RESET);
//         System.out.println(LOG_YELLOW + "------------------------------------------------------------------------------------------------------------------------------------------------" + LOG_RESET);
// end