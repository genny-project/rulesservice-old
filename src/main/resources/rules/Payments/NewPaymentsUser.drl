package life.genny.rules;

import life.genny.rules.RulesUtils;
import life.genny.rules.QRules;
import life.genny.qwanda.entity.BaseEntity;

import life.genny.qwanda.Answer;

import life.genny.qwandautils.PaymentUtils;
import life.genny.qwandautils.PaymentEndpoint;
import life.genny.qwandautils.QwandaUtils;
import life.genny.qwandautils.MergeUtil;
import life.genny.rules.RulesUtils;
import com.google.gson.Gson;

import java.time.LocalDateTime;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import java.time.format.DateTimeFormatter;
import life.genny.qwanda.DateTimeDeserializer;

import java.util.Map;

rule "New Payments User"
	agenda-group "payments"
	no-loop true
    when
    	rules: QRules( isState("IS_LOGGED_IN") && (!isState("IS_ASSEMBLY_USER_CREATED"))) 
    then
     
     RulesUtils.header(drools.getRule().getName());
     
     String tokenString = rules.getToken();
     String qwandaServiceUrl = rules.getQwandaServiceUrl();
		
	 Gson gson = new Gson();
     GsonBuilder gsonBuilder = new GsonBuilder();
     gsonBuilder.registerTypeAdapter(LocalDateTime.class, new DateTimeDeserializer());
     gson = gsonBuilder.create();
     	     
     /* get assembly authKey   */
     String assemblyAuthToken = PaymentUtils.getAssemblyAuthKey();
     
     /*  Creates assembly userId */
     String assemblyId = PaymentUtils.getAssemblyId(rules.getToken());
     
      /* Check If user already exists in Assembly    */  
     Boolean isAssemblyUserExists = PaymentUtils.checkIfAssemblyUserExists(assemblyId);
     rules.println("isAssemblyUserExists::"+isAssemblyUserExists);
     
	 if(!isAssemblyUserExists) {
     			
     	/* logic to create assembly user & set the payments userProfileExists flag  */
     	PaymentUtils.createAssemblyUser(assemblyId, assemblyAuthToken, rules.getToken()); 
     	
     	/* Creates a new attribute for assembly user ID */
     	Answer assemblyIdAnswer = new Answer(rules.getUser().getCode(), rules.getUser().getCode(), "PRI_ASSEMBLY_USER_ID", assemblyId);
     	rules.println("assemblyIdAnswer ::"+assemblyIdAnswer);
    	QwandaUtils.apiPostEntity(qwandaServiceUrl+"/qwanda/answers",gson.toJson(assemblyIdAnswer), tokenString);
     	rules.println("assembly ID created in our system ::"+assemblyId);
     	RulesUtils.println("Assembly Company created");
     	
     	
     	/* Answer assemblyIdAnswer = new Answer(rules.getUser().getCode(), rules.getUser().getCode(), "PRI_ASSEMBLY_USER_ID", assemblyId);
     	rules.publishData(assemblyIdAnswer); */
      }
      
      Boolean isCheckUserExists = PaymentUtils.checkIfAssemblyUserExists(assemblyId);
      rules.println("isAssemblyUserExists::"+isCheckUserExists);
     	
      if(isCheckUserExists == true) {  	
     	rules.setState("IS_ASSEMBLY_USER_CREATED");
      }
	

	  rules.footer();      		      
end