package com.sample;

import life.genny.qwanda.entity.User;
import io.vertx.rxjava.core.eventbus.EventBus;
import life.genny.qwanda.Answer;

import life.genny.qwandautils.PaymentUtils;
import life.genny.qwandautils.QwandaUtils;
import life.genny.qwandautils.RulesUtils;
import life.genny.qwandautils.MergeUtil;

import com.google.gson.Gson;

import java.time.LocalDateTime;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import java.time.format.DateTimeFormatter;
import life.genny.qwanda.DateTimeDeserializer;

import java.util.Map;


rule "Create Payments Assembly Company"
	no-loop true
	when 
		$user: User(realm != "memberhub" && (isAvailable == true && isAssemblyUserProfileExists == true) )
		$map : Map($value: this["token"] != null)
		bus:EventBus()
	then
		RulesUtils.header("Creation of Assembly Company");
		System.out.println(QwandaUtils.executeRuleLogger("Creation of Assembly Company"));
		
		String tokenString = (String)$map.get("token"); 
		String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
		
		Gson gson = new Gson();
     	GsonBuilder gsonBuilder = new GsonBuilder();
     	gsonBuilder.registerTypeAdapter(LocalDateTime.class, new DateTimeDeserializer());
     	gson = gsonBuilder.create();
		
		 /* get assembly authKey   */
    	String assemblyAuthToken = PaymentUtils.getAssemblyAuthKey();
    	String userCode = QwandaUtils.getBaseEntityCodeForUserName($user.getUname(),tokenString);
     
     	/*  Gets assembly userId */
    	String assemblyId = MergeUtil.getAttrValue(userCode, "PRI_ASSEMBLY_USER_ID", tokenString);
     	
     	if(MergeUtil.getAttrValue(userCode, "PRI_ASSEMBLY_COMPANY_ID", tokenString) == null) {	
     	
     		RulesUtils.println("Company not found for user..So creating a Company now..");
     		RulesUtils.println("assembly ID ::"+assemblyId);
    		
     		if(assemblyId != null) {
				
				/* Create Assembly Company for user */
				String companyId = PaymentUtils.createCompany(assemblyId, assemblyAuthToken, tokenString);
		
				/* Save companyId as an attribute for the user */
				RulesUtils.println("create payment company response -"+companyId);
				System.out.println("create payment company response -"+companyId);
		
				if(companyId != null) {
    	 			Answer assemblyIdAnswer = new Answer(userCode, userCode, "PRI_ASSEMBLY_COMPANY_ID", companyId);
    	 			QwandaUtils.apiPostEntity(qwandaServiceUrl+"/qwanda/answers",gson.toJson(assemblyIdAnswer), tokenString);
     				RulesUtils.println("Assembly Company created");
     				System.out.println("Assembly Company created");
     				
				}
			}
     	}	
     	
		
		RulesUtils.footer("Assembly Company Creation");
end