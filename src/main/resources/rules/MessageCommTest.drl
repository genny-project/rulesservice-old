package com.sample

import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QMessage.MessageData;
import io.vertx.rxjava.core.eventbus.EventBus;
import io.vertx.core.json.JsonObject;



rule "MsgCommTest"
    when
        $m : QEventMessage( event_type == "TV_SELECT" && data.code == "TV1" && data.value == "GRP_COMMS_TEST" )
        bus: EventBus()
        $map : Map($value: this["token"] != null)
    then
        System.out.println(LOG_YELLOW + "================================================================================================================================================" + LOG_RESET);
        System.out.println(LOG_GREEN + "RULE EXECUTED      ::   Msg Comm Test Layout" + LOG_RESET);
        //Prepare Token & qwandaServiceUrl
        String qwandaServiceUrl = System.getenv("REACT_APP_QWANDA_API_URL");
        String tokenString = (String)$map.get("token");   
        //Get Genny Layout
         String layout = QwandaUtils.apiGet("https://raw.githubusercontent.com/genny-project/layouts/master/layouts/test_comm.json", null);
      
        QCmdMessage cmd = new QCmdMessage("CMD_LAYOUT","layout1");
        JsonObject layoutObj = new JsonObject().mapFrom(cmd);
        layoutObj.put("data", new JsonObject(layout));
        layoutObj.put("token", tokenString);
        //layoutObj.put("data", testLayoutObj);

        System.out.println("------------------------------------------------------------------------\n");
        System.out.println("Message Comm Test LAYOUT   ::   "+layoutObj.toString());
        System.out.println("------------------------------------------------------------------------");
        bus.publish("cmds", layoutObj);
         
        JsonObject quesGrp = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl +"/qwanda/baseentitys/PER_USER1/asks2/QUE_TEST_COMMS_GRP/TST_COMMS", tokenString));
        //PRINT QUESTIONS
        quesGrp.put("token", tokenString);
        System.out.println("------------------------------------------------------------------------\n");
        System.out.println("QUESTION GROUP   ::   "+quesGrp.toString());
        System.out.println("------------------------------------------------------------------------");
        bus.publish("cmds", quesGrp);
        
        //Get TST_COMMS BE
       JsonObject userObj = new JsonObject(QwandaUtils.apiGet(qwandaServiceUrl+"/qwanda/baseentitys/GRP_PEOPLE/linkcodes/LNK_TEST/attributes?PRI_USERNAME=test", tokenString));
       
       System.out.println("userObj ::"+userObj);
       userObj.put("token", tokenString);      
       bus.publish("cmds", userObj);

        System.out.println( "\n" + LOG_RED + "RULE TERMINATED    ::   Msg Comm Test Layout" + LOG_RESET);
        System.out.println(LOG_YELLOW + "------------------------------------------------------------------------------------------------------------------------------------------------" + LOG_RESET);

end

rule "MsgCommTest-SMS"
    when
        $m : QEventMessage( event_type == "BTN_CLICK" && data.code == "QUE_TEST_COMMS_SEND_SMS" )
        bus: EventBus()
        $map : Map($value: this["token"] != null)
    then
        System.out.println(LOG_YELLOW + "================================================================================================================================================" + LOG_RESET);
        System.out.println(LOG_GREEN + "RULE EXECUTED      ::   Msg Comm Test SMS BTN CLICK" + LOG_RESET);
        String tokenString = (String)$map.get("token");
        //QMSGMessage(String msg_type, QBaseMSGMessageType msgMessageType, String code,String[] attachments)
        QMSGMessage msgMessage = new QMSGMessage("MSG_MESSAGE", QBaseMSGMessageType.SMS, "TST_COMMS", null); 	
 	 	JsonObject jsonMessage = new JsonObject().mapFrom(msgMessage);
 		jsonMessage.put("token",tokenString);
        System.out.println("sms Message:" + jsonMessage);
        bus.publish("messages", jsonMessage);       
        System.out.println( "\n" + LOG_RED + "RULE TERMINATED    ::   Msg Comm Test SMS BTN CLICK" + LOG_RESET);
        System.out.println(LOG_YELLOW + "------------------------------------------------------------------------------------------------------------------------------------------------" + LOG_RESET);        
end

rule "MsgCommTest-EMAIL"
    when
        $m : QEventMessage( event_type == "BTN_CLICK" && data.code == "QUE_TEST_COMMS_SEND_EMAIL" )
        bus: EventBus()
        $map : Map($value: this["token"] != null)
    then
        System.out.println(LOG_YELLOW + "================================================================================================================================================" + LOG_RESET);
        System.out.println(LOG_GREEN + "RULE EXECUTED      ::      Msg Comm Test EMAIL BTN CLICK" + LOG_RESET);
        String tokenString = (String)$map.get("token");
        QMSGMessage msgMessage = new QMSGMessage("MSG_MESSAGE", QBaseMSGMessageType.EMAIL, "TST_COMMS", null); 	
 	 	JsonObject jsonMessage = new JsonObject().mapFrom(msgMessage);
 		jsonMessage.put("token",tokenString);
        System.out.println("sms Message:" + jsonMessage);
        bus.publish("messages", jsonMessage);       
        System.out.println( "\n" + LOG_RED + "RULE TERMINATED    ::   Msg Comm Test EMAIL BTN CLICK" + LOG_RESET);
        System.out.println(LOG_YELLOW + "------------------------------------------------------------------------------------------------------------------------------------------------" + LOG_RESET);        
end

rule "MsgCommTest-button"
	when
		$m : QEventMessage( event_type == "BTN_EVT_BUTTON" )
        bus: EventBus()
        $map : Map($value: this["token"] != null)
    then
    	System.out.println("Message layout submit event");
end
